package com.brilliantblue.panasonic.IFEdemo{		import flash.display.*;	import flash.geom.Rectangle;	import flash.events.*;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.filters.GlowFilter;	import flash.filters.BitmapFilterQuality;	//import flash.utils.*		import caurina.transitions.Tweener;	import caurina.transitions.Equations;		import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;		public class view extends flash.display.MovieClip	{				public var screenTitle:String = "Sample Title";		public var contentRegion:ContentRegion;		public var screen:BaseScreen;		public var contentMC:MovieClip;		public var closeButton:CloseButton;		public var Layout:String;		public var _stageWidth;		public var _stageHeight;		public var _purchased:Boolean;		public var CC_CategoryFormat:TextFormat;		public var CC_SubHeadFormat:TextFormat;		public var CC_InputFormat:TextFormat;		public var CC_BodyFormat:TextFormat;		public var CC_ListFormat:TextFormat;		public var LC_SubHeadFormat:TextFormat;		public var LC_BodyFormat:TextFormat;		public var CC_ContentHeadingFormat:TextFormat;		public var CC_SubHeadFormatCentered:TextFormat;		//public var CC_NewsSourceFormat:TextFormat;		public var MarqueeHeadFormat:TextFormat;		public var MarqueeBodyFormat:TextFormat;				/*public var CC_NewsHeadlineFormat:TextFormat;		public var CC_NewsSourceFormat:TextFormat;		public var CC_NewsBylineFormat:TextFormat;		public var CC_ReadMoreFormat:TextFormat;*/		//public var _root = MovieClip(root);		public var _itemID:String;		//public var _stage:Stage;		private var _added:Boolean;						public var _scroller:MovieClip;		public var upArrow:MovieClip;		public var downArrow:MovieClip;				//keyboard input vars		public var itemIndex;		public var nextItem;		public var prevItem;		public var nextItemOption;		public var prevItemOption;		public var _shiftOn:Boolean;		public var _capsOn:Boolean;		public var KH:KeyHandler;		public var k:String;						public var parentMC;				public var currentItemOption;		public var currentItem;				public var totalItems;		public var currentItemParent;		public var currentItemChild;		public var currentItemGroup = "leftNav";										public var glowFilter;						public function view ()		{			setFormats();						this.name = "baseView";			var stageWidth = 1280;			//var contentMC;			screen = new BaseScreen();			screen.name = "screen";			this.addChild(screen);						contentMC = new MovieClip();			contentMC.name = "Sample MovieClip";			//this will be changed to an empty movieclip as soon as I take out the autowidth adjustment in contentRegion.as						contentRegion = new ContentRegion(contentMC);			contentRegion.name = "contentRegion";			contentRegion.setLayout(Layout);			this.addChild(contentRegion);									//there could be default buttons here			closeButton = new CloseButton();			closeButton.name = "closeButton";			closeButton.setClickEvent(closeButtonClick);			this.addChild(closeButton);									KH = new KeyHandler();			_scroller = contentRegion.sb;			upArrow = _scroller.upArrow;			downArrow = _scroller.downArrow;															glowFilter = new GlowFilter(0xFFFFFF,                                  .8,//alpha                                  2,//blurx                                  2,//blury                                  4,//strength                                  BitmapFilterQuality.LOW,//quality                                  true,//inner                                  false);//knockout											addEventListener(Event.ADDED_TO_STAGE, setScreenFocus,false,0,true);								}				public function setScreenFocus(e:Event){			_added = true;			this.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						removeEventListener(Event.ADDED_TO_STAGE, setScreenFocus);		}						public function set ID (itemID):void		{			_itemID = itemID;		}		public function set purchased (itemPurchased):void		{			_purchased = itemPurchased;		}						public function closeButtonClick(e:MouseEvent):void		{						var p=this.parent;			Tweener.addTween(p,{x: p.width+800, time: 1, transition:"easeOutStrong", onComplete: killScreen, onCompleteScope: this});			//MovieClip(root).screenClass = null;			MovieClip(root).showMenu();		}				public function closeButtonSoftClick():void// should be used event dispatch where possible but sometimes still need this		{						var p=this.parent;			Tweener.addTween(p,{x: p.width+800, time: 1, transition:"easeOutStrong", onComplete: killScreen, onCompleteScope: this});			//MovieClip(root).screenClass = null;			MovieClip(root).showMenu();		}						public function closeButtonSoftClickNoMenu():void// not sure if this is still being used		{						var p=this.parent;			Tweener.addTween(p,{x: p.width+800, time: 1, transition:"easeOutStrong", onComplete: killScreen, onCompleteScope: this});						//MovieClip(root).screenClass = null;					}				public function swapOutClose():void		{						//contentRegion.destroyScroller();						screenShutDown();			var p=this.parent;			//MovieClip(root).screenClass = null;			while(this.numChildren) this.removeChildAt(0);			p.removeChild(this);					}				protected function screenShutDown()		{			//placeholder for overrides		}								public function killScreen():void		{						//MovieClip(root).stopAllMedia();						try{							var p=this.parent;						screenShutDown();						//contentRegion.destroyScroller();						while(p.numChildren) p.removeChildAt(0);						p.removeChild(this);			}catch(e:Error){									}			///this is legacy and should be removed but is being used by headlines and weather still.			try{					var DetailScreen = p.getChildByName("DetailScreen");									}catch(e:Error){									}		}								public function setScreenTitle(screenTitle):void		{			screen.setScreenTitle(screenTitle);		}				public function setContentMC(contentMC):void		{			try{				var p = contentRegion.scrollArea;				while(p.numChildren) p.removeChildAt(0);			}catch(e:Error){							}			contentRegion.scrollArea.addChild(contentMC);						if(_added == true){			_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						//_scroller.scroller.y -= Math.min(_scroller.scroller.y -_scroller.track.height/totalItems, 0);			_scroller.scroller.y = 0;			_scroller.startScroll();			_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));			}		}				public function setLayout(layout):void		{			contentRegion.setLayout(layout);		}				public function adjustScreen():void		{									var baseScreenHole = new MovieClip();				baseScreenHole.name = "baseScreenHole";				baseScreenHole.alpha = 0;				baseScreenHole.blendMode = 'alpha';							var baseScreenHoleShape = new Shape();						baseScreenHoleShape.graphics.beginFill(0x000000, 1);				baseScreenHoleShape.graphics.drawRoundRect(0,0,800,400,65,65);				baseScreenHoleShape.graphics.endFill();			var grid:Rectangle = new Rectangle(120, 120, 600, 200);				baseScreenHoleShape.scale9Grid = grid;				baseScreenHole.addChild(baseScreenHoleShape);			screen.background.alpha = 0.7;			screen.background.blendMode = 'layer';			screen.background.addChild(baseScreenHole);						screen.background.getChildByName("baseScreenHole").x = contentRegion.x - 80;			screen.background.getChildByName("baseScreenHole").y = contentRegion.y - 52;			screen.background.getChildByName("baseScreenHole").height = contentRegion.background.height;			screen.background.getChildByName("baseScreenHole").width = contentRegion.background.width;														}								public function setFormats():void		{						CC_CategoryFormat = createTextFormat("Reflex Bold", 0xFFFFFF, 25, "left", true);			CC_SubHeadFormat = createTextFormat("Century Gothic", 0xFFFFFF, 30, "left", true);			CC_SubHeadFormatCentered = createTextFormat("Century Gothic", 0xFFFFFF, 30, "center", true);			CC_InputFormat = createTextFormat("Century Gothic", 0xFFFFFF, 24, "left", false);			/*CC_NewsSourceFormat = createTextFormat("Century Gothic", 0xFFFFFF, 19, "left", false);			*/						CC_BodyFormat = createTextFormat("Century Gothic", 0xFFFFFF, 25, "left", true);			CC_ListFormat = createTextFormat("Century Gothic", 0xFFFFFF, 21, "left", false);			CC_ContentHeadingFormat = createTextFormat("Century Gothic", 0xFFFFFF, 21, "left", true);						LC_SubHeadFormat = createTextFormat("Century Gothic", 0xFFFFFF, 30, "left", true);			LC_BodyFormat = createTextFormat("Century Gothic", 0xFFFFFF, 21, "left", false);			MarqueeHeadFormat = createTextFormat("Century Gothic", 0x434848, 21, "left", true);			MarqueeBodyFormat = createTextFormat("Century Gothic", 0x8e9494, 21, "left", true);								/*CC_NewsHeadlineFormat = new TextFormat();			CC_NewsHeadlineFormat.font = "Century Gothic";			CC_NewsHeadlineFormat.kerning = true;			CC_NewsHeadlineFormat.bold = true;			CC_NewsHeadlineFormat.color = 0xFFFFFF;			CC_NewsHeadlineFormat.size = 18;			//CC_NewsHeadlineFormat.leading = 15;			CC_NewsHeadlineFormat.align = "left";						CC_NewsSourceFormat = new TextFormat();			CC_NewsSourceFormat.font = "Century Gothic";			CC_NewsSourceFormat.kerning = true;			CC_NewsSourceFormat.color = 0xFFFFFF;			CC_NewsSourceFormat.size = 13;			//CC_NewsSourceFormat.leading = 15;			CC_NewsSourceFormat.align = "left";						CC_NewsBylineFormat = new TextFormat();			CC_NewsBylineFormat.font = "Century Gothic";			CC_NewsBylineFormat.kerning = true;			CC_NewsBylineFormat.color = 0xFFFFFF;			CC_NewsBylineFormat.size = 14;			//CC_NewsBylineFormat.leading = 14;			CC_NewsBylineFormat.align = "left";						CC_ReadMoreFormat = new TextFormat();			CC_ReadMoreFormat.font = "Century Gothic";			CC_ReadMoreFormat.kerning = true;			CC_ReadMoreFormat.color = 0xFFFFFF;			CC_ReadMoreFormat.size = 14;			//CC_NewsBylineFormat.leading = 14;			CC_ReadMoreFormat.align = "left";			*/					}						public function convertKeyCodeToKey(n:Number):String 		{		var k:String;				var numerals = new Array();		numerals[48] = numerals[96] = "0";		numerals[49] = numerals[97] = "1";		numerals[50] = numerals[98] = "2";		numerals[51] = numerals[99] = "3";		numerals[52] = numerals[100] = "4";		numerals[53] = numerals[101] = "5";		numerals[54] = numerals[102] = "6";		numerals[55] = numerals[103] = "7";		numerals[56] = numerals[104] = "8";		numerals[57] = numerals[105] = "9";				var numeralsShifted = new Array();		numeralsShifted[48] = numeralsShifted[96] = ")";		numeralsShifted[49] = numeralsShifted[97] = "!";		numeralsShifted[50] = numeralsShifted[98] = "@";		numeralsShifted[51] = numeralsShifted[99] = "#";		numeralsShifted[52] = numeralsShifted[100] = "$";		numeralsShifted[53] = numeralsShifted[101] = "%";		numeralsShifted[54] = numeralsShifted[102] = "^";		numeralsShifted[55] = numeralsShifted[103] = "&";		numeralsShifted[56] = numeralsShifted[104] = "*";		numeralsShifted[57] = numeralsShifted[105] = "(";				var punctuation = new Array();				punctuation[106] = "*";		punctuation[107] = "+";		punctuation[109] = "-";		punctuation[110] = ".";		punctuation[111] = "/";		punctuation[186] = ";";		punctuation[187] = "=";		punctuation[188] = ",";		punctuation[189] = "-";		punctuation[190] = ".";		punctuation[191] = "/";		punctuation[192] = "`";		punctuation[219] = "[";		punctuation[220] = "\\";		punctuation[221] = "]";		punctuation[222] = "'";				var punctuationShifted = new Array();		punctuationShifted[106] = "*";		punctuationShifted[107] = "+";		punctuationShifted[109] = "-";		punctuationShifted[110] = "";		punctuationShifted[111] = "/";			punctuationShifted[186] = ":";		punctuationShifted[187] = "+";		punctuationShifted[188] = "<";		punctuationShifted[189] = "_";		punctuationShifted[190] = ">";		punctuationShifted[191] = "?";		punctuationShifted[192] = "~";		punctuationShifted[219] = "{";		punctuationShifted[220] = "|";		punctuationShifted[221] = "}";		punctuationShifted[222] = "\"";										//trace("KEY: " + n);		switch(n)		{			case 166: // remote back			case 36:  // keypad home				k = KeyType.HOME;			break;//			case 27:  // escape//				k = KeyType.ESC;//			break;			case 8:   // backspace				k = KeyType.BACKSPACE;			break;			case 27:  // escape			case 36:  // "i"			case 35:  // on/off				//if(shiftOn == true && n == 27)				//{					//k = KeyType.ESC;				//}				//else				//{					k = KeyType.BACK;				//}							break;						case 37:			case 112:	//F1			case 118:	//F7 - to work in IE				k = KeyType.LEFT;			break;			case 38:			case 114:	//F3				k = KeyType.UP;			break;			case 39:			case 113:	//F2				k = KeyType.RIGHT;			break;			case 40:			case 115:	//F4				k = KeyType.DOWN;			break;			case 13:  // enter			case 12:  // keypad 5			case 116:  // F5				k = KeyType.OK;			break;						case 33:  // pageUp				k = KeyType.CHANNEL_UP;			break;			case 34:  // pageDown				k = KeyType.CHANNEL_DOWN;			break;			case 107:  // +				k = KeyType.VOLUME_UP;			break;			case 109:  // 				k = KeyType.VOLUME_DOWN;			break;			case 45:  // INS				k = KeyType.PLAY_PAUSE;			break;			case 46:  // DEL				k = KeyType.STOP;			break;			case 220:  // \				k = KeyType.REWIND;			break;			case 192:  // `				k = KeyType.FAST_FORWARD;			break;						case 111:  // /				k = KeyType.ATTENDANT;			break;			case 117:  // F6				k = KeyType.CANCEL_ATTENDANT;			break;			case 106:  // *				k = KeyType.LIGHT;			break;			case 9:				//if(shiftOn == true)				//{					//k = KeyType.SHIFTTAB;					//}				//else				//{					k = KeyType.TAB;				//}			break;			case 65:  // alphas			case 66:			case 67:			case 68:			case 69:			case 70:			case 71:			case 72:			case 73:			case 74:			case 75:			case 76:			case 77:			case 78:			case 79:			case 80:			case 81:			case 82:			case 83:			case 84:			case 85:			case 86:			case 87:			case 88:			case 89:			case 90:				//if(capsOn != true)				//{					//n += 32;				//}				k = String.fromCharCode(n);			break;			case 32:  // space				k = " ";			break;			case 48:  // numerals			case 49:			case 50:			case 51:			case 52:			case 53:			case 54:			case 55:			case 56:			case 57:			case 96:			case 97:			case 98:			case 99:			case 100:			case 101:			case 102:			case 103:			case 104:			case 105:				/*if(shiftOn == true)				{					k = numeralsShifted[n];					}				else				{*/					k = numerals[n];				//}				break;			case 106: // keypad / 			case 107: // keypad +			case 109: // keypad -			case 110: // keypad .			case 111: // keypad /			case 186: // ;			case 187: // +			case 188: // ,			case 189: // -			case 190: // .			case 191: // /			case 192: // `			case 219: // [			case 220: // \				case 221: // ]			case 222: // '				/*if(shiftOn == true)				{					k = punctuationShifted[n];					}				else				{*/					k = punctuation[n];				//}			break;		}			return k;	}							public function createTextField(x:Number, y:Number, width:Number, height:Number):TextField 		{				var result:TextField = new TextField();				result.x = x; 				result.y = y;				result.autoSize = TextFieldAutoSize.LEFT;				result.embedFonts = true;				result.selectable = false; 				result.width = width; 				result.height = height;				return result;       			}						public function createTextFormat(font:String, color, size:Number, align:String, bold:Boolean):TextFormat 		{				var result:TextFormat = new TextFormat();				result.font = font; 				result.color = color;				result.size = size;				result.align = align;				result.kerning = true; 				result.bold = bold;				return result;       			}		public function createInputTextField(x:Number, y:Number, width:Number, height:Number):TextField		{			var result:TextField = new TextField();				result.type = TextFieldType.INPUT;				result.x = x; 				result.y = y;				result.width = width; 				result.height = height;				result.embedFonts = true;				result.selectable = true;				result.border = true;				result.borderColor = 0xFFFFFF;				result.background = true;				result.backgroundColor = 0xDEDEDE;				result.text = "";				return result;		}						public function getFormattedDate():String		{						var now = new Date();			var sendDay = now.getDate();			var sendMonth = now.getDay();			var sendYear = now.getFullYear();			var sendHour = now.getHours();			var sendDate = Number(sendMonth+1)+"/"+sendDay+"/"+sendYear+" "+getUSClockTime(sendHour);								function getUSClockTime(hrs:uint):String {				var modifier:String = "PM";							if(hrs > 12) {					hrs = hrs-12;				} else if(hrs == 0) {					modifier = "AM";					hrs = 12;				} else if(hrs < 12) {					modifier = "AM";				}							return hrs + " " + modifier;			}		return sendDate.toString();		}									}		}