package {	import flash.display.*;	import flash.events.*;	import flash.net.*;	import flash.filters.*;	import flash.utils.*;	import flash.text.*;	import flash.geom.*;	import flash.ui.Mouse;	import flash.external.ExternalInterface;	import org.papervision3d.lights.PointLight3D;	import org.papervision3d.materials.*;	import org.papervision3d.materials.shadematerials.FlatShadeMaterial;	import org.papervision3d.materials.utils.MaterialsList;	import org.papervision3d.objects.*;	import org.papervision3d.objects.primitives.*;	import org.papervision3d.events.InteractiveScene3DEvent;	 	import br.com.stimuli.loading.BulkLoader;    import br.com.stimuli.loading.BulkProgressEvent;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;	import com.brilliantblue.panasonic.IFEdemo.common.events.*;				//import com.brilliantblue.panasonic.IFEDemo.data.*;	import caurina.transitions.*;	import caurina.transitions.properties.*;	public class Main extends PaperBase {						private var scene=default_scene;		//private var myLight:PointLight3D = new PointLight3D();		//private var mat:FlatShadeMaterial = new FlatShadeMaterial(myLight, 0xFFFFFF, 0xCCCCCC);		//private var mat2:WireframeMaterial = new WireframeMaterial(0x00FF00);		//private var mat3:BitmapAssetMaterial = new BitmapAssetMaterial("audioVideoImage");		private var mat4:MovieAssetMaterial;		private var plane:Plane;		private var xmlLoader:URLLoader;		private var xmlData:XML;		private var xmlMenu:XMLList;		private var zoomVar:uint=1;		private var lockCamera:Boolean=false;		public var _stageWidth:Number;		public var _mouseX:Number;		private var viewportX:int=0;		private var viewportY:int=0;		private var controlObject:DisplayObject3D=new DisplayObject3D;		private var baseObject:DisplayObject3D=new DisplayObject3D;		private var currentLevel:Number=0;		private var currentIndex:Number=0;		private var myMenuLevel:Array;		private var resetButton:MovieClip;		public var backgroundMC:MovieClip;		public var cp:MovieClip;//Control Panel		public var _MiniCP:MovieClip;		public var cpTimer;		public var screenTimer;		private var screenTimeOut:Number = 360000;		public var _useSaver:Boolean = true;		public var _introAnimation:IntroAnimation;		private var cardGlowFilter;		public var keyboard:Boolean;		public var startButton:MovieClip;						public var previousItem:DisplayObject3D;		public var currentItem:DisplayObject3D;		public var screenClass:String;		public var mediaIsPlaying:Boolean;		public var mediaType:String;		public var mediaID:String;		public var language:String = "English";		public var _menuMoving:Boolean = false;		public var _audioObject;		public var _videoObject;		public var _usbObject;		public var _usbPath;		public var _gameObject;//games		public var _auxObject;				public var _mainMenu:XML;				public var _shoppingCart:XML;		public var _creditAccount:XML;		public var _inboxMessages:XML;		public var _sentMessages:XML;				public var _games:XML;		public var _movies:XML;		public var _music:XML;		public var _tvShows:XML;		public var _playList:XML;				public var _newsCategories:XML;		public var _newsArticles:XML;		public var _newsTickers:XML;		public var _newsWeather:XML;						public var _usbFiles:XML;				public var _survey:XML;				private var bulkLoader:BulkLoader;				//private var target:void;		public function Main() {									addBackground();//attach background image						CurveModifiers.init()//add in support for Tweener Bezier Curve Animation			init(1280,800);//call the PaperBase init function			/*			loadContent("PNCMENUSAMPLE.xml");			function loadContent(xmlData) {				xmlLoader = new URLLoader();				xmlLoader.addEventListener(Event.COMPLETE,onLoadXML);				xmlLoader.load(new URLRequest(xmlData));			}			function onLoadXML(e:Event):void {				xmlData=new XML(e.target.data);				//trace(xmlData);				xmlMenu = xmlData.*;								init3d();				init2d();				initEvents();								LoadData();//loads up all XML at one go...											}*/									LoadData();//loads up all XML at one go..									/*var _FPS = new FPS();			_FPS.x = 25;//stage.stageWidth - 100;			_FPS.y = 25; //stage.stageHeight - 25;			addChild(_FPS);*/						handleMouse();//a function available to hide the mouse or do other mouse related things						_MiniCP = new MiniCP();//create the Mini media Controller						addChild(_MiniCP);//attach Mini media controller to stage			_MiniCP.x = 0;			_MiniCP.y = 0;			_MiniCP.visible = false;//hide MiniCP until we need it during media playback						/*var memGauge = new MemoryGauge();			memGauge.x = 50;			memGauge.y = 50;			memGauge.scaleX = 3;			memGauge.scaleY = 3;			addChild(memGauge);*/									//var spitMem = new SpitMem();									addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);					}				private function onAdded(e:Event){//some things can only happen after this object is added to the display list			stage.stageFocusRect = false;						stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMode, false, 0, true);						this.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));			_stageWidth = stage.stageWidth;			_mouseX = stage.mouseX;						removeEventListener(Event.ADDED_TO_STAGE, onAdded);		}				private function menuUp(e:KeyboardEvent){						//trace(controlObject.rotationY);			//trace(currentItem.x);			Mouse.hide();			keyboard = true;			var KH = new KeyHandler();			currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OVER, currentItem));						//trace(e.keyCode);			var nextItem;			var prevItem;			//trace("CITem: "+currentItem);			//trace("PItem: "+previousItem);						var k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)			switch(k)				{					case KeyType.LEFT://left arrow						currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						prevItem = getPrevPlane(currentItem);						prevItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OVER, prevItem));						currentItem = prevItem;						break;					case KeyType.RIGHT://right arrow						currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						nextItem = getNextPlane(currentItem);						nextItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OVER, nextItem));						currentItem = nextItem;						break;											case KeyType.UP://up arrow					case KeyType.BACK://back button						//if(currentItem != previousItem){						goBack();						//}						break;											case KeyType.DOWN://down arrow						//if(currentItem != previousItem){						currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_RELEASE, currentItem));						//}						break;											case KeyType.OK://space bar						//if(currentItem != previousItem){						currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_RELEASE, currentItem));						//}						break;					case KeyType.HOME:						softReloadMenu();						break;											case KeyType.VOLUME_UP:						cp.up_btn.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											case KeyType.VOLUME_DOWN:						cp.down_btn.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;					case KeyType.PLAY_PAUSE:						_MiniCP.play_btn.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;					case KeyType.STOP:  // DEL						_MiniCP.stop_btn.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;					case KeyType.REWIND:  // \						_MiniCP.back_btn.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;					case KeyType.FAST_FORWARD:  // `						_MiniCP.forward_btn.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;															}				Tweener.removeTweens(controlObject);					Tweener.addTween(controlObject,{rotationY: ((currentItem.x*(40/_stageWidth))*.5), time: 1, transition:"easeOutStrong"});											}				private function mouseMode(e:MouseEvent){			Mouse.show();			//trace(stage.mouseX)			//trace(controlObject.rotationY);			keyboard = false;//if the mouse is moved then we know we're in mouse mode		}				private function startKey(e:KeyboardEvent){			//trace(e.keyCode);									Mouse.hide();			keyboard = true;			var KH = new KeyHandler();			var k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{											case KeyType.OK://select and enter button						//if(currentItem != previousItem){						startButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;										}						}						private function LoadData(){		bulkLoader = new BulkLoader("mainLoader");						var mainMenu : URLRequest = new URLRequest("PNCMENUSAMPLE.xml");		bulkLoader.add(mainMenu, {type:"xml", id:"mainMenu"});		var shoppingCart : URLRequest = new URLRequest("xml/cart/shoppingCart.xml");		bulkLoader.add(shoppingCart, {type:"xml", id:"shoppingCart"});		var creditAccount : URLRequest = new URLRequest("xml/cart/creditAccount.xml");		bulkLoader.add(creditAccount, {type:"xml", id:"creditAccount"});		var inboxMessages : URLRequest = new URLRequest("xml/email/inboxMessages.xml");		bulkLoader.add(inboxMessages, {type:"xml", id:"inboxMessages"});		var sentMessages : URLRequest = new URLRequest("xml/email/sentMessages.xml");		bulkLoader.add(sentMessages, {type:"xml", id:"sentMessages"});						var usbFiles : URLRequest = new URLRequest("xml/personalMedia/usbFiles.xml");		bulkLoader.add(usbFiles, {type:"xml", id:"usbFiles"});						var games : URLRequest = new URLRequest("xml/media/games/games.xml");		bulkLoader.add("xml/media/games/games.xml", {type:"xml", id:"games"});				var music : URLRequest = new URLRequest("xml/media/ent/music.xml");		bulkLoader.add(music, {type:"xml", id:"music"});		var movies : URLRequest = new URLRequest("xml/media/ent/movies.xml");		bulkLoader.add(movies, {type:"xml", id:"movies"});		var tv : URLRequest = new URLRequest("xml/media/ent/tv.xml");		bulkLoader.add(tv, {type:"xml", id:"tvShows"});		var playlist : URLRequest = new URLRequest("xml/media/ent/playlist.xml");		bulkLoader.add(playlist, {type:"xml", id:"playList"});										var news_articles : URLRequest = new URLRequest("xml/newsInfo/news_articles.xml");		bulkLoader.add(news_articles, {type:"xml", id:"newsArticles"});		var news_category : URLRequest = new URLRequest("xml/newsInfo/news_category.xml");		bulkLoader.add(news_category, {type:"xml", id:"newsCategories"});		var news_tickers : URLRequest = new URLRequest("xml/newsInfo/news_tickers.xml");		bulkLoader.add(news_tickers, {type:"xml", id:"newsTickers"});		var news_weather : URLRequest = new URLRequest("xml/newsInfo/news_weather.xml");		bulkLoader.add(news_weather, {type:"xml", id:"newsWeather"});						var survey_questions : URLRequest = new URLRequest("xml/media/survey_questions.xml");		bulkLoader.add(survey_questions, {type:"xml", id:"survey"});								bulkLoader.addEventListener(BulkLoader.COMPLETE, onCompleteHandler,false,0,true);						bulkLoader.start();						function onCompleteHandler(e:Event){								_mainMenu = bulkLoader.getXML("mainMenu");								_shoppingCart = bulkLoader.getXML("shoppingCart");				_creditAccount = bulkLoader.getXML("creditAccount");				_inboxMessages = bulkLoader.getXML("inboxMessages");				_sentMessages = bulkLoader.getXML("sentMessages");								_games = bulkLoader.getXML("games");				_movies = bulkLoader.getXML("movies");				_music = bulkLoader.getXML("music");				_tvShows = bulkLoader.getXML("tvShows");								_playList = bulkLoader.getXML("playList");								_usbFiles = bulkLoader.getXML("usbFiles");								_newsCategories = bulkLoader.getXML("newsCategories");				_newsArticles = bulkLoader.getXML("newsArticles");				_newsTickers = bulkLoader.getXML("newsTickers");				_newsWeather = bulkLoader.getXML("newsWeather");								_survey = bulkLoader.getXML("survey");																xmlMenu = _mainMenu.*;								init3d();				init2d();				initEvents();							}													}							private function init3d():void {						lockCamera = true;						//plane.material.lineColor = 0x777777;						controlObject.y=200;			controlObject.x=0;			controlObject.z=-70;			controlObject.name = "controlObject";			controlObject.addChild(baseObject);			baseObject.y=0;			baseObject.z=200;			baseObject.name = "baseObject";			baseObject.extra={objectParent:null,container:null,xmlMenu:xmlMenu,level:0,active:true};			default_scene.addChild(controlObject);			cardGlowFilter = new GlowFilter(0xFFFFFF,								.8,//alpha								10,//blurx								10,//blury								4,//strength								BitmapFilterQuality.LOW,//quality								true,//inner								false);//knockout			default_camera.x=0;			default_camera.z=-1000;			default_camera.y=100;			default_camera.zoom=10;			default_camera.focus=100;			/*myLight.z = -100;			 myLight.y = 100;			 myLight.x = 300;*/			 			 				//currentLevel++;			 						_introAnimation = new IntroAnimation();			addChild(_introAnimation);			startButton = _introAnimation.startButton;			startButton.buttonMode = true;			startButton.xmlMenu = xmlMenu;			startButton.addEventListener(MouseEvent.CLICK, startDemo,false,0,true);			stage.addEventListener(KeyboardEvent.KEY_UP, startKey,false,0,true);									addResetButton();					}						private function drawLevel(object,level,xmlMenu,target, animate) {			//trace(data);			var itemContainer:DisplayObject3D=new DisplayObject3D;			//itemContainer.z = 200 -(baseObject.z + (60*level));			itemContainer.z=-100;			itemContainer.x=0;			//itemContainer.y = 100 -(baseObject.y + (40*level));			itemContainer.y=-100;			itemContainer.name="item" + level;			itemContainer.extra = new Object();			itemContainer.extra.level = level;			object.addChild(itemContainer);						//trace(object.parent.name);			//tween support			var _originX = target.x;			var _originY = target.y+190;			var _originZ = target.z+300;						var items:XMLList=xmlMenu;			var totalCards:uint=items.length();			if(totalCards > 8){			   totalCards = 8;			   }			   			itemContainer.extra.total = totalCards;			//trace(totalCards);			var _iconClass:String;			var _ID:String;			var _screenClass:String;			var _disabled:String;			//trace(items.length());			var count:Number = 0;			for (var i=0; i < totalCards; i++) {				//trace(level);				count = i;				_iconClass=items[i].@["id"].toString();				_ID=items[i].@["id"].toString();				_screenClass=items[i].@["class"].toString();				_disabled=items[i].@["disabled"].toString();				//trace(items[i].@["icon"]);				//trace(items[i].children().length());				//var itemMovie:MovieClip = new mainMenu();				var xmlMenu;				var itemChildren:XMLList=items[i].*;				/*if(itemChildren.length() > 0){					xmlMenu = itemChildren;				}else{					xmlMenu = items[i];				//trace(xmlMenu.@["id"]);				}*/													//trace(items[i].@["name"]);				//trace(itemChildren);				var ClassReference:Class=getDefinitionByName(_iconClass) as Class;				var itemMovie:MovieClip=new ClassReference;				itemMovie.cacheAsBitmap=true;				var itemMaterial:MovieMaterial=new MovieMaterial(itemMovie,false,false,false);				itemMaterial.doubleSided=false;				itemMaterial.interactive=true;				itemMaterial.animated=true;				//itemMaterial.precision = 8;				itemMaterial.smooth=true;				var plane=new Plane(itemMaterial,130,190,2,2);				plane.y=_originY;				var xPos=(150*(i+0.5))-(150*(totalCards/2));//support for tween normally this is plane.x value				plane.x=_originX				//trace(xPos);				plane.z=_originZ;				plane.rotationZ = 90;				plane.rotationY = 90;				plane.scale=0.2;//support for tween, normally this is 1				plane.alpha=0;				plane.name="card_" + level + "_" + i;				var currentItemSet:Boolean;				if(currentItemSet != true){				currentItem = plane;				currentItemSet = true;				}												//trace(plane.name);				var card:MovieClip=MovieClip(MovieMaterial(plane.material).movie);				card.addEventListener(Event.ENTER_FRAME, checkLanguage);								var disabledOverlay = new MovieClip();					disabledOverlay.graphics.beginFill(0xFFFFFF, 0.6);					disabledOverlay.graphics.drawRect(0,0,130,190);					disabledOverlay.graphics.endFill();								if(_disabled == "true"){					card.addChild(disabledOverlay);				}								//card.mouseChildren=false;				//card.cacheAsBitmap=true;				//var icons:MovieClip = MovieClip(MovieMaterial(plane.material).movie).getChildByName("icons") as MovieClip;				//trace(icons.name);				//var iconFrame:String = items[i].@["id"];				//icons.gotoAndStop(iconFrame);				/*if (items[i].@["label"].toString() !== "false") {				var myLabel:TextField=new TextField  ;				myLabel.embedFonts=true;				var myFormat:TextFormat=new TextFormat  ;				myFormat.font="Reflex Bold";				myFormat.bold=true;				myFormat.kerning=true;				myFormat.color=0xFFFFFF;				myFormat.size=18;				//myFormat.letterSpacing = -1;				myFormat.align="center";				myLabel.defaultTextFormat=myFormat;				myLabel.autoSize=TextFieldAutoSize.CENTER;				myLabel.wordWrap=true;				myLabel.width=130;				myLabel.text=items[i].@["name"].toUpperCase();				card.addChild(myLabel);				//trace(myLabel.text);				}*/				plane.extra={parentItem: target, count: count, objectParent:object,container:itemContainer,xmlMenu:itemChildren,active:false, movie:card, material:itemMaterial, originX:plane.x, originY:plane.y, originZ:plane.z, screenClass:_screenClass, ID:_ID, disabled:_disabled};				plane.addEventListener(InteractiveScene3DEvent.OBJECT_OUT,onOut,false,0,true);				plane.addEventListener(InteractiveScene3DEvent.OBJECT_RELEASE,onClick,false,0,true);				//plane.addEventListener( InteractiveScene3DEvent.OBJECT_RELEASE, onReleased );				plane.addEventListener(InteractiveScene3DEvent.OBJECT_OVER,onOver,false,0,true);												//Tweener.addTween(plane,{rotationY:360,time:1,delay:0.25,transition:"easeOutBack"});				//Tweener.addTween(plane, {x:xPos, y:0, z:0, rotationZ:0, rotationY:0, scale:1, _bezier:new Array({x:0, y:0 + 380, z:50}), time:1, delay:((1 + i) / totalCards), onComplete:onItemShow, onCompleteParams:[plane]});								itemContainer.addChild(plane);				if(keyboard == true){				currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OVER, currentItem));				}								////////////////////// Reflection Sample Code ///////////////////								//add back in when it works properly				var reflectionMovie:MovieClip=new ReflectionTemp();				reflectionMovie.cacheAsBitmap=true;				var reflectionMaterial:MovieMaterial=new MovieMaterial(reflectionMovie,false,false,false);				reflectionMaterial.doubleSided=false;				reflectionMaterial.interactive=false;				//itemMaterial.precision = 8;				reflectionMaterial.smooth=true;				var planeReflection=new Plane(reflectionMaterial,130,60,2,2);				planeReflection.y = -125;				planeReflection.z = 5;				planeReflection.x = 0;				planeReflection.scaleY = 0;				planeReflection.name = "reflection";				//planeReflection.scaleX = 0;				plane.addChild(planeReflection);								////////////////////// Reflection Sample Code ///////////////////				if(object.name != "baseObject"){					if(animate == true){				Tweener.removeTweens(plane);				Tweener.addTween(plane, {x:xPos, y:0, z:5, rotationZ:0, rotationY:0, scale:1, _bezier:new Array({x:0, y:520, z:200}), time:1, delay:((0.75 + i)/9), onComplete: addReflection});					}else{				Tweener.removeTweens(plane);				Tweener.addTween(plane, {x:xPos, y:0, z:5, rotationZ:0, rotationY:0, scale:1});				Tweener.addTween(planeReflection, {x:0, scaleY: 1, z:5});					}												}else{				//var camera = current_camera;					//camera.zoom = 								default_camera.zoom=8;				default_camera.focus=100;								Tweener.addTween(default_camera,{zoom: 10, time: 1, transition:"easeOutStrong"});				/*					object.rotationY = 180;				Tweener.addTween(object,{rotationY: 0, time: 2, transition:"easeInOutBack"});				*/				Tweener.addTween(plane,{alpha: 1, time: 0});				Tweener.addTween(plane, {x:xPos, y:0, z:0, rotationZ:0, rotationY:0, scale:1, time:0, delay:0});				Tweener.addTween(planeReflection, {x:0, scaleY: 1, z:5, time:1});								}			}			function addReflection(){				//add this back in when it works properly				var planeReflection = this.getChildByName("reflection");				Tweener.addTween(planeReflection, {x:0, scaleY: 1, z:5, time:0.5});				}		}				private function checkLanguage(e:Event)		{	var card = e.target;			var newLang = language.toUpperCase();			card.gotoAndStop(newLang);		}						private function checkLevel(e:Event){						var reflection = e.target.getChildByName("reflection");			var level = e.target.extra.container.level;						if(currentLevel-level>0){				reflection.visible = false;			}else{				reflection.visible = true;			}					}						private function getPrevPlane(_currentItem){						var object:DisplayObject3D = _currentItem;			var container:DisplayObject3D = object.extra.container;			var level = container.extra.level;			var count = object.extra.count;			var totalCards = container.extra.total;			var result;				if(count > 0){			result = container.getChildByName("card_" + level + "_" + Number(count-1));			}else{			result = container.getChildByName("card_" + level + "_" + Number(totalCards-1));			}			return result;		}		private function getNextPlane(_currentItem){			var object:DisplayObject3D = _currentItem;			var container:DisplayObject3D = object.extra.container;			var level = container.extra.level;			var count = object.extra.count;			var totalCards = container.extra.total;			var result;						if(count < Number(totalCards-1)){			result = container.getChildByName("card_" + level + "_" + Number(count+1));			}else{			result = container.getChildByName("card_" + level + "_" + 0);			}			return result;		}				private function onOver(e:InteractiveScene3DEvent):void {			//trace("Mouse Over");			var object:DisplayObject3D=e.displayObject3D;			//trace("Over: "+object);			var movie = object.extra.movie;			if(keyboard == true){			movie.filters = [cardGlowFilter];			}			//var container:Sprite = Sprite(object.container);			//container.buttonMode = true;			//viewport.buttonMode = true;			//object.z -= 20;			//Tweener.addTween(object, {z:150, time:.5, transition:"easeOutBounce"})		}		private function onOut(e:InteractiveScene3DEvent):void {			var object:DisplayObject3D=e.displayObject3D;			//trace("Out: "+object);			var movie = object.extra.movie;			movie.filters = [];		}		public function onClick(e:InteractiveScene3DEvent):void {			if(_menuMoving != true){			_menuMoving = true;			currentIndex = e.target.extra.count;			//stage.focus = e.target as InteractiveObject;			var object:DisplayObject3D = e.displayObject3D;						var objectParent:DisplayObject3D = object.extra.objectParent;						var container:DisplayObject3D = object.extra.container;			var childContainer:DisplayObject3D;			var xmlMenu = object.extra.xmlMenu;						//trace(xmlMenu.*.length());			//if(xmlMenu.* != null){			var items:XMLList=xmlMenu;			//}			var level:Number=Number(container.extra.level);			//trace("level: " +level);			var active=object.extra.active;			var disabled=object.extra.disabled;			var material:MovieMaterial = object.extra.material;			var childName:String;			var sibling:DisplayObject3D;			var depth:uint;			var target = e.target;			var movie:MovieClip = object.extra.movie;												/*				var highLightMovie:MovieClip=new highLightTemp();				highLightMovie.cacheAsBitmap=true;				var highLightMaterial:MovieMaterial=new MovieMaterial(highLightMovie,false,false,false);				highLightMaterial.doubleSided=false;				highLightMaterial.interactive=false;				//itemMaterial.precision = 8;				highLightMaterial.smooth=true;				var planeHighLight=new Plane(highLightMaterial,130,190,2,2);				planeHighLight.y=0;				planeHighLight.z = 15;				planeHighLight.x = 0;				planeHighLight.name = "highlight";				planeHighLight.scaleX = 1.025;				planeHighLight.scaleY = 1.025;				*/																	//trace(object.z);			if (items.length() > 0) {//check to see if this menu item has a sub menu				//trace("CurrentObjectStart:" + object.extra.active);								//trace(currentItem  as  DisplayObject3D);								//trace(object  as  DisplayObject3D);		//trace("LevelInfo: "+Number(currentLevel - level));				//trace("contaienr: "+container.name);				if (currentItem == object) {// if the click target is the same as the previous click target					if(currentLevel-level >=1){					removeSubMenu(container,level+1);					Tweener.addTween(baseObject,{z:baseObject.z - 100,y:baseObject.y - 100,time:1,transition:"easeOutBack", onComplete: enableMenu});											//enableMenu();					/*trace("testing current item 1,2");					trace("Level: "+level);									trace("currentLevel: "+currentLevel);					currentLevel--;					removeSubMenu(container,level+1);					Tweener.addTween(baseObject,{z:baseObject.z - 100,y:baseObject.y - 100,time:1,transition:"easeOutBack", onComplete: enableMenu});					drawLevel(container,level+1,xmlMenu,target);										for(var i = 0; i < container.numChildren; i++){						var childi = container.getChildByName("card_" + level + "_" + i);												try{						var cardi:MovieClip=childi.extra.movie;						//var mati:MovieClip=childi.extra.movie;							childi.getChildByName("reflection").visible = true;							//childi.removeChild(childj.getChildByName("highlight"));														cardi.filters = [];							//mati.animated = false;							}catch(e:Error){						}																}					//material.animated = true;					movie.filters = [cardGlowFilter];				*/				//e.target.addChild(planeHighLight);										/*}else if(currentLevel-level ==2){					Tweener.addTween(baseObject,{z:baseObject.z - 100,y:baseObject.y - 100,time:1,transition:"easeOutBack", onComplete: enableMenu});					removeSubMenu(container,level+2);					trace("testing current item 1,2");					for(var g = 0; g < container.numChildren; g++){						var childg = container.getChildByName("card_" + level + "_" + g);												try{						var cardg:MovieClip=childg.extra.movie;						//var mati:MovieClip=childi.extra.movie;							childg.getChildByName("reflection").visible = true;							//childi.removeChild(childj.getChildByName("highlight"));														cardg.filters = [];							//mati.animated = false;							}catch(e:Error){						}																}					//material.animated = true;					movie.filters = [cardGlowFilter];*/								//e.target.addChild(planeHighLight);										}else{																	//trace("testing current Item level 0");					//trace("Level: "+level);									//trace("currentLevel: "+currentLevel);					currentLevel++;					Tweener.addTween(baseObject,{z:baseObject.z + 100,y:baseObject.y + 100,time:1,transition:"easeOutBack", onComplete: enableMenu});					drawLevel(container,level+1,xmlMenu,target,true);										for(var j = 0; j < container.numChildren; j++){						var childj = container.getChildByName("card_" + level + "_" + j);												try{							var cardj:MovieClip=childj.extra.movie;							//var matj:MovieClip=childj.extra.material;							childj.getChildByName("reflection").visible = false;							//trace(matj);							cardj.filters = [];							//matj.animated = false;							//childj.removeChild(childj.getChildByName("highlight"));						}catch(e:Error){						}					}															//material.animated = true;					movie.filters = [cardGlowFilter];				//e.target.addChild(planeHighLight);									}									} else {//end currentItem, ie if the click target is not the same as previous click target					if(currentLevel-level==1){										//trace("testing current Item level 1");					//trace("Level: "+level);									//trace("currentLevel: "+currentLevel);										removeSubMenu(container,level+1);					currentLevel++;					drawLevel(container,level+1,xmlMenu,target, true);					enableMenu();					//trace("testing level 1");					for(var m = 0; m < container.numChildren; m++){						var childm = container.getChildByName("card_" + level + "_" + m);												try{							var cardm:MovieClip=childm.extra.movie;							//trace(cardm.name)							//var matm:MovieClip=childm.extra.material;							//childm.removeChild(childm.getChildByName("highlight"));														cardm.filters = [];							//matm.animated = false						}catch(e:Error){						}					}					//material.animated = true;					movie.filters = [cardGlowFilter];					//e.target.addChild(planeHighLight);																				}else if(currentLevel-level==2){										//trace("testing current Item level 2");					//trace("Level: "+level);									//trace("currentLevel: "+currentLevel);										//removeSubMenu(container.getChildByName("item_"+(level+1)),level+1);					removeSubMenu(container,level+1);					Tweener.addTween(baseObject,{z:baseObject.z - 100,y:baseObject.y - 100,time:1,transition:"easeOutBack", onComplete: enableMenu});					drawLevel(container,level+1,xmlMenu,target, true);					//currentItem = previousItem;					//trace("testing level 2");					for(var k = 0; k < container.numChildren; k++){						var childk = container.getChildByName("card_" + level + "_" + k);												try{							var cardk:MovieClip=childk.extra.movie;							//var matk:MovieClip=childk.extra.material;							childk.getChildByName("reflection").visible = false;							//trace(matk);							cardk.filters = [];							//matk.animated = false;							//childk.removeChild(childk.getChildByName("highlight"));						}catch(e:Error){						}											}										//e.target.addChild(planeHighLight);					//material.animated = true;					movie.filters = [cardGlowFilter];																				}else{//this is the start level											//trace("testing current Item level 0");					//trace("Level: "+level);									//trace("currentLevel: "+currentLevel);										currentLevel++;					Tweener.addTween(baseObject,{z:baseObject.z + 100,y:baseObject.y + 100,time:1,transition:"easeOutBack", onComplete: enableMenu});					drawLevel(container,level+1,xmlMenu,target, true);					previousItem = object;					for(var l = 0; l < container.numChildren; l++){						var childl = container.getChildByName("card_" + level + "_" + l);												try{													var cardl:MovieClip=childl.extra.movie;						//var matl:MovieClip=childl.extra.material;							childl.getChildByName("reflection").visible = false;							//trace(matl);							cardl.filters = [];							//matl.animated = false;						}catch(e:Error){						}					}										//material.animated = true;					movie.filters = [cardGlowFilter];														//e.target.addChild(planeHighLight);					}										}								previousItem = currentItem;				if(keyboard != true){				currentItem=object;				}				//trace(object.extra.xmlMenu);			} else {//end children check - this is where we put the code to open up a detail page....				if(disabled != "true"){				//trace(level);								//trace(currentLevel);								//currentLevel++;				            	stage.removeEventListener(KeyboardEvent.KEY_UP, menuUp);				//currentItem=previousItem;				lockCamera=true;//stop mouse movement tracking				Tweener.addTween(default_camera,{x: 1500,  time: 1, transition:"easeOutStrong", onComplete: showDetailScreen			 , onCompleteScope: this});				//hideMenu();								//trace(xmlMenu.@["class"]);				//screenClass = xmlMenu.@["class"].toString() + "Screen";				if(screenClass != null){				removeChild(getChildByName(screenClass));				screenClass = null;				}				screenClass = object.extra.screenClass.toString() + "Screen";				var ClassReference:Class = getDefinitionByName(screenClass) as Class;				var myScreen = new ClassReference;				myScreen.name = screenClass;				myScreen.x = myScreen.width+800;												//myScreen.x = 0;				//var myID = xmlMenu.@["id"].toString();								var myID = object.extra.ID.toString();				myScreen.ID = myID;												function showDetailScreen(){					controlObject.visible = false; // hide the menu				addChild(myScreen);				Tweener.addTween(myScreen,{x: 0, time: 1.5, delay: 0, transition:"easeOutStrong"});				addChild(cp);				//trace(cp.name);							stage.focus = myScreen;				//trace(screenClass);				//var target = getChildByName(screenClass);				}									//movie.filters = [cardGlowFilter];								}								enableMenu();			}					}												}//end of onpressed						public function softPressed(_currentItem):void {/*					if(currentItem != null){					if(_menuMoving != true){			_menuMoving = true;			currentIndex = e.target.extra.count;			//trace("Mouse Down");			//stage.focus = e.target as InteractiveObject;			var object:DisplayObject3D = e.displayObject3D;			var objectParent:DisplayObject3D = object.extra.objectParent;			var container:DisplayObject3D = object.extra.container;			var childContainer:DisplayObject3D;			var xmlMenu = object.extra.xmlMenu;			//trace(xmlMenu.*.length());			//if(xmlMenu.* != null){			var items:XMLList=xmlMenu;			//}			var level:Number=Number(container.extra.level);			//trace("level: " +level);			var active=object.extra.active;			var disabled=object.extra.disabled;			var material:MovieMaterial = object.extra.material;			var childName:String;			var sibling:DisplayObject3D;			var depth:uint;			var target = e.target;			var movie:MovieClip = object.extra.movie;												//trace(object.z);			if (items.length() > 0) {//check to see if this menu item has a sub menu				if (currentItem == object) {// if the click target is the same as the previous click target					if(currentLevel-level >=1){						enableMenu();										}else{																	trace("testing current Item level 0");					trace("Level: "+level);									trace("currentLevel: "+currentLevel);					currentLevel++;					Tweener.addTween(baseObject,{z:baseObject.z + 100,y:baseObject.y + 100,time:1,transition:"easeOutBack", onComplete: enableMenu});					drawLevel(container,level+1,xmlMenu,target,true);										for(var j = 0; j < container.numChildren; j++){						var childj = container.getChildByName("card_" + level + "_" + j);												try{							var cardj:MovieClip=childj.extra.movie;							//var matj:MovieClip=childj.extra.material;							childj.getChildByName("reflection").visible = false;							//trace(matj);							cardj.filters = [];							//matj.animated = false;							//childj.removeChild(childj.getChildByName("highlight"));						}catch(e:Error){						}					}															//material.animated = true;					movie.filters = [cardGlowFilter];				//e.target.addChild(planeHighLight);									}									} else {//end currentItem, ie if the click target is not the same as previous click target					if(currentLevel-level==1){										trace("testing current Item level 1");					trace("Level: "+level);									trace("currentLevel: "+currentLevel);										removeSubMenu(container,level+1);					currentLevel++;					drawLevel(container,level+1,xmlMenu,target, true);					enableMenu();					//trace("testing level 1");					for(var m = 0; m < container.numChildren; m++){						var childm = container.getChildByName("card_" + level + "_" + m);												try{							var cardm:MovieClip=childm.extra.movie;							//trace(cardm.name)							//var matm:MovieClip=childm.extra.material;							//childm.removeChild(childm.getChildByName("highlight"));														cardm.filters = [];							//matm.animated = false						}catch(e:Error){						}					}					//material.animated = true;					movie.filters = [cardGlowFilter];					//e.target.addChild(planeHighLight);																				}else if(currentLevel-level==2){										trace("testing current Item level 2");					trace("Level: "+level);									trace("currentLevel: "+currentLevel);										//removeSubMenu(container.getChildByName("item_"+(level+1)),level+1);					removeSubMenu(container,level+1);					Tweener.addTween(baseObject,{z:baseObject.z - 100,y:baseObject.y - 100,time:1,transition:"easeOutBack", onComplete: enableMenu});					drawLevel(container,level+1,xmlMenu,target, true);					//currentItem = previousItem;					//trace("testing level 2");					for(var k = 0; k < container.numChildren; k++){						var childk = container.getChildByName("card_" + level + "_" + k);												try{							var cardk:MovieClip=childk.extra.movie;							//var matk:MovieClip=childk.extra.material;							childk.getChildByName("reflection").visible = false;							//trace(matk);							cardk.filters = [];							//matk.animated = false;							//childk.removeChild(childk.getChildByName("highlight"));						}catch(e:Error){						}											}										//e.target.addChild(planeHighLight);					//material.animated = true;					movie.filters = [cardGlowFilter];																				}else{//this is the start level											trace("testing current Item level 0");					trace("Level: "+level);									trace("currentLevel: "+currentLevel);										currentLevel++;					Tweener.addTween(baseObject,{z:baseObject.z + 100,y:baseObject.y + 100,time:1,transition:"easeOutBack", onComplete: enableMenu});					drawLevel(container,level+1,xmlMenu,target, true);					previousItem = object;					for(var l = 0; l < container.numChildren; l++){						var childl = container.getChildByName("card_" + level + "_" + l);												try{													var cardl:MovieClip=childl.extra.movie;						//var matl:MovieClip=childl.extra.material;							childl.getChildByName("reflection").visible = false;							//trace(matl);							cardl.filters = [];							//matl.animated = false;						}catch(e:Error){						}					}										//material.animated = true;					movie.filters = [cardGlowFilter];														//e.target.addChild(planeHighLight);					}										}								previousItem = currentItem;				currentItem=object;				//trace(object.extra.xmlMenu);			} else {//end children check - this is where we put the code to open up a detail page....				if(disabled != "true"){				trace(level);								trace(currentLevel);								//currentLevel++;								currentItem=previousItem;				lockCamera=true;//stop mouse movement tracking				Tweener.addTween(default_camera,{x: 1500,  time: 1, transition:"easeOutStrong", onComplete: showDetailScreen			 , onCompleteScope: this});				//hideMenu();								//trace(xmlMenu.@["class"]);				//screenClass = xmlMenu.@["class"].toString() + "Screen";				if(screenClass != null){				removeChild(getChildByName(screenClass));				screenClass = null;				}				screenClass = object.extra.screenClass.toString() + "Screen";				var ClassReference:Class = getDefinitionByName(screenClass) as Class;				var myScreen = new ClassReference;				myScreen.name = screenClass;				myScreen.x = myScreen.width+800;												//myScreen.x = 0;				//var myID = xmlMenu.@["id"].toString();								var myID = object.extra.ID.toString();				myScreen.ID = myID;												function showDetailScreen(){					controlObject.visible = false; // hide the menu				addChild(myScreen);				Tweener.addTween(myScreen,{x: 0, time: 1.5, delay: 0, transition:"easeOutStrong"});				addChild(cp);				//trace(cp.name);							stage.focus = myScreen;				//trace(screenClass);				//var target = getChildByName(screenClass);				}									//movie.filters = [cardGlowFilter];								}								enableMenu();			}					}		}				*/}//end of onpressed				public function goBack():void {			if(keyboard != true){		currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_RELEASE, currentItem));			}else{						var parentItem = currentItem.extra.parentItem;		if(parentItem != baseObject){		trace("parent: "+parentItem);		currentItem = parentItem;		parentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_RELEASE, parentItem));		}			}		}												private function enableMenu(){							_menuMoving = false;		}								private function onPressComplete(object):void {			Tweener.addTween(object,{z:200,scaleX:1,scaleY:1,rotationZ:0,time:1,transition:"easeInOutQuint"});		}		private function onReleased(e:InteractiveScene3DEvent):void {			trace("Mouse Up");		}				public function addSubMenu(container,level,xmlMenu,target):void {		trace("addSubMenu");			trace("currentLevel: "+currentLevel);		trace("level: "+level);		trace("LevelInfo: "+Number(currentLevel - level));		if(currentLevel - level == 0){		trace("level = 0");		currentLevel++;		Tweener.addTween(baseObject,{z:baseObject.z + 60,y:baseObject.y + 60,time:1,transition:"easeOutBack"});		drawLevel(container,level,xmlMenu,target, true);				}else if(currentLevel - level > 0){					trace("level > 0");		removeSubMenu(container, level);		drawLevel(container,level,xmlMenu,target,true);				}else{					trace("level < 0");			trace("Danger, danger, out of bounds");			//currentLevel = 0;		}		}				public function removeSubMenu(container, _level):void{			var level:Number = Number(_level);		//trace("RwmoveSubMenu");		currentLevel--;		//trace("currentLevel:"+currentLevel);		//trace("level: "+level)			var childContainer:DisplayObject3D;			childContainer=container.getChildByName("item" + level) as DisplayObject3D;						//trace(childContainer);			/*var subMenu = childContainer.getChildByName("item" + (level+1)) as DisplayObject3D;			trace(subMenu);			if(subMenu != null){																				for(var i = 0; i < subMenu.numChildren;i++)			{ 			//trace("subMenuLevel: "+(level+1));			//trace("subMenu: "+subMenu);			var subMenuItem:DisplayObject3D = subMenu.getChildByName("card_"+level+"_"+i) as DisplayObject3D;									if(subMenuItem != null){				var subX = subMenuItem.extra.originX;				var subY = subMenuItem.extra.originY;				var subZ = subMenuItem.extra.originZ;				//trace(i);									Tweener.removeTweens(subMenuItem);					Tweener.addTween(subMenuItem, {									 x:subX, 									 y:subY, 									 z:subZ, 									 rotationZ:90, 									 rotationY:90, 									 scale:.2, 									 _bezier:new Array({x:0, y:520, z:200}), 									 time:1, 									 delay:((0.75 + i)/9),									 onComplete:onItemHide, 									 onCompleteParams:[subMenuItem, subMenu]									});												trace(subMenuItem.name);				}				//childContainer.removeChildByName("card_"+level+"_"+i);//remove the submenu... should use a function with an animation and listener remover, etc.							}//end of for loop													return;			}*/									//trace(childContainer.numChildren);			for(var i = 0; i < childContainer.numChildren;i++)			{ 			//trace("subMenuLevel: "+(level+1));			//trace("subMenu: "+subMenu);			var subMenuItem:DisplayObject3D = childContainer.getChildByName("card_"+level+"_"+i) as DisplayObject3D;									if(subMenuItem != null){				var subX = subMenuItem.extra.originX;				var subY = subMenuItem.extra.originY;				var subZ = subMenuItem.extra.originZ;				//trace(i);									Tweener.removeTweens(subMenuItem);					Tweener.addTween(subMenuItem, {									 x:subX, 									 y:subY, 									 z:subZ, 									 rotationZ:90, 									 rotationY:90, 									 scale:.2, 									 _bezier:new Array({x:0, y:520, z:200}), 									 time:1, 									 delay:((0.75 + i)/9),									 onComplete:onItemHide, 									 onCompleteParams:[subMenuItem, childContainer]									});												//trace(subMenuItem.name);				}				//childContainer.removeChildByName("card_"+level+"_"+i);//remove the submenu... should use a function with an animation and listener remover, etc.							}//end of for loop												}						private function onItemHide(subMenuItem:DisplayObject3D, childContainer:DisplayObject3D){			if(subMenuItem != null){			//trace("really: "+subMenuItem);			//trace("no way: "+childContainer);			if (subMenuItem.material != null)            {                if (subMenuItem.material.bitmap != null)                {                    subMenuItem.material.bitmap.dispose();                }// end if                subMenuItem.material.destroy();            }// end if                				subMenuItem.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, onOver);                subMenuItem.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, onOut);                subMenuItem.removeEventListener(InteractiveScene3DEvent.OBJECT_RELEASE, onClick);            						childContainer.removeChild(subMenuItem);									}					}				public function showMenu():void {			            	stage.addEventListener(KeyboardEvent.KEY_UP, menuUp,false,0,true);							stage.focus = stage;				//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OVER, currentItem));				lockCamera=false;//stop mouse movement tracking				controlObject.visible = true; // hide the menu				Tweener.addTween(default_camera,{x: 0, time: 0.5, transition:"easeOutStrong"});				enableMenu();						}				public function hideMenu():void {				lockCamera=true;//stop mouse movement tracking				//controlObject.visible = false; // hide the menu				Tweener.addTween(default_camera,{x: 1500, time: 1, transition:"easeOutStrong", onComplete: function(){			 controlObject.visible = false;			 }, onCompleteScope: this});				            stage.removeEventListener(KeyboardEvent.KEY_UP, menuUp);		}				public function reloadMenu(e:MouseEvent):void {						ExternalInterface.call("BBdoLoad");		}				public function softReloadMenu():void {			destroyMenu();						try{					var target = MovieClip(root).getChildByName(MovieClip(root).screenClass);					//trace(target.getChildByName("baseView").name);					var target2 = target.getChildByName("baseView");					var target3 = target2.getChildByName("contentRegion");										target2.closeButtonSoftClick();													}catch(e:Error){							}																		//screenClass = null;			drawLevel(baseObject,0,xmlMenu,baseObject, false);			currentLevel = 0;			baseObject.y=0;			baseObject.z=200;			baseObject.name = "baseObject";			baseObject.extra={objectParent:null,container:null,xmlMenu:xmlMenu,level:0,active:true};			            this.stage.addEventListener(KeyboardEvent.KEY_UP, menuUp);			currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OVER, currentItem));				}						private function destroyMenu():void {			if(baseObject!=null){			var childrenList:String;            for (childrenList in baseObject.children)            {                // label                destroyMenuItem(baseObject.getChildByName(childrenList));            }// end of for ... in			}		}				private function destroyMenuItem(menuObject):void {			var childName:String;            var menuObjectChild:DisplayObject3D;            var menuObject:* = menuObject;            var childIndex:int;            var childList:* = menuObject.children;            while (childList in childIndex)            {                // label                childName = childList[childIndex];                menuObjectChild = menuObject.getChildByName(childName);                destroyMenuItem(menuObjectChild);            }// end while            if (menuObject.material != null)            {                if (menuObject.material.bitmap != null)                {                    menuObject.material.bitmap.dispose();                }// end if                menuObject.material.destroy();            }// end if            if (menuObject.name == "plane")            {                menuObject.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, onOver);                menuObject.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, onOut);                menuObject.removeEventListener(InteractiveScene3DEvent.OBJECT_PRESS, onClick);            }// end if            try            {                DisplayObject3D(menuObject.parent).removeChild(menuObject);            }// end try            catch (e:Error)            {                menuObject;            }// end catch            menuObject;            return;		}							public function addResetButton() {			resetButton = new MovieClip();			resetButton.x=0;			resetButton.y=0;			resetButton.buttonMode = true;			//var child:Shape = new Shape();            resetButton.graphics.beginFill(0xFFFFFF);            resetButton.graphics.drawRect(0, 0, 100, 100);            resetButton.graphics.endFill();			//resetButton.addChild(child)			addChild(resetButton);			resetButton.alpha = 0;			resetButton.addEventListener(MouseEvent.MOUSE_DOWN, reloadMenu,false,0,true);		}				private function handleMouse():void {						/*Mouse.hide();						var cursor = new Cursor();			cursor.alpha = 0.2;			cursor.height = 30;			cursor.width = 30;						addChild(cursor);						//stage.addEventListener(MouseEvent.MOUSE_DOWN,setMouseFocus);						stage.addEventListener(MouseEvent.MOUSE_MOVE,follow);						function follow(evt:MouseEvent){			clearInterval(activityTimer);			cursor.x = mouseX;			cursor.y = mouseY;			Tweener.addTween(cursor,{alpha:.7, time:.5,transition:"easeInOutStrong", onComplete: mouseFade});			var autohideTime = 5000;			var activityTimer;			activityTimer = setInterval(AutoHide, autohideTime);			}						function AutoHide() {				Tweener.addTween(cursor,{alpha:0, time:2,transition:"easeInOutStrong"});							}						var mouseFade = function(){				Tweener.addTween(cursor,{alpha:0.2, time:.5,transition:"easeOutStrong"});			}						function setMouseFocus(e:MouseEvent) : void {				stage.focus = e.target as InteractiveObject;				this.drawFocus(false);				return;			}// end function*/	}					private function addBackground():void {			backgroundMC = new MovieClip();						var background = new backgroundFill();						backgroundMC.addChild(background)						backgroundMC.x = 0;			backgroundMC.y = 0;			backgroundMC.height = 800;			backgroundMC.width = 1280;						addChild(backgroundMC)						//backgroundMC.addEventListener(MouseEvent.CLICK, function(){ softPressed(currentItem) });								}												private function init2d():void {			// This function should create all of the 2d items			// that will be overlayed on your papervision project.			// User interfaces, Heads up displays etc.						cp = new controlPanel();			cp.x = 0;			cp.y = 0;			cp.name = "ControlPanel";			cp.visible = false;			addChild(cp);									//trace("App has loaded");		}		private function initEvents():void {			// This function makes the onFrame function get called for			// every frame.			addEventListener(Event.ENTER_FRAME,onEnterFrame,false,0,true);			// This line of code makes the onEnterFrame function get			// called when every frame is entered.		}		private function processFrame():void {			_mouseX = stage.mouseX;			var camera=current_camera;			var myPlane=plane;			if (lockCamera != true) {				//camera.lookAt(plane);				//camera.x += (((stage.mouseX-(stage.stageWidth *.5))*2)-camera.x )*.05;				//camera.y += (((stage.mouseY-(stage.stageHeight*.5))*2)-camera.y )*.05;				//Tweener.addTween(controlObject,{rotationY:(((stage.mouseX-(stage.stageWidth*.5))*90/stage.stageWidth)-controlObject.rotationY )*.5,time:0.1});				if (keyboard != true){					if((_mouseX > 0) && (_mouseX < _stageWidth)){										//controlObject.rotationY += ((stage.mouseX-(stage.stageWidth*.5)))*.015;					controlObject.rotationY += ((_mouseX-(_stageWidth*.5))*(30/_stageWidth)*.5)-controlObject.rotationY;										}									}else{					//controlObject.rotationY = ((((currentItem.x+75)-(stage.stageWidth*.5))*30/1280)-controlObject.rotationY )*.5;					//controlObject.rotationY += ((currentItem.x*(30/_stageWidth))*.5)-controlObject.rotationY;										//Tweener.removeTween(controlObject);					//Tweener.addTween(controlObject,{rotationY: ((currentItem.x*(40/_stageWidth))*.5)-controlObject.rotationY, time: 1, transition:"easeOutStrong"});									}				//controlObject.rotationX += (((stage.mouseY-(stage.stageHeight*.5))*30/stage.stageHeight)-controlObject.rotationX )*.5;								//camera.x += -((stage.mouseX-(stage.stageWidth*.5))-camera.x;												//myPlane.rotationX += (((stage.mouseY-(stage.stageHeight*.5))*0.25)-myPlane.rotationX )*0.5;			} else {				//camera.zoom += (zoomVar-camera.zoom )*.05;				//viewport.x+= viewportX - viewport.x * .05;				//viewport.y+= viewportY - viewport.y * .05;			}											}		private function onEnterFrame(ThisEvent:Event):void {			//We need to render the scene and update anything here.			processFrame();			renderer.renderScene(current_scene,current_camera,current_viewport);		}						public function startDemo(e:MouseEvent):void{			 			_introAnimation.gotoAndPlay("out");			_introAnimation.addEventListener(Event.ENTER_FRAME, hideIntro,false,0,true);								}				public function hideIntro(e:Event) {			if(_introAnimation.currentFrame == _introAnimation.totalFrames){							var startButton = _introAnimation.startButton;			startButton.removeEventListener(MouseEvent.CLICK, startDemo);			startButton.addEventListener(MouseEvent.CLICK, showDemo2,false,0,true);            stage.removeEventListener(KeyboardEvent.KEY_UP, startKey);			lockCamera = false;			drawLevel(baseObject,0,xmlMenu,baseObject, false);			enableMenu();			Tweener.removeTweens(_introAnimation);			 _introAnimation.visible = false;			cp.visible = true;			_introAnimation.removeEventListener(Event.ENTER_FRAME, hideIntro);						if(_useSaver == true){			screenTimer = setTimeout(showIntro, screenTimeOut);						stage.addEventListener(MouseEvent.CLICK, resetTimer,false,0,true)						}						            stage.addEventListener(KeyboardEvent.KEY_UP, menuUp,false,0,true);									currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OVER, currentItem));						}		}				private function resetTimer(e:MouseEvent){			if(screenTimer != null){			clearTimeout(screenTimer);			screenTimer = setTimeout(showIntro, screenTimeOut);			}		}				private function showIntro(){			_introAnimation.visible = true;			hideDemo();			backgroundMC.visible = true;			_MiniCP.visible = false;			_introAnimation.gotoAndPlay(1);            stage.addEventListener(KeyboardEvent.KEY_UP, startKey,false,0,true);			//lockCamera = true;					}								public function hideDemo():void {			try{			var p = getChildByName(screenClass);			while(p.numChildren) p.removeChildAt(0);			}catch(e:Error){			}			lockCamera = true;			controlObject.visible = false; // hide the menu						Tweener.addTween(default_camera,{x: 1500, time: 1, transition:"easeOutStrong"});			cp.visible = false;			_MiniCP.visible = true;			backgroundMC.visible = false;						if(_useSaver == true){			clearTimeout(screenTimer);						stage.removeEventListener(MouseEvent.CLICK, resetTimer);            stage.removeEventListener(KeyboardEvent.KEY_UP, menuUp);			}					}				public function showDemo2(e:MouseEvent):void {			try{			var p = getChildByName(screenClass);			while(p.numChildren) p.removeChildAt(0);			}catch(e:Error){			}			lockCamera = false;			controlObject.visible = true; // hide the menu						Tweener.addTween(default_camera,{x: 0, time: 1, transition:"easeOutStrong"});			cp.visible = true;			_MiniCP.visible = false;			backgroundMC.visible = true;			Tweener.removeTweens(_introAnimation);			_introAnimation.visible = false;			_introAnimation.stop();			if(_useSaver == true){			screenTimer = setTimeout(showIntro, screenTimeOut);						stage.addEventListener(MouseEvent.CLICK, resetTimer,false,0,true);			}			            stage.addEventListener(KeyboardEvent.KEY_UP, menuUp,false,0,true);            stage.removeEventListener(KeyboardEvent.KEY_UP, startKey);									currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OVER, currentItem));		}				public function showDemo():void {			try{			var p = getChildByName(screenClass);			while(p.numChildren) p.removeChildAt(0);			}catch(e:Error){			}			lockCamera = false;						controlObject.visible = true; // hide the menu						Tweener.addTween(default_camera,{x: 0, time: 1, transition:"easeOutStrong"});			cp.visible = true;			_MiniCP.visible = false;			backgroundMC.visible = true;			Tweener.removeTweens(_introAnimation);			_introAnimation.visible = false;			_introAnimation.stop();						if(_useSaver == true){			screenTimer = setTimeout(showIntro, screenTimeOut);						stage.addEventListener(MouseEvent.CLICK, resetTimer,false,0,true)			}            stage.addEventListener(KeyboardEvent.KEY_UP, menuUp,false,0,true);            stage.removeEventListener(KeyboardEvent.KEY_UP, startKey);									currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OVER, currentItem));		}				/*				public function showAudioStatus(){		var tempMovie = new MovieClip();						tempMovie.graphics.lineStyle(2, 0x333333);					tempMovie.graphics.beginFill(0xFFFFFF, 0);					tempMovie.graphics.drawRoundRect(0,0,300,200,10,10);					tempMovie.graphics.endFill();					tempMovie.name = 'tmpMovie';					tempMovie.alpha = .8;			var tmpFormat = new TextFormat();			tmpFormat.font = "Reflex Bold";			tmpFormat.kerning = true;			tmpFormat.color = 0x000000;			tmpFormat.size = 20;			tmpFormat.align = "left";							var tempTextField = new TextField();		tempTextField.height = 40;				tempTextField.width = 200;						tempTextField.text = '';				tempTextField.x = 10;				tempTextField.y = 10;				tempTextField.selectable = false; 				tempTextField.setTextFormat(tmpFormat);									var killTemp = new MovieClip();					killTemp.graphics.lineStyle(2, 0xCCCCCC);					killTemp.graphics.beginFill(0xFF0000, 1);					killTemp.graphics.drawRoundRect(0,0,100,50,5,5);					killTemp.graphics.endFill();					killTemp.name = 'tmpButton';					killTemp.alpha = 1;					killTemp.x = 10;					killTemp.y = 60;		tempMovie.addChild(tempTextField);		tempMovie.addChild(killTemp);		addChild(tempMovie);		killTemp.addEventListener(MouseEvent.CLICK, function(){ 												removeChild(tempMovie);												stage.removeEventListener(Event.ENTER_FRAME, statusUpdate);												});													stage.addEventListener(Event.ENTER_FRAME, statusUpdate);		function statusUpdate(e:Event){		if(_audioObject != null){		tempTextField.text = _audioObject;		}else{			tempTextField.text = "sorry no luck";					stage.removeEventListener(Event.ENTER_FRAME, statusUpdate);		}				}	}*/		public function previewMedia():void{			//			//stopMedia();						mediaIsPlaying = true;			switch(mediaType){			case "Video":			//_videoObject = new Object();			//_videoObject = 			ExternalInterface.call("JSlaunchVideo", mediaID);			break;			//ExternalInterface.call("JSplayVideo", "movie.007");			case "VideoChannel":			ExternalInterface.call("JSlaunchVideoChannel", mediaID);			break;			case "Audio":			//_audioObject = new Object();//we get _audioObject.status and _audioObject.PlayTime in response						//_audioObject = 			ExternalInterface.call("JSlaunchTrack", mediaID);						//showAudioStatus();			break;			case "Game":			ExternalInterface.call("JSlaunchExternal", mediaID);			break;			case "AUX":			ExternalInterface.call("JSlaunchAux");			break;									}		}				public function launchMedia():void{			//			//stopMedia();			mediaIsPlaying = true;			switch(mediaType){			case "Video":			hideDemo();			//_videoObject = new Object();			//_videoObject = 			ExternalInterface.call("JSlaunchVideo", mediaID);			break;			//ExternalInterface.call("JSplayVideo", "movie.007");			case "VideoChannel":			hideDemo();			ExternalInterface.call("JSlaunchVideoChannel", mediaID);			break;			case "Audio":			//_audioObject = new Object();//we get _audioObject.status and _audioObject.PlayTime in response						//_audioObject = 			ExternalInterface.call("JSlaunchTrack", mediaID);						//showAudioStatus();			break;			case "Game":			hideDemo();			ExternalInterface.call("JSlaunchExternal", mediaID);			break;			case "AUX":			ExternalInterface.call("JSlaunchAux");			break;			case "USBAUDIO":			ExternalInterface.call("JSplayUSBAudio", mediaID);			break;												}		}public function playMedia():void{		if(mediaIsPlaying == true){	trace(mediaType+" - "+mediaID);			switch(mediaType){			case "Video":			ExternalInterface.call("JSplayVideo", mediaID);			//ExternalInterface.call("JSplayVideo", "movie.007");			break;			case "VideoChannel":			ExternalInterface.call("JSplayVideoChannel", mediaID);			break;			case "Audio":			ExternalInterface.call("JSplayTrack", mediaID);			break;			case "Game":			ExternalInterface.call("JSplayExternal", mediaID);			break;			/*case "USB":			ExternalInterface.call("JSplayUSBAudio", USBpath);			break;*/			}		}}								public function pauseMedia():void{				if(mediaIsPlaying == true){			ExternalInterface.call("JSpauseVideo");						switch(mediaType){			case "Video":			ExternalInterface.call("JSpauseVideo");			//ExternalInterface.call("JSplayVideo", "movie.007");			break;			case "Audio":			ExternalInterface.call("JSpauseTrack");			break;						case "Game":			ExternalInterface.call("JSpauseExternal");			break;								}	}}				public function stopMedia():void{			if(mediaIsPlaying == true){			mediaIsPlaying = false;						switch(mediaType){			case "Video":			ExternalInterface.call("JSstopVideo");			showDemo();			break;			case "Audio":			ExternalInterface.call("JSstopTrack");			break;						case "Game":			ExternalInterface.call("JSstopExternal");						showDemo();			break;						case "AUX":			_auxObject = ExternalInterface.call("JSstopAux");			if(_auxObject == true){			showDemo();			}			break;						case "USBAUDIO":			ExternalInterface.call("JSstopUSBAudio");			break;						}				}}	public function stopAllMedia():void{	if(mediaIsPlaying == true){			mediaIsPlaying = false;		try{			ExternalInterface.call("JSstopVideo");			ExternalInterface.call("JSstopTrack");			ExternalInterface.call("JSstopExternal");			ExternalInterface.call("JSstopAux");			ExternalInterface.call("JSstopUSBAudio");						}catch(e:Error){							}	}}public function fastForward():void {		if(mediaIsPlaying == true){			switch(mediaType){			case "Video":			ExternalInterface.call("JSfastForwardVideo");			//ExternalInterface.call("JSplayVideo", "movie.007");			break;			case "Audio":			ExternalInterface.call("JSfastForwardTrack");			break;						case "AUX":			ExternalInterface.call("JSpauseExternal");			break;								}	}		}public function rewind():void {	if(mediaIsPlaying == true){			switch(mediaType){			case "Video":			ExternalInterface.call("JSrewindVideo");			//ExternalInterface.call("JSplayVideo", "movie.007");			break;			case "Audio":			ExternalInterface.call("JSrewindTrack");			break;			}	}}public function getUSBStatus(){	_usbPath = ExternalInterface.call("JSgetUSBMediaStatus");	return _usbPath;}public function getUSBDirectory(p_path){		//ExternalInterface.call("myAlert","Path "+ p_path);	_usbObject = ExternalInterface.call("JSgetUSBMediaDirectory", p_path);	return _usbObject;}public function AUXStatus(){	//_auxObject = "status message";	_auxObject = ExternalInterface.call("JSisAuxAvailable");	return _auxObject;}		public function setAuxFullScreen(p_value){			hideDemo();	ExternalInterface.call("JSsetAuxFullscreenMode", p_value );		}public function setVolume(percent){	switch(mediaType){			case "Video":			ExternalInterface.call("JSsetVideoVolume", percent);			//ExternalInterface.call("JSplayVideo", "movie.007");			break;			case "Audio":			ExternalInterface.call("JSsetTrackVolume", percent);			break;						case "AUX":			ExternalInterface.call("JSsetAuxVolume", percent);			break;								}}public function setBrightness(brightness){			var level = Math.round(255*brightness/10);			var maxLevel = 255;			ExternalInterface.call("update_brightness", level, maxLevel);}					}//end class}//end package