package com.brilliantblue.panasonic.IFEdemo.audioVideo.musicOnDemand{	import flash.display.*;	import flash.events.*;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.filters.GlowFilter;	import flash.filters.BitmapFilterQuality;	import flash.external.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;		import caurina.transitions.Tweener;	import caurina.transitions.Equations;		import com.brilliantblue.panasonic.IFEdemo.audioVideo.musicOnDemand.albumView.view;	import com.brilliantblue.panasonic.IFEdemo.audioVideo.musicOnDemand.playListView.view;			public class view extends com.brilliantblue.panasonic.IFEdemo.view	{						private var _imageLoader:Loader;		private var _extrasLoader:Loader;		private var _xmlData:XML;		private var _titleText:String;		private var _albums:XMLList;		private var _album:XMLList;		private var _tracks:XMLList;		private var _bodyText:String;		private var _artist:String;		private var _albumName:String;		private var _thumbsrc:String;		private var _price:String;		private var _musicThumb:MovieClip;		private var _musicExtras:MovieClip;		private var _playAlbumButton:MovieClip;		private var _allTracksButton:MovieClip;		private var _viewPlayListButton:MovieClip;		private var _playList:XML;		private var _playListTracks:XMLList;		private var _allAlbumTracks:XML;		private var _tracksAdded:Boolean = false;		private var _currentTrack;		private var _playAll:Boolean;		private var _mediaPlaying:Boolean;										//private var _myTextField:TextField;				public function view () 		{			//_itemID = "movie.001";//test ID			//////////set up page//////////						setLayout("2column");			adjustScreen();						//////////load data//////////									//////////add buttons//////////						_playAlbumButton = new BasicButton();			_playAlbumButton.setTitle("play album");			_playAlbumButton.XPos = "LEFT";			//_playAlbumButton.setClickEvent(playAlbum);			_playAlbumButton.setClickEvent(playAllTracks);						//_playAlbumButton.y = 606			_playAlbumButton.name = "PlayAlbum";			addChild(_playAlbumButton);									_allTracksButton = new BasicButton();			_allTracksButton.setTitle("add all tracks");			_allTracksButton.XPos = "CENTER";			_allTracksButton.setClickEvent(addAllTracks);			//_allTracksButton.YPos = "BOTTOM"			_allTracksButton.name = "AddAllTracks";			addChild(_allTracksButton);						_viewPlayListButton = new BasicButton();			_viewPlayListButton.setTitle("view playlist");			_viewPlayListButton.XPos = "RIGHT";			_viewPlayListButton.setClickEvent(playList);			_viewPlayListButton.name = "ViewPlaylist";			//_viewPlayListButton.y = 606			addChild(_viewPlayListButton);									loadExtras("images/ent/music/musicExtras.png", addExtras);									addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);											}				private function onAdded(e:Event){									//loadXML("xml/media/ent/music.xml");			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);						//this.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));									ExternalInterface.addCallback("FLtrackComplete", trackEnded);						drawScreen();									removeEventListener(Event.ADDED_TO_STAGE, onAdded);					}		private function navUp(e:KeyboardEvent){			//trace(e.keyCode);									///////// get a new KeyHandler //////////			k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{					case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItem);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItem);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;											case KeyType.UP://up arrow						trace(currentItem.name);												itemIndex = Number(currentItem.extra.index);						if(itemIndex > 0){						_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						//_scroller.scroller.y -= Math.min(_scroller.scroller.y -_scroller.track.height/totalItems, 0);						_scroller.scroller.y = ((_scroller.track.height-_scroller.scroller.height)/totalItems)*(itemIndex-1);						_scroller.startScroll();						_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));												trace("up "+_scroller.scroller.y);						trace((_scroller.track.height/totalItems)*itemIndex-1)						trace(_scroller.track.height, totalItems, itemIndex)												currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = prevItem;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						currentItemOption = currentItem.extra.addButton;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						trace(currentItem.name);												}																		break;											case KeyType.DOWN://down arrow						trace(currentItem.name);																		itemIndex = Number(currentItem.extra.index);						if(itemIndex < totalItems-1){						_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						//_scroller.scroller.y += Math.max(_scroller.track.height/totalItems, _scroller.track.height);						_scroller.scroller.y = ((_scroller.track.height-_scroller.scroller.height)/totalItems)*(itemIndex+1);						_scroller.startScroll();						_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));																		trace("down "+_scroller.scroller.y);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = nextItem;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						currentItemOption = currentItem.extra.addButton;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						trace(currentItem.name);												}																		break;											case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						trace(currentItem.name);						var optionButton = currentItemOption;						optionButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;										case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																	case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}				private function navDown(e:KeyboardEvent){						/*			k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;																}*/						}						private function loadImage(imagePath, onImageLoaded)		{			_imageLoader = new Loader();			_imageLoader.contentLoaderInfo.addEventListener(Event.INIT, onImageLoaded,false,0,true);			_imageLoader.load( new URLRequest(imagePath));		}				private function loadExtras(imagePath, onExtrasLoaded)		{			_extrasLoader = new Loader();			_extrasLoader.contentLoaderInfo.addEventListener(Event.INIT, onExtrasLoaded,false,0,true);			_extrasLoader.load( new URLRequest(imagePath));		}						private function drawScreen(){			_playList = MovieClip(root)._playList;						_xmlData = MovieClip(root)._music;												_albums = _xmlData.*;			_album = _albums.(id == _itemID);						_playListTracks = _playList.album.tracks.*;						//_allAlbumTracks = _playListTracks as XML						//trace(_xmlData);			_albumName = _album.name.toString().toUpperCase();			_artist = _album.artist.toString();			_titleText = _artist;						_thumbsrc = _album.image.toString();			_tracks = _album.tracks.*;						totalItems = _tracks.length();			//_titleText = String(_titleText+" - "+_priceText);			//_bodyText = _album.synopsis.toString();			//trace(_bodyText)									//_price = _music.price.toString();												setScreenTitle(_titleText);						screen.title.x = (contentRegion.x - screen.x);												var headerFormat = new TextFormat();			headerFormat.font = "Reflex Bold";			headerFormat.kerning = true;			headerFormat.color = 0xFFFFFF;			headerFormat.size = 20;			headerFormat.align = "left";												var trackFormat = new TextFormat();			trackFormat.font = "Century Gothic";			trackFormat.kerning = true;			trackFormat.color = 0xFFFFFF;			trackFormat.size = 18;			trackFormat.align = "left";															contentMC = new MovieClip();			contentMC.y = 20;			contentMC.graphics.beginFill(0x000000, 0);			contentMC.graphics.drawRect(0,0,40,650);			contentMC.graphics.endFill();									var headerMC = new MovieClip();			headerMC.x = 25;			headerMC.y = 5;			var _trackColumnLabel = new TextField();			_trackColumnLabel.height = 40;				_trackColumnLabel.text = "TRACK";				_trackColumnLabel.x = 30;				_trackColumnLabel.y = 0;				_trackColumnLabel.selectable = false; 				_trackColumnLabel.setTextFormat(headerFormat);									var _addColumnLabel = new TextField();			_addColumnLabel.height = 40;				_addColumnLabel.text = "ADD";				_addColumnLabel.x = 500;				_addColumnLabel.selectable = false; 				_addColumnLabel.setTextFormat(headerFormat);									var _playColumnLabel = new TextField();			_playColumnLabel.height = 40;				_playColumnLabel.text = "PLAY";				_playColumnLabel.x = 580;				_playColumnLabel.selectable = false; 				_playColumnLabel.setTextFormat(headerFormat);						headerMC.addChild(_trackColumnLabel);			headerMC.addChild(_addColumnLabel);			headerMC.addChild(_playColumnLabel);						contentRegion.addChild(headerMC);			//trace(_playList);						var currentItemSet = false;			var currentItemOptionSet = false;			//trace(_tracks.length());						for (var i = 0; i < totalItems; i++){				//trace(_tracks[i].id);				var _id = _tracks[i].id;				var trackWidth:Number = 640;				var trackHeight:Number = 40;				var _trackListing:MovieClip = new MovieClip();					_trackListing.y = (50*i);					//trace(_trackListing.y)					_trackListing.x = 10;					_trackListing.name = 'trackListing_'+i;					_trackListing.buttonMode = true;					_trackListing.selected = false;					_trackListing.mouseChildren = false;					_trackListing.extra = new Object();					_trackListing.extra.index = i;									var _background:MovieClip = new MovieClip();					_background.graphics.lineStyle(2, 0xFFFFFF);					_background.graphics.beginFill(0xFFFFFF, 0);					_background.graphics.drawRoundRect(0,0,trackWidth,trackHeight,trackHeight,trackHeight);					_background.graphics.endFill();					_background.name = 'trackBackground';					_background.alpha = 0;				var _trackTitle = new TextField();					_trackTitle.text = (i+1)+". "+ _tracks[i].name;					_trackTitle.autoSize = TextFieldAutoSize.LEFT;					_trackTitle.embedFonts = true;					_trackTitle.x = 20;					_trackTitle.y = 5;					_trackTitle.selectable = false; 					if(_trackTitle.length > 45){						_trackTitle.replaceText(46, 1000, "...")						}										_trackTitle.setTextFormat(trackFormat);									var _button:MovieClip = new MovieClip();					_button.graphics.lineStyle(2, 0xFFFFFF, 0);					_button.graphics.beginFill(0xFFFFFF, 0);					_button.graphics.drawRoundRect(0,0,600,trackHeight,trackHeight,trackHeight);					_button.graphics.endFill();					_button.name = 'trackButton';					_button.alpha = 0;								_trackListing.addChild(_background);				_trackListing.addChild(_trackTitle);				_trackListing.addChild(_button);												var _addButton:MovieClip = new musicPlusBtn();					_addButton.x = 500;					_addButton.y = (50*i);					_addButton.name = 'addButton_'+i;					_addButton.buttonMode = true;					_addButton.extra = new Object();					_addButton.extra.trackId = _id;					_addButton.extra._xml = _tracks[i] as XML;					var addButtonSet = false;										for (var j = 0; j < _playListTracks.length(); j++){						if (_playListTracks[j].id == _id){							_addButton.gotoAndStop("removeTrack");							_addButton.extra.playList = true;						}else{							if(addButtonSet != true){							_addButton.extra.playList = false;							addButtonSet = true;							}						}					}															_addButton.addEventListener(MouseEvent.CLICK, toggleTrackPlayList,false,0,true);					_addButton.addEventListener(MouseEvent.MOUSE_OVER, addGlow,false,0,true);					_addButton.addEventListener(MouseEvent.MOUSE_OUT, removeGlow,false,0,true);														var _playButton:MovieClip = new musicPlayButton();				_playButton.x = 580;				_playButton.y = (50*i);				_playButton.name = 'playButton_'+i;				_playButton.buttonMode = true;				_playButton.extra = new Object();				_playButton.extra.playing = false;				_playButton.extra.trackId = _id;								_trackListing.extra.playButton = _playButton;				_trackListing.extra.addButton = _addButton;														contentMC.addChild(_trackListing);				contentMC.addChild(_addButton);				contentMC.addChild(_playButton);								_trackListing.addEventListener(MouseEvent.CLICK, trackSelect,false,0,true);				_trackListing.addEventListener(MouseEvent.MOUSE_OVER, trackSelect,false,0,true);												_playButton.addEventListener(MouseEvent.CLICK, playTrack,false,0,true);				_playButton.addEventListener(MouseEvent.MOUSE_OVER, addGlow,false,0,true);				_playButton.addEventListener(MouseEvent.MOUSE_OUT, removeGlow,false,0,true);				//_trackListing.addEventListener(MouseEvent.MOUSE_UP, trackDeSelect); 								if(currentItemSet != true){				currentItem = _trackListing;				trace(currentItem.name);				currentItemSet = true;				}				if(currentItemOptionSet != true){				currentItemOption = _addButton;				trace(currentItemOption.name);				currentItemOptionSet = true;				}															}						 				contentMC.addEventListener(Event.ENTER_FRAME,trackListener,false,0,true);						/*			_description.width = contentRegion.width - 100;			//_description.height = 50;			_description.text = _bodyText + "\n\n" + _cost + "\n" + _rating + "\n" + _directors + "\n" + _starring + "\n" + _runTime + "\n" + _studio;			_description.wordWrap = true;			_description.autoSize = TextFieldAutoSize.LEFT;			_description.embedFonts = true;			_description.y = 0;			_description.setTextFormat(CC_BodyFormat);*/									setContentMC(contentMC);			loadImage(_thumbsrc, addThumb);						//dummy clip for the "Games other people liked" section									currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));			currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));			currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));		}				private function addGlow(e:MouseEvent){			e.target.filters = [glowFilter];		}				private function removeGlow(e:MouseEvent){			e.target.filters = [];		}				private function getNextItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			var result;			if(index < Number(totalItems-1)){			result = parentMC.getChildByName("trackListing_"+Number(index+1));			}else{			result = parentMC.getChildByName("trackListing_0");			}			return result;						}					private function getPrevItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			trace(totalItems);			var result;			if(index > 0){			result = parentMC.getChildByName("trackListing_"+Number(index-1));			}else{			result = parentMC.getChildByName("trackListing_"+Number(totalItems-1));			}						return result;						}					private function getNextOption(_currentItem){				var result;								switch(currentItemOption){										case _currentItem.extra.addButton:						result = _currentItem.extra.playButton;						break;											case _currentItem.extra.playButton:						result = _playAlbumButton;						break;											case _playAlbumButton:						result = _allTracksButton;						break;											case _allTracksButton:						result = _viewPlayListButton;						break;											case _viewPlayListButton:						result = _currentItem.extra.addButton;						break;				}								return result;			}					private function getPrevOption(_currentItem){				var result;								switch(currentItemOption){										case _currentItem.extra.addButton:						result = _viewPlayListButton;						break;											case _viewPlayListButton:						result = _allTracksButton;						break;											case _allTracksButton:						result = _playAlbumButton;						break;											case _playAlbumButton:						result = _currentItem.extra.playButton						break;											case _currentItem.extra.playButton:						result = _currentItem.extra.addButton;						break;				}								return result;							}											private function playAllTracks(e:MouseEvent){			_playAll = true;							currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));				currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));				currentItemOption = currentItem.extra.playButton;				currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));				currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));					}				private function playTrack(e:MouseEvent):void {			_mediaPlaying = true;					MovieClip(root).mediaType = "Audio";					MovieClip(root).stopMedia();						if(e.target.extra.playing == false){												var p = e.target.parent;												for (var i=0; i < totalItems;i++)						{							var playButton = p.getChildByName('playButton_'+i);								playButton.gotoAndStop(1);								playButton.extra.playing = false;						}						trace(e.target.extra.trackId);						MovieClip(root).mediaID = e.target.extra.trackId;						MovieClip(root).launchMedia();						e.target.gotoAndStop(2);						e.target.extra.playing = true;						_currentTrack = e.target;										}else{											MovieClip(root).mediaType = "Audio";					MovieClip(root).mediaID = e.target.extra.trackId;					MovieClip(root).pauseMedia();						e.target.gotoAndStop(1);					e.target.extra.playing = false;					}											}												private function toggleTrackPlayList(e:MouseEvent):void {			var trackId = e.target.extra.trackId;		var trackXML = e.target.extra._xml;		var inPlayList = e.target.extra.playList;					if(inPlayList != true){//this means it's not in playlist yet but will be when we're done				e.target.gotoAndStop("removeTrack");				delete _playList.album.tracks.track.(id == trackId)[0];				_playList.album.tracks.prependChild(trackXML);				e.target.extra.playList = true;				inPlayList = true;			}else{//let's delete the entry and toggle to the addTrack state				e.target.gotoAndStop("addTrack");				inPlayList = false;				delete _playList.album.tracks.track.(id == trackId)[0];				e.target.extra.playList = false;									}		}				private function trackEnded(){						if(_playAll == true){			var _currentItem;				_currentTrack.gotoAndStop(1);				_currentTrack.extra.playing = false;				_currentTrack.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));				//if(currentItem.extra.index < totalItems){				_currentItem = getNextItem(currentItem);				_currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));				_currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));				currentItemOption = _currentItem.extra.playButton;				currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));				currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));				//}							}else{				_currentTrack.gotoAndStop(1);				_currentTrack.extra.playing = false;				_mediaPlaying = false;			}					}						private function addAllTracks(e:MouseEvent){									for (var i = 0; i < totalItems; i++){				var trackId = _tracks[i].id;				delete _playList.album.tracks.track.(id == trackId)[0];					_playList.album.tracks.prependChild(_tracks[i]);								}						drawScreen();		}						private function playAlbum(e:MouseEvent){			parentMC = this.parent;			var myView = new com.brilliantblue.panasonic.IFEdemo.audioVideo.musicOnDemand.albumView.view();			if(_mediaPlaying == true){					MovieClip(root).mediaType = "Audio";					MovieClip(root).stopMedia();				}			//trace(this.parent.name);			myView.x = 1280;//at lest... maybe further right			myView.ID = _itemID;			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{x: -1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });		}				private function playList(e:MouseEvent){			parentMC = this.parent;			var myView = new com.brilliantblue.panasonic.IFEdemo.audioVideo.musicOnDemand.playListView.view();			if(_mediaPlaying == true){					MovieClip(root).mediaType = "Audio";					MovieClip(root).stopMedia();				}            stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			//trace(this.parent.name);			myView.x = 1280;//at lest... maybe further right			myView.ID = _itemID;			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{x: -1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });		}												private function trackSelect(e:MouseEvent):void			{			var target = e.target;							var tracks = e.target.parent.numChildren;			for(var i = 0; i < tracks; i++){			var track = e.target.parent.getChildAt(i);			if(track.selected == true){				track.selected = false;			}						}			target.selected = true;						}											private function trackListener(e:Event):void{			var tracks = e.target.numChildren;			for(var i = 0; i < tracks; i++){			var track = e.target.getChildAt(i);			//trace(track.name);			var background = track.getChildByName("trackBackground");			//var playButton = e.target.getChildByName("playButton_"+i);			//trace(track.selected);			if(track.selected == true){				Tweener.addTween(background,{alpha:1,time:0.5, transition:"easeOutBack"});							}else{				Tweener.addTween(background,{alpha:0,time:0.5, transition:"easeOutBack"});							}						/*			if(playButton.playing == true){				Tweener.addTween(background,{alpha:1,time:0.5, transition:"easeOutBack"});			}else{				Tweener.addTween(background,{alpha:0,time:0.5, transition:"easeOutBack"});							}*/															}								}								private function addThumb (e:Event){			_musicThumb = new MovieClip();			_musicThumb.addChild(_imageLoader.content);			_musicThumb.x = 123;			_musicThumb.y = 100;			var tempWidth = _musicThumb.width;			var tempHeight = _musicThumb.height			_musicThumb.height = 240;			var tempRatio =  _musicThumb.height / tempHeight;			_musicThumb.width = _musicThumb.width * tempRatio;			this.addChild(_musicThumb);		}				private function addExtras (e:Event){			_musicExtras = new MovieClip();			_musicExtras.addChild(_extrasLoader.content);			_musicExtras.x = 100;			_musicExtras.y = 340;			this.addChild(_musicExtras);		}				override protected function screenShutDown(){			if(_mediaPlaying == true){					MovieClip(root).mediaType = "Audio";					MovieClip(root).stopMedia();				}			stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}				public function setKeyboardEvents()		{            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);		}							}		}