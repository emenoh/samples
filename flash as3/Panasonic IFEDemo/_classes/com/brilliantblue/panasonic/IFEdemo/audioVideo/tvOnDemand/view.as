package com.brilliantblue.panasonic.IFEdemo.audioVideo.tvOnDemand{	import flash.display.*;	import flash.events.*;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;		import caurina.transitions.Tweener;	import caurina.transitions.Equations;		public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				private var _imageLoader:Loader;		private var _extrasLoader:Loader;		private var _xmlData:XML;		private var _titleText:String;		private var _shows:XMLList;		private var _series:XMLList;		private var _episodes:XMLList;		private var _bodyText:String;		private var _season:String;		private var _thumbsrc:String;		private var _price:String;		private var _tvThumb:MovieClip;		private var _tvExtras:MovieClip;		private var _playseriesButton:MovieClip;		private var _allepisodesButton:MovieClip;		private var _viewPlayListButton:MovieClip;		private var _episodeListing:MovieClip;		private var _playButton:MovieClip;		private var result;						//private var _myTextField:TextField;				public function view () 		{			//_itemID = "movie.001";//test ID			//////////set up page//////////											//////////load data//////////						//loadXML("xml/media/ent/tv.xml");						//////////add buttons//////////						_playseriesButton = new BasicButton();			_playseriesButton.setTitle("play series");			_playseriesButton..XPos = "LEFT";			//_playseriesButton.y = 606			//addChild(_playseriesButton);									_allepisodesButton = new BasicButton();			_allepisodesButton.setTitle("add all episodes");			_allepisodesButton.XPos = "CENTER";			//_allepisodesButton.y = 606			//addChild(_allepisodesButton);						_viewPlayListButton = new BasicButton();			_viewPlayListButton.setTitle("view playlist");			_viewPlayListButton.XPos = "RIGHT";			//_viewPlayListButton.y = 606			//addChild(_viewPlayListButton);															addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);			addEventListener(Event.REMOVED_FROM_STAGE, onRemoved,false,0,true);					}		private function onAdded(e:Event){			//trace("added");			_xmlData = MovieClip(root)._tvShows;						drawScreen();            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);		}						private function onRemoved(e:Event){						            stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);            stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);									_episodeListing.removeEventListener(MouseEvent.CLICK, episodeSelect);			_episodeListing.removeEventListener(MouseEvent.MOUSE_OVER, episodeSelect);						_playButton.removeEventListener(MouseEvent.CLICK, playepisode);						contentMC.removeEventListener(Event.ENTER_FRAME,episodeListener);						removeEventListener(Event.REMOVED_FROM_STAGE, onRemoved);					}								private function navUp(e:KeyboardEvent){			//trace(e.keyCode);						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)			switch(k)				{					/*case 37://left arrow											trace(currentItem.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = prevItem;						trace(currentItem.name);						break;					case 39://right arrow						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = nextItem;						trace(currentItem.name);						break;*/											case KeyType.UP://up arrow						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = prevItem;						trace(currentItem.name);						break;											case KeyType.DOWN://down arrow						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = nextItem;						trace(currentItem.name);						break;											case KeyType.OK://space bar						//if(currentItem != previousItem){						//keyboard = true;						trace(currentItem.name);						var playbutton = currentItem.extra.playButton;						playbutton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;															case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																	case KeyType.BACK:					case KeyType.BACKSPACE://home button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;										}						}				private function navDown(e:KeyboardEvent){						/*			k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;																}*/						}				private function drawScreen(){			_shows = _xmlData.*;			//trace(_itemID);			_series = _shows.(id == _itemID);			//trace(_series);			_titleText = _series.name.toString().toUpperCase();			_season = _series.season.toString().toUpperCase();						_thumbsrc = _series.image.toString();			_episodes = _series.episodes.*;			//trace(_episodes);			//_titleText = String(_titleText+" - "+_priceText);			//_bodyText = _series.synopsis.toString();			//trace(_bodyText)									//_price = _tv.price.toString();									setLayout("2column");			adjustScreen();			setScreenTitle(_titleText+" - SEASON: "+_season);						screen.title.x = (contentRegion.x - screen.x);						var headerFormat = new TextFormat();			headerFormat.font = "Reflex Bold";			headerFormat.kerning = true;			headerFormat.color = 0xFFFFFF;			headerFormat.size = 20;			headerFormat.align = "left";												var episodeFormat = new TextFormat();			episodeFormat.font = "Century Gothic";			episodeFormat.kerning = true;			episodeFormat.color = 0xFFFFFF;			episodeFormat.size = 18;			episodeFormat.align = "left";									contentMC = new MovieClip();			contentMC.y = 20;									var headerMC = new MovieClip();			headerMC.x = 25;			headerMC.y = 5;			var _episodeColumnLabel = new TextField();			_episodeColumnLabel.height = 40;				_episodeColumnLabel.text = "EPISODE";				_episodeColumnLabel.x = 30;				_episodeColumnLabel.y = 0;				_episodeColumnLabel.selectable = false; 				_episodeColumnLabel.setTextFormat(headerFormat);															var _playColumnLabel = new TextField();			_playColumnLabel.height = 40;				_playColumnLabel.text = "PLAY";				_playColumnLabel.x = 580;				_playColumnLabel.selectable = false; 				_playColumnLabel.setTextFormat(headerFormat);						headerMC.addChild(_episodeColumnLabel);			headerMC.addChild(_playColumnLabel);			headerMC.mouseChildren = true;						contentRegion.addChild(headerMC);									totalItems = _episodes.length();			var currentItemSet = false;			//trace(_episodes.length());						for (var i = 0; i < totalItems; i++){				//trace(_episodes[i].name);				var _id = _episodes[i].id;				var episodeWidth:Number = 650;				var episodeHeight:Number = 40;					_episodeListing = new MovieClip();					_episodeListing.y = (50*i);					//trace(_episodeListing.y)					_episodeListing.x = 10;					_episodeListing.name = 'episodeListing_'+i;					_episodeListing.buttonMode = true;					_episodeListing.selected = false;					_episodeListing.mouseChildren = false;					_episodeListing.extra = new Object();					_episodeListing.extra.index = i;									var _background:MovieClip = new MovieClip();					_background.graphics.lineStyle(2, 0xFFFFFF);					_background.graphics.beginFill(0xFFFFFF, 0);					_background.graphics.drawRoundRect(0,0,episodeWidth,episodeHeight,episodeHeight,episodeHeight);					_background.graphics.endFill();					_background.name = 'episodeBackground';					_background.alpha = 0;				var _episodeTitle = new TextField();					_episodeTitle.text = (i+1)+". "+ _episodes[i].name;					_episodeTitle.autoSize = TextFieldAutoSize.LEFT;					_episodeTitle.embedFonts = true;					_episodeTitle.x = 20;					_episodeTitle.y = 5;					_episodeTitle.selectable = false; 					if(_episodeTitle.length > 45){						_episodeTitle.replaceText(46, 1000, "...")						}										_episodeTitle.setTextFormat(episodeFormat);									var _button:MovieClip = new MovieClip();					_button.graphics.lineStyle(2, 0xFFFFFF, 0);					_button.graphics.beginFill(0xFFFFFF, 0);					_button.graphics.drawRoundRect(0,0,600,episodeHeight,episodeHeight,episodeHeight);					_button.graphics.endFill();					_button.name = 'episodeButton';					_button.alpha = 0;								_episodeListing.addChild(_background);				_episodeListing.addChild(_episodeTitle);				_episodeListing.addChild(_button);																		_playButton = new musicPlayButton();				_playButton.x = 580;				_playButton.y = (50*i)+2;				_playButton.name = 'playButton_'+i;				_playButton.buttonMode = true;				_playButton.mouseChildren = false;				_playButton.extra = new Object();				_playButton.extra.playing = false;				_playButton.extra.trackId = _id;								_episodeListing.extra.playButton = _playButton;														contentMC.addChild(_episodeListing);				contentMC.addChild(_playButton);								_episodeListing.addEventListener(MouseEvent.CLICK, episodeSelect,false,0,true);				_episodeListing.addEventListener(MouseEvent.MOUSE_OVER, episodeSelect,false,0,true);								//_episodeListing.addEventListener(MouseEvent.MOUSE_UP, episodeDeSelect); 																								_playButton.addEventListener(MouseEvent.CLICK, playepisode,false,0,true);													if(currentItemSet != true){				currentItem = _episodeListing;				trace(currentItem.name);				currentItemSet = true;				}														}//end of for loop															currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));									 			contentMC.addEventListener(Event.ENTER_FRAME,episodeListener,false,0,true);												setContentMC(contentMC);			loadImage(_thumbsrc, addThumb);			//dummy clip for the "Games other people liked" section			//loadExtras("images/ent/movies/movieExtras.png", addExtras);								}						private function playepisode(e:MouseEvent):void {					if(e.target.extra.playing == false){						trace(e.target.extra.trackId);					MovieClip(root).mediaType = "Video";					MovieClip(root).mediaID = e.target.extra.trackId;					MovieClip(root).launchMedia();					e.target.gotoAndStop(2);					e.target.extra.playing = true;					}else{											MovieClip(root).mediaType = "Video";					MovieClip(root).mediaID = e.target.extra.trackId;					MovieClip(root).pauseMedia();						e.target.gotoAndStop(1);					e.target.extra.playing = false;					}							}							private function addepisode(e:MouseEvent):void {			//trace("episode added");					}						private function episodeSelect(e:MouseEvent):void			{			var target = e.target;			currentItem = e.target;			var episodes = e.target.parent.numChildren;			for(var i = 0; i < episodes; i++){				var episode = e.target.parent.getChildAt(i);						if(episode.selected == true){							episode.selected = false;						}								}			target.selected = true;						}						private function getNextItem(_currentItem)			{			var index = Number(_currentItem.extra.index);			parentMC = _currentItem.parent;			//var result;			if(index < Number(totalItems-1)){			result = parentMC.getChildByName("episodeListing_"+Number(index+1));			}else{			result = parentMC.getChildByName("episodeListing_0");			}			return result;						}					private function getPrevItem(_currentItem)			{			var index = Number(_currentItem.extra.index);			parentMC = _currentItem.parent;			//trace(totalItems);			//var result;			if(index > 0){			result = parentMC.getChildByName("episodeListing_"+Number(index-1));			}else{			result = parentMC.getChildByName("episodeListing_"+Number(totalItems-1));			}						return result;						}					private function episodeListener(e:Event):void{			var episodes = e.target.numChildren;			for(var i = 0; i < episodes; i++){			var episode = e.target.getChildAt(i);			//trace(episode.name);			var background = episode.getChildByName("episodeBackground");			//trace(episode.selected);			if(episode.selected == true){				Tweener.addTween(background,{alpha:1,time:0.5, transition:"easeOutBack"});			}else{				Tweener.addTween(background,{alpha:0,time:0.5, transition:"easeOutBack"});							}						}								}								private function addThumb (e:Event){			_tvThumb = new MovieClip();			_tvThumb.addChild(_imageLoader.content);			_tvThumb.x = 140;			_tvThumb.y = 100;			var tempWidth = _tvThumb.width;			var tempHeight = _tvThumb.height			_tvThumb.height = 300;			var tempRatio =  _tvThumb.height / tempHeight;			_tvThumb.width = _tvThumb.width * tempRatio;			this.addChild(_tvThumb);						_imageLoader.contentLoaderInfo.removeEventListener(Event.INIT, addThumb);		}				private function addExtras (e:Event){			_tvExtras = new MovieClip();			_tvExtras.addChild(_extrasLoader.content);			_tvExtras.x = 100;			_tvExtras.y = 340;			this.addChild(_tvExtras);						_extrasLoader.contentLoaderInfo.removeEventListener(Event.INIT, addExtras);		}				private function loadImage(imagePath, onImageLoaded)		{			_imageLoader = new Loader();			_imageLoader.contentLoaderInfo.addEventListener(Event.INIT, onImageLoaded,false,0,true);			_imageLoader.load( new URLRequest(imagePath));		}				private function loadExtras(imagePath, onExtrasLoaded)		{			_extrasLoader = new Loader();			_extrasLoader.contentLoaderInfo.addEventListener(Event.INIT, onExtrasLoaded,false,0,true);			_extrasLoader.load( new URLRequest(imagePath));		}				override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}							}		}