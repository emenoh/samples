package com.brilliantblue.panasonic.IFEdemo.audioVideo.moviesOnDemand{	import flash.display.*;	import flash.events.*;	import flash.net.URLRequest;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.external.ExternalInterface;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;		import com.brilliantblue.panasonic.IFEdemo.shoppingCart.*;			public class view extends com.brilliantblue.panasonic.IFEdemo.view	{						private var _imageLoader:Loader;		private var _extrasLoader:Loader;		private var _xmlData:XML;		private var _titleText:String;		private var _movies:XMLList;		private var _movie:XMLList;		private var _bodyText:String;		private var _priceText:String;		private var _description:TextField;		private var _thumbsrc:String;		private var _price:String;		private var _movieThumb:MovieClip;		private var _movieExtras:MovieClip;		private var _purchaseButton:MovieClip;		private var _previewButton:MovieClip;		private var cartItem:XML;												//private var _myTextField:TextField;				public function view () 		{			//_itemID = "movie.001";//test ID			//////////set up page//////////						setLayout("2column");			adjustScreen();									//////////add buttons//////////						_purchaseButton = new BasicButton();			_purchaseButton.setTitle("purchase");			_purchaseButton.XPos = "RIGHT";			_purchaseButton.setClickEvent(buyVideo);			_purchaseButton.name = "purchaseButton";			//_purchaseButton.y = 606			addChild(_purchaseButton);								_previewButton = new BasicButton();			_previewButton.setTitle("view preview");			_previewButton.XPos = "LEFT";			_previewButton.name = "previewButton";			//_previewButton.y = 606			addChild(_previewButton);															this.addEventListener(Event.ENTER_FRAME, swapButton,false,0,true);						this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);						currentItemOption = _previewButton;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));					}				private function onAdded(e:Event){			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);						//////////load data//////////			_xmlData = MovieClip(root)._movies;			drawScreen();		}						private function navUp(e:KeyboardEvent){			//trace(e.keyCode);			//trace("navUp");			//trace("CITem: "+currentItem);			//trace("PItem: "+previousItem);			k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{					case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItem);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItem);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						var optionButton = currentItemOption;						optionButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;										case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																	case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;																}						}								/*private function getNextItem(_currentItem)			{			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			var result;			if(index < Number(totalItems-1)){			result = parentMC.getChildByName("trackListing_"+Number(index+1));			}else{			result = parentMC.getChildByName("trackListing_0");			}			return result;						}					private function getPrevItem(_currentItem)			{			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			trace(totalItems);			var result;			if(index > 0){			result = parentMC.getChildByName("trackListing_"+Number(index-1));			}else{			result = parentMC.getChildByName("trackListing_"+Number(totalItems-1));			}						return result;						}*/					private function getNextOption(_currentItem)			{				var result;				if (currentItemOption == _previewButton){					result = _purchaseButton;				}else {					result = _previewButton;				}				return result;			}		private function getPrevOption(_currentItem)			{				var result;				if (currentItemOption == _purchaseButton){					result = _previewButton;				}else {					result = _purchaseButton;				}				return result;			}							private function swapButton(e:Event){			if(_purchased == true){			_purchaseButton.setTitle("play");						this.removeEventListener(Event.ENTER_FRAME, swapButton);			}		}								private function loadImage(imagePath, onImageLoaded)		{			_imageLoader = new Loader();			_imageLoader.contentLoaderInfo.addEventListener(Event.INIT, onImageLoaded);			_imageLoader.load( new URLRequest(imagePath));		}				private function loadExtras(imagePath, onExtrasLoaded)		{			_extrasLoader = new Loader();			_extrasLoader.contentLoaderInfo.addEventListener(Event.INIT, onExtrasLoaded);			_extrasLoader.load( new URLRequest(imagePath));		}						private function drawScreen()		{			_movies = _xmlData.*;			_movie = _movies.(id == _itemID);			//trace(_xmlData);			_titleText = _movie.name.toString();			_priceText = _movie.price.toString();			//_titleText = String(_titleText+" - "+_priceText);			_bodyText = _movie.synopsis.toString();			//trace(_bodyText)			var _studio = "Studio: "+ _movie.studio.toString();			//trace(_studio)			var _directors = "Directed by: " +  _movie.directors.toString();			//trace(_directors)			var _rating = "Rated: " +  _movie.classification.toString();			var _starring = "Starring: " + _movie.stars.toString();						var _cost = "Cost: $3.50 ";			var _runTime = "Running Time: " + _movie.run_time.toString();									_thumbsrc = _movie.image.toString();			//_price = _movie.price.toString();												setScreenTitle(_titleText);						screen.title.x = (contentRegion.x - screen.x);												contentMC = new MovieClip();						_description = new TextField();			_description.width = contentRegion.width - 320;			//_description.height = 50;			_description.text = _bodyText + "\n\n" + _cost + "\n" + _rating + "\n" + _directors + "\n" + _starring + "\n" + _runTime + "\n" + _studio;			_description.wordWrap = true;			_description.autoSize = TextFieldAutoSize.LEFT;			_description.embedFonts = true;			_description.y = 0;			_description.setTextFormat(CC_BodyFormat);			contentMC.addChild(_description);						setContentMC(contentMC);						loadImage(_thumbsrc, addThumb);			//dummy clip for the "Games other people liked" section			loadExtras("images/ent/movies/movieExtras.png", addExtras);									cartItem = <item type="video" price="3.50">{_titleText}</item>;					}				private function addThumb (e:Event){			_movieThumb = new MovieClip();			_movieThumb.addChild(_imageLoader.content);			_movieThumb.x = 165;			_movieThumb.y = 100;			var tempWidth = _movieThumb.width;			var tempHeight = _movieThumb.height			_movieThumb.height = 240;			var tempRatio =  _movieThumb.height / tempHeight;			_movieThumb.width = _movieThumb.width * tempRatio;			this.addChild(_movieThumb);		}				private function addExtras (e:Event){			_movieExtras = new MovieClip();			_movieExtras.addChild(_extrasLoader.content);			_movieExtras.x = 90;			_movieExtras.y = 340;			this.addChild(_movieExtras);		}						//btnPause.addEventListener("click",pauseVideo);		//btnStop.addEventListener("click",stopVideo);				private function launchVideo(e:MouseEvent):void{			MovieClip(root).mediaID = _itemID;			MovieClip(root).mediaType = "Video";			MovieClip(root).launchMedia();			//ExternalInterface.call("JSplayVideo", "movie.007");		}				private function buyVideo(e:MouseEvent){			if(_purchased != true){			parentMC = this.parent;			var overlay = new overlayMC;			overlay.alpha = 0.85;			overlay.name = "overlay";			var myView = new com.brilliantblue.panasonic.IFEdemo.shoppingCart.view(cartItem);						//trace(myView.x);			//trace(this.parent.name);			//myView.x = 1280;//at lest... maybe further right			parentMC.addChild(overlay);			parentMC.addChild(myView);			            stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);            stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);			}else{			MovieClip(root).mediaID = _itemID;			MovieClip(root).mediaType = "Video";			MovieClip(root).launchMedia();			}					}				override protected function screenShutDown()		{						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}				public function setKeyboardEvents()		{            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);		}					}		}