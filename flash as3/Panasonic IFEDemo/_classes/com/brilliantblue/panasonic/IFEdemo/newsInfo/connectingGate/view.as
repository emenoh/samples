package com.brilliantblue.panasonic.IFEdemo.newsInfo.connectingGate{	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.display.Stage;	import flash.display.StageDisplayState;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;			public class view extends com.brilliantblue.panasonic.IFEdemo.view	{		public var myMovieClip:MovieClip;		//public var myTextField:TextField;		//public var testContent;				public function view () 		{			setLayout("1column");			setScreenTitle("CONNECTING GATE");			adjustScreen();						/*myMovieClip = new GateConnect();			myMovieClip.x = 326;			myMovieClip.y = 166;*/						//addChild(myMovieClip);						drawScreen();						this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);								}								private function onAdded(e:Event){			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);					}						private function drawScreen(){									var headerArray = new Array("FLIGHT","DESTINATION","STATUS","BOARDING","EST.DEPARTURE","TERMINAL/GATE");									var headerFormat = createTextFormat('Reflex Bold', 0xFFFFFF, 20, 'left', false)						var messageFormat = createTextFormat('Century Gothic', 0xFFFFFF, 18, 'left', false)						var headerMC = new MovieClip();			headerMC.x = 25;			headerMC.y = 5;			headerMC.name = "headerMC";						/*var _flightX = 0;			var _destinationX = 100;			var _statusX = 200;			var _boardingX = 300;			var _departureX = 400;			var _gateX = 500;*/			var xPos = 150;						for(var i = 0; i < headerArray.length; i++){							var _header = createTextField(xPos*i, 0, 40, 40);			_header.text = headerArray[i].toString();			_header.setTextFormat(headerFormat)							headerMC.addChild(_header);										}									/*var _toHeader = createTextField(_toX, 0, 40, 40);				_toHeader.text = "TO";				_toHeader.setTextFormat(headerFormat)			var _subjectHeader = createTextField(_subjectX, 0, 40, 40);				_subjectHeader.text = "SUBJECT";				_subjectHeader.setTextFormat(headerFormat)			var _dateHeader = createTextField(_dateX, 0, 40, 40);				_dateHeader.text = "DATE (GMT)";				_dateHeader.setTextFormat(headerFormat)						headerMC.addChild(_fromHeader);			//headerMC.addChild(_toHeader);			headerMC.addChild(_subjectHeader);			headerMC.addChild(_dateHeader);*/															var gateListingMC = new MovieClip;			gateListingMC.x = 25;			gateListingMC.y = 45;									var gateArray = new Array();							gateArray[0] = ["PA163", "AUCKLAND", "ON TIME", "04:15", "04:45", "T1/G23"]						gateArray[1] = ["PA872", "MELBOURNE", "CANCELED", "-----", "-----", "-----"];						gateArray[2] = ["JS872", "BRISBANE", "DELAYED", "-----", "-----", "-----"];									var yPos = 50;			for (var j = 0; j < gateArray.length; j++){				var itemMC = new MovieClip();				itemMC.y = yPos*j;				for (var k = 0; k < gateArray[j].length; k++){					var _item = createTextField(xPos*k, 0, 40, 40);					_item.text = gateArray[j][k].toString();					_item.setTextFormat(messageFormat)					itemMC.addChild(_item);				}								gateListingMC.addChild(itemMC);							}						setContentMC(gateListingMC);									contentRegion.addChild(headerMC);														}								private function navUp(e:KeyboardEvent){			//trace(e.keyCode);			k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{					/*case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItem);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItem);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;*/											/*case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						var optionButton = currentItemOption;						optionButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;*/																case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{											/*case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						*/										}						}						override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}							}		}