package com.brilliantblue.panasonic.IFEdemo.newsInfo.headlines{	import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.utils.*;	import flash.net.*;	import caurina.transitions.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;		import com.brilliantblue.panasonic.IFEdemo.newsInfo.headlines.article.*;			public class view extends com.brilliantblue.panasonic.IFEdemo.view	{							//public var leftNav:Array = new Array('Africa','America', 'Asia','Europe','Oceania');			//public var _xmlLoader:URLLoader		 	public var _categoryData:XML;		 	public var _articleData:XML;		 	public var _categories:XMLList;			public var itemsTotal:Number;			public var CC_NewsHeadlineFormat:TextFormat;			public var CC_NewsSourceFormat:TextFormat;			public var CC_NewsBylineFormat:TextFormat;			public var CC_ReadMoreFormat:TextFormat;				public function view () 		{			//trace(_stage.stageWidth);						setLayout("3column");			adjustScreen();			setScreenTitle("headlines");						var weatherSidebar = new weatherSideBarMC;			weatherSidebar.x = 975;			weatherSidebar.y = 155;						addChild(weatherSidebar);															var newsTicker = new newsTickerMC;			newsTicker.x = 405;			newsTicker.y = 610;						addChild(newsTicker);								//first load the articles... then load the categories, then draw the screen			//loadArticles("xml/newsInfo/news_articles.xml");					CC_NewsHeadlineFormat = new TextFormat();			CC_NewsHeadlineFormat.font = "Century Gothic";			CC_NewsHeadlineFormat.kerning = true;			CC_NewsHeadlineFormat.bold = true;			CC_NewsHeadlineFormat.color = 0xFFFFFF;			CC_NewsHeadlineFormat.size = 18;			//CC_NewsHeadlineFormat.leading = 15;			CC_NewsHeadlineFormat.align = "left";						CC_NewsSourceFormat = new TextFormat();			CC_NewsSourceFormat.font = "Century Gothic";			CC_NewsSourceFormat.kerning = true;			CC_NewsSourceFormat.color = 0xFFFFFF;			CC_NewsSourceFormat.size = 13;			//CC_NewsSourceFormat.leading = 15;			CC_NewsSourceFormat.align = "left";						CC_NewsBylineFormat = new TextFormat();			CC_NewsBylineFormat.font = "Century Gothic";			CC_NewsBylineFormat.kerning = true;			CC_NewsBylineFormat.color = 0xFFFFFF;			CC_NewsBylineFormat.size = 14;			//CC_NewsBylineFormat.leading = 14;			CC_NewsBylineFormat.align = "left";						CC_ReadMoreFormat = new TextFormat();			CC_ReadMoreFormat.font = "Century Gothic";			CC_ReadMoreFormat.kerning = true;			CC_ReadMoreFormat.color = 0xFFFFFF;			CC_ReadMoreFormat.size = 14;			//CC_NewsBylineFormat.leading = 14;			CC_ReadMoreFormat.align = "left";																					this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);								}								private function onAdded(e:Event){			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);						//////////load data//////////			_categoryData = MovieClip(root)._newsCategories;			_articleData = MovieClip(root)._newsArticles;			drawScreen();		}						private function navUp(e:KeyboardEvent){			//trace(e.keyCode);						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{					case KeyType.LEFT://left arrow					trace(currentItemParent);					trace(currentItem);						if(currentItemGroup == "subNav"){							currentItem = currentItemParent;							currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));							totalItems = _categories.length();							currentItemGroup = "leftNav";						}						break;					case KeyType.RIGHT://right arrow										trace(currentItemParent);					trace(currentItem);						if(currentItemGroup == "leftNav"){							currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));							currentItemGroup = "subNav";						}						break;											case KeyType.UP://up arrow											if(currentItemGroup == "subNav"){													trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevSubItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));												itemIndex = Number(currentItem.extra.index);									if(itemIndex > 0){						_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						//_scroller.scroller.y -= Math.min(_scroller.scroller.y -_scroller.track.height/totalItems, 0);						_scroller.scroller.y = ((_scroller.track.height-_scroller.scroller.height)/totalItems)*(itemIndex-1);						_scroller.startScroll();						_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						}												currentItem = prevItem;						}else{						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = prevItem;						}						break;											case KeyType.DOWN://down arrow											if(currentItemGroup == "subNav"){						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextSubItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));																		itemIndex = Number(currentItem.extra.index);						if(itemIndex < totalItems-1){						_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						//_scroller.scroller.y += Math.max(_scroller.track.height/totalItems, _scroller.track.height);						_scroller.scroller.y = ((_scroller.track.height-_scroller.scroller.height)/totalItems)*(itemIndex+1);						_scroller.startScroll();						_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						}						currentItem = nextItem;						}else{						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = nextItem;						}						break;											case KeyType.OK://select current item						var optionButton = currentItem;						optionButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));												break;																case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{											/*case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						*/										}						}								override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}						private function getNextItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			var result;						if(index < Number(totalItems-1)){			result = parentMC.getChildByName("leftNavBtn_"+Number(index+1));			}else{			result = parentMC.getChildByName("leftNavBtn_0");			}			return result;						}					private function getPrevItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			trace(totalItems);			var result;			if(index > 0){			result = parentMC.getChildByName("leftNavBtn_"+Number(index-1));			}else{			result = parentMC.getChildByName("leftNavBtn_"+Number(totalItems-1));			}						return result;						}								private function getNextSubItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			var result;						if(index < Number(totalItems-1)){			result = parentMC.getChildByName("articleMC_"+Number(index+1));			}else{			result = _currentItem;			//result = parentMC.getChildByName("articleMC_0");			}			return result;						}					private function getPrevSubItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			trace(totalItems);			var result;			if(index > 0){			result = parentMC.getChildByName("articleMC_"+Number(index-1));			}else{			result = _currentItem;			//result = parentMC.getChildByName("articleMC_"+Number(totalItems-1));			}						return result;						}							private function getNextOption(_currentItem){				var result;												return result;			}					private function getPrevOption(_currentItem){				var result;																return result;							}													public function drawScreen():void 		{						_categories = _categoryData.items.*;			//trace(_categories);					 	totalItems = _categories.length();			//trace(leftNav.length);						var currentItemSet = false;					for(var i=0; i < totalItems;i++)			{							var category = _categories[i].name;			var categoryTitle = category.toUpperCase();			var leftNavBtn:MovieClip = new SelectButton();			//selectButton2.name = 'selectButton1';						leftNavBtn.setTitle(categoryTitle);			leftNavBtn.setClickEvent(loadSubMenu);			leftNavBtn.x = 110;			leftNavBtn.y = 165+75*i;			leftNavBtn.buttonWidth = 270;			leftNavBtn.name = "leftNavBtn_"+i;			leftNavBtn.extra.category = category;			leftNavBtn.extra.index = i;			//trace(navButton.name)												if(currentItemSet != true){				currentItem = leftNavBtn;				trace(currentItem.name);				currentItemSet = true;				}											addChild(leftNavBtn);																			}						//startMenu();			currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));			currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//trace(contentRegion.scrollArea.height);								}//end drawScreen				/*private function startMenu():void{				//trace('clicked');						var firstItem = getChildByName("navButton_0");						for(var j=0; j < itemsTotal;j++)			{				var selectButton = getChildByName("navButton_"+j);					selectButton.unSelectButton();			}			firstItem.selectButton();			//trace("weather"+e.target.name+"MC")			drawSubMenu(firstItem.extra.category);			//setContentMC(itemMovie);					}		*/										private function loadSubMenu(e:MouseEvent):void{				//trace('clicked');				for(var j=0; j < _categories.length();j++)			{				var selectButton = getChildByName("leftNavBtn_"+j);					selectButton.unSelectButton();			}			e.target.selectButton();			//trace("weather"+e.target.name+"MC")			drawSubMenu(e.target.extra.category);			//setContentMC(itemMovie);						currentItemParent = e.target;			currentItemGroup = "subNav";		}										private function drawSubMenu(category)		{			var _categoryXML:XMLList = _categories.(name == category);						var _articles:XMLList = _categoryXML.items.*;						var subMenuMC = new MovieClip();				subMenuMC.name = "subMenuMC";						var _newsArticles:XMLList = _articleData.*;												var articlesHolderMC = new MovieClip();						totalItems =  _articles.length();						var currentItemSet = false;			for(var i=0; i < totalItems;i++)			{							var newsArticle:XMLList = _newsArticles.(id == _articles[i].newsArticle.id);						//trace(newsArticle);									var articleHeadline = newsArticle.name;			var articleSource = newsArticle.source;			var articleByline = newsArticle.byline;									var articleMC = new MovieClip();				articleMC.y = 165*i;				articleMC.buttonMode = true;				articleMC.mouseChildren = false;				articleMC.name = "articleMC_"+i;				articleMC.extra = new Object();				articleMC.extra.articleID = _articles[i].newsArticle.id;				articleMC.extra.articleCat = _categoryXML.name;				articleMC.extra.index = i;									var articleHeadlineTextClip = new TextField();							articleHeadlineTextClip.width = 440;				articleHeadlineTextClip.text = articleHeadline.toString().toUpperCase();				articleHeadlineTextClip.x = 5;				articleHeadlineTextClip.y = 5;				articleHeadlineTextClip.wordWrap = true;				articleHeadlineTextClip.autoSize = TextFieldAutoSize.LEFT;				articleHeadlineTextClip.embedFonts = true;				articleHeadlineTextClip.selectable = false; 				if(articleHeadlineTextClip.length > 40){						articleHeadlineTextClip.replaceText(40, 1000, "...")						}				articleHeadlineTextClip.setTextFormat(CC_NewsHeadlineFormat);									var articleSourceTextClip = new TextField();				articleSourceTextClip.width = 440;				articleSourceTextClip.text = articleSource;				articleSourceTextClip.x = 5;				articleSourceTextClip.y = 30;				articleSourceTextClip.wordWrap = true;				articleSourceTextClip.autoSize = TextFieldAutoSize.LEFT;				articleSourceTextClip.embedFonts = true;				articleSourceTextClip.selectable = false; 				articleSourceTextClip.setTextFormat(CC_NewsSourceFormat);									var articleBylineTextClip = new TextField();				articleBylineTextClip.width = 440;				articleBylineTextClip.text = articleByline;				articleBylineTextClip.x = 5;				articleBylineTextClip.y = 50;				articleBylineTextClip.wordWrap = true;				articleBylineTextClip.multiline = true;				articleBylineTextClip.autoSize = TextFieldAutoSize.LEFT;				articleBylineTextClip.embedFonts = true;				articleBylineTextClip.selectable = false; 				if(articleBylineTextClip.length > 200){						articleBylineTextClip.replaceText(200, 2000, "...")						}				articleBylineTextClip.setTextFormat(CC_NewsBylineFormat);									var readMoreTextClip = new TextField();				readMoreTextClip.text = "Read More >";				readMoreTextClip.selectable = false; 				readMoreTextClip.x = 5; 				readMoreTextClip.y = 130;				readMoreTextClip.setTextFormat(CC_ReadMoreFormat);																var backgroundClip = new MovieClip();				backgroundClip.name = "background";				backgroundClip.graphics.lineStyle(2, 0x121266, 0.1);				backgroundClip.graphics.beginFill(0x121266, 0.2);				backgroundClip.graphics.drawRoundRect(0,0,450,155,20,20);				backgroundClip.graphics.endFill();				backgroundClip.alpha = 0;				//readMoreButton.graphics. = 						articleMC.addEventListener (MouseEvent.CLICK, loadNewsContent,false,0,true);			articleMC.addEventListener (MouseEvent.MOUSE_OVER, newsOver,false,0,true);			articleMC.addEventListener (MouseEvent.MOUSE_OUT, newsOut,false,0,true);									articleMC.addChild(backgroundClip);			articleMC.addChild(articleHeadlineTextClip);			articleMC.addChild(articleSourceTextClip);			articleMC.addChild(articleBylineTextClip);			articleMC.addChild(readMoreTextClip);									if(currentItemSet != true){				currentItem = articleMC;				trace(currentItem.name);				currentItemSet = true;				}						articlesHolderMC.addChild(articleMC);									/*						var cityTitle = city.toUpperCase();			var subNavButton:MovieClip = new MenuButton();			//selectButton2.name = 'selectButton1';						subNavButton.setTitle(cityTitle);			subNavButton.setClickEvent(loadScreenContent);			subNavButton.x = 0;			subNavButton.y = 0+50*i;			subNavButton.buttonWidth = 450;			subNavButton.name = "subNavButton_"+i;			subNavButton.extra.cities = _cities;			subNavButton.extra.city = city;			//trace(navButton.name)						subMenuMC.addChild(subNavButton);			*/													}														setContentMC(articlesHolderMC);						try{			var scrollBar = contentRegion.getChildByName("sb");			scrollBar.getChildByName("scroller").y = 0;						}catch(e:Error){			}									currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));											}						private function newsOver(e:MouseEvent):void		{			var backgroundMC = e.target.getChildByName("background");			backgroundMC.alpha = 1;		}				private function newsOut(e:MouseEvent):void		{				var backgroundMC = e.target.getChildByName("background");			backgroundMC.alpha = 0;		}					/*	private function loadNewsContent(e:MouseEvent)//not final		{						var parentMC = this.parent;			//parentMC.x = -1280;						Tweener.addTween(parentMC,{x:-1280,time:1, transition:"easeOutBack"});						var DetailScreen = parentMC.getChildByName("DetailScreen");						//DetailScreen.ID = e.target.extra.articleID;			DetailScreen.setScreenTitle(e.target.extra.articleCat);			DetailScreen.drawScreen(e.target.extra.articleID);											}*/				private function loadNewsContent(e:MouseEvent){			var parentMC = this.parent;			//screenShutDown();						//trace("Load ForeCast - 1");			var myView = new com.brilliantblue.panasonic.IFEdemo.newsInfo.headlines.article.view();						myView.setScreenTitle(e.target.extra.articleCat);			myView.setArticleID(e.target.extra.articleID);						//trace(this.parent.name);			myView.x = 1280;//at lest... maybe further right			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{							 x: -1280, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();													//trace("Unload Weather - 2");										parentMC.addChild(myView);			Tweener.addTween(myView,{x: 0, time: 1, delay: 0.25 });										}, 							 onCompleteScope: this});								}																				}//end		}