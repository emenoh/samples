package com.brilliantblue.panasonic.IFEdemo.newsInfo.weather{	import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.utils.*;	import flash.net.*;	import caurina.transitions.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;		import com.brilliantblue.panasonic.IFEdemo.newsInfo.weather.forecast.*;			public class view extends com.brilliantblue.panasonic.IFEdemo.view	{							//public var leftNav:Array = new Array('Africa','America', 'Asia','Europe','Oceania');		private var _xmlLoader:URLLoader	 	private var _xmlData:XML;	 	private var _regions:XMLList;		private var itemsTotal:Number;		private var _currentCity;				public function view () 		{			//trace(_stage.stageWidth);						setLayout("3column");			adjustScreen();			setScreenTitle("weather");						var weatherSidebar = new weatherSideBarMC;			weatherSidebar.x = 975;			weatherSidebar.y = 155;						addChild(weatherSidebar);															var newsTicker = new newsTickerMC;			newsTicker.x = 405;			newsTicker.y = 610;						addChild(newsTicker);													//loadXML("xml/newsInfo/news_weather.xml");								this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);								}								private function onAdded(e:Event){			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);			_xmlData = MovieClip(root)._newsWeather;			drawScreen();					}								private function navUp(e:KeyboardEvent){			//trace(e.keyCode);						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{					case KeyType.LEFT://left arrow					trace(currentItemParent);					trace(currentItem);						if(currentItemGroup == "subNav"){							currentItem = currentItemParent;							currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));							totalItems = _regions.length();							currentItemGroup = "leftNav";						}						break;					case KeyType.RIGHT://right arrow										trace(currentItemParent);					trace(currentItem);						if(currentItemGroup == "leftNav"){							currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));							currentItemGroup = "subNav";						}						break;											case KeyType.UP://up arrow											if(currentItemGroup == "subNav"){																				itemIndex = Number(currentItem.extra.index);																					trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevSubItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));												if(itemIndex > 0){						_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						//_scroller.scroller.y -= Math.min(_scroller.scroller.y -_scroller.track.height/totalItems, 0);						_scroller.scroller.y = ((_scroller.track.height-_scroller.scroller.height)/totalItems)*(itemIndex-1);						_scroller.startScroll();						_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						}												currentItem = prevItem;						}else{						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = prevItem;						}						break;											case KeyType.DOWN://down arrow											if(currentItemGroup == "subNav"){						trace(currentItem.name);												currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextSubItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));												itemIndex = Number(currentItem.extra.index);						if(itemIndex < totalItems-1){						_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						//_scroller.scroller.y += Math.max(_scroller.track.height/totalItems, _scroller.track.height);						_scroller.scroller.y = ((_scroller.track.height-_scroller.scroller.height)/totalItems)*(itemIndex+1);						_scroller.startScroll();						_scroller.scroller.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						}																								currentItem = nextItem;						}else{						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = nextItem;						}						break;											case KeyType.OK://select current item						var optionButton = currentItem;						optionButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));												break;																case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{											/*case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						*/										}						}						override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}								private function getNextItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			var result;						if(index < Number(totalItems-1)){			result = parentMC.getChildByName("leftNavBtn_"+Number(index+1));			}else{			result = parentMC.getChildByName("leftNavBtn_0");			}			return result;						}					private function getPrevItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			trace(totalItems);			var result;			if(index > 0){			result = parentMC.getChildByName("leftNavBtn_"+Number(index-1));			}else{			result = parentMC.getChildByName("leftNavBtn_"+Number(totalItems-1));			}						return result;						}								private function getNextSubItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			var result;						if(index < Number(totalItems-1)){			result = parentMC.getChildByName("subNavButton_"+Number(index+1));			}else{			result = parentMC.getChildByName("subNavButton_0");			}			return result;						}					private function getPrevSubItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			trace(totalItems);			var result;			if(index > 0){			result = parentMC.getChildByName("subNavButton_"+Number(index-1));			}else{			result = parentMC.getChildByName("subNavButton_"+Number(totalItems-1));			}						return result;						}							private function getNextOption(_currentItem){				var result;												return result;			}					private function getPrevOption(_currentItem){				var result;																return result;							}																	public function drawScreen():void 		{						_regions = _xmlData.items.*;			//trace(_regions);					 	totalItems = _regions.length();			//trace(leftNav.length);								var currentItemSet = false;						for(var i=0; i < totalItems;i++)			{							var region = _regions[i].name;			var regionTitle = region.toUpperCase();			var leftNavBtn:MovieClip = new SelectButton();			//selectButton2.name = 'selectButton1';						leftNavBtn.setTitle(regionTitle);			leftNavBtn.setClickEvent(loadSubMenu);			leftNavBtn.x = 110;			leftNavBtn.y = 165+75*i;			leftNavBtn.buttonWidth = 270;			leftNavBtn.name = "leftNavBtn_"+i;			leftNavBtn.extra.region = region;			leftNavBtn.extra.index = i;			//trace(navButton.name)									if(currentItemSet != true){				currentItem = leftNavBtn;				trace(currentItem.name);				currentItemSet = true;				}											addChild(leftNavBtn);																			}						//startMenu();			currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));			currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//trace(contentRegion.scrollArea.height);								}//end drawScreen														private function loadSubMenu(e:MouseEvent):void{				//trace('clicked');				for(var i=0; i < _regions.length();i++)			{				var selectButton = getChildByName("leftNavBtn_"+i);					selectButton.unSelectButton();			}			e.target.selectButton();			//trace("weather"+e.target.name+"MC")			drawSubMenu(e.target.extra.region);			//setContentMC(itemMovie);						currentItemParent = e.target;			currentItemGroup = "subNav";		}										private function drawSubMenu(region)		{			var _regionXML:XMLList = _regions.(name == region);						var _cities:XMLList = _regionXML.items.*;						//trace(_cities);						var subMenuMC = new MovieClip();				subMenuMC.name = "subMenuMC";				subMenuMC.y = 10;						totalItems = _cities.length();									var currentItemSet = false;			for(var i=0; i < totalItems;i++)			{							var city = _cities[i].name;			var cityTitle = city.toUpperCase();			var subNavButton:MovieClip = new MenuButton();			//selectButton2.name = 'selectButton1';						subNavButton.setTitle(cityTitle);			subNavButton.setClickEvent(loadScreenContent);			subNavButton.x = 0;			subNavButton.y = 0+50*i;			subNavButton.buttonWidth = 450;			subNavButton.name = "subNavButton_"+i;			subNavButton.extra.cities = _cities;			subNavButton.extra.city = city;			subNavButton.extra.index = i;			//trace(navButton.name)						if(currentItemSet != true){				currentItem = subNavButton;				trace(currentItem.name);				currentItemSet = true;				}						subMenuMC.addChild(subNavButton);																}											setContentMC(subMenuMC);						try{			var scrollBar = contentRegion.getChildByName("sb");			scrollBar.getChildByName("scroller").y = 0;						}catch(e:Error){			}												currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));		}						private function loadScreenContent(e:MouseEvent)//not final		{						var _cities:XMLList = e.target.extra.cities			var _city = _cities.(name == e.target.extra.city);						var p = e.target.parent;						for(var j=0; j < _cities.length();j++)			{				var subNavButton = p.getChildByName("subNavButton_"+j);					subNavButton.unSelectButton();			}						e.target.selectButton();						_currentCity = e.target.extra.city;												loadForeCast();					}				private function loadForeCast(){			var parentMC = this.parent;			screenShutDown();						//trace("Load ForeCast - 1");			var myView = new com.brilliantblue.panasonic.IFEdemo.newsInfo.weather.forecast.view();						myView.setScreenTitle(_currentCity);						//trace(this.parent.name);			myView.x = 1280;//at lest... maybe further right			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{							 x: -1280, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();													//trace("Unload Weather - 2");										parentMC.addChild(myView);			Tweener.addTween(myView,{x: 0, time: 1, delay: 0.25 });										}, 							 onCompleteScope: this});								}							}//end		}