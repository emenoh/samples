package com.brilliantblue.panasonic.IFEdemo.common.key{		import flash.net.LocalConnection;	import flash.ui.Keyboard;		import com.brilliantblue.panasonic.IFEdemo.common.key.KeyType;		public class KeyHandler {		//private var KeyType;	private static var instance : KeyHandler;	private var sendKeycodes:Boolean;	private var numerals:Array;	private var numeralsShifted:Array;	private var punctuation:Array;	private var punctuationShifted:Array;		private var keyDelay:Number;	private var isDelayed:Boolean;	private var delayId:Number;		private var shiftOn:Boolean;	private var _capsOn:Boolean;		private var lc_send:LocalConnection;	private var lc_receive:LocalConnection;	private var connectInterval:Number;		public function KeyHandler () {		sendKeycodes = true;				//stage.addEventListener(KeyboardEvent.KEY_DOWN, this);			}	/*public function shiftCapsState(k):Boolean	{		//var k:Number;				k = Key.getCode();				if(k >= 65 && k <= 90)		{			return Key.isDown(Key.SHIFT) != Key.isToggled(Key.CAPSLOCK);		}		else		{			return Key.isDown(Key.SHIFT);		}	}			public function shiftOn(k):Boolean	{		if(sendKeycodes == true)		{			return _shiftOn;		}		else		{			return Key.isDown(Key.SHIFT);		}	}		public function capsOn(k):Boolean	{		if(sendKeycodes == true)		{			return _shiftOn;		}		else		{			return Key.isDown(Key.SHIFT) != Key.isToggled(Key.CAPSLOCK);		}	}		*/	public function convertKeyCodeToKey(n:Number, _shift):String		{						if(_shift == true){				shiftOn = true;			}else{				shiftOn = false;			}									var k:String;						numerals = new Array();			numerals[48] = numerals[96] = "0";			numerals[49] = numerals[97] = "1";			numerals[50] = numerals[98] = "2";			numerals[51] = numerals[99] = "3";			numerals[52] = numerals[100] = "4";			numerals[53] = numerals[101] = "5";			numerals[54] = numerals[102] = "6";			numerals[55] = numerals[103] = "7";			numerals[56] = numerals[104] = "8";			numerals[57] = numerals[105] = "9";						numeralsShifted = new Array();			numeralsShifted[48] = numeralsShifted[96] = ")";			numeralsShifted[49] = numeralsShifted[97] = "!";			numeralsShifted[50] = numeralsShifted[98] = "@";			numeralsShifted[51] = numeralsShifted[99] = "#";			numeralsShifted[52] = numeralsShifted[100] = "$";			numeralsShifted[53] = numeralsShifted[101] = "%";			numeralsShifted[54] = numeralsShifted[102] = "^";			numeralsShifted[55] = numeralsShifted[103] = "&";			numeralsShifted[56] = numeralsShifted[104] = "*";			numeralsShifted[57] = numeralsShifted[105] = "(";						punctuation = new Array();						punctuation[106] = "*";			punctuation[107] = "+";			punctuation[109] = "-";			punctuation[110] = ".";			punctuation[111] = "/";			punctuation[186] = ";";			punctuation[187] = "=";			punctuation[188] = ",";			punctuation[189] = "-";			punctuation[190] = ".";			punctuation[191] = "/";			punctuation[192] = "`";			punctuation[219] = "[";			punctuation[220] = "\\";			punctuation[221] = "]";			punctuation[222] = "'";						punctuationShifted = new Array();			punctuationShifted[106] = "*";			punctuationShifted[107] = "+";			punctuationShifted[109] = "-";			punctuationShifted[110] = "";			punctuationShifted[111] = "/";				punctuationShifted[186] = ":";			punctuationShifted[187] = "+";			punctuationShifted[188] = "<";			punctuationShifted[189] = "_";			punctuationShifted[190] = ">";			punctuationShifted[191] = "?";			punctuationShifted[192] = "~";			punctuationShifted[219] = "{";			punctuationShifted[220] = "|";			punctuationShifted[221] = "}";			punctuationShifted[222] = "\"";															//trace("KEY: " + n);			switch(n)			{				case 166: // remote back				case 36:  // keypad home												case 27:  // escape				case 36:  // "i"				case 35:  // on/off				case 8:   // backspace					k = KeyType.HOME;				break;	//			case 27:  // escape	//				k = KeyType.ESC;	//			break;				case 8:   // backspace					k = KeyType.BACKSPACE;				break;				case 27:  // escape				case 36:  // "i"				case 35:  // on/off					if(shiftOn == true && n == 27)					{						k = KeyType.ESC;					}					else					{						k = KeyType.BACK;					}									break;								case 37:				case 112:	//F1				case 118:	//F7 - to work in IE					k = KeyType.LEFT;				break;				case 38:				case 114:	//F3					k = KeyType.UP;				break;				case 39:				case 113:	//F2					k = KeyType.RIGHT;				break;				case 40:				case 115:	//F4					k = KeyType.DOWN;				break;				case 13:  // enter				case 12:  // keypad 5				case 116:  // F5					k = KeyType.OK;				break;								case 33:  // pageUp					k = KeyType.CHANNEL_UP;				break;				case 34:  // pageDown					k = KeyType.CHANNEL_DOWN;				break;				case 107:  // +					k = KeyType.VOLUME_UP;				break;				case 109:  // 					k = KeyType.VOLUME_DOWN;				break;				case 45:  // INS					k = KeyType.PLAY_PAUSE;				break;				case 46:  // DEL					k = KeyType.STOP;				break;				case 220:  // \					k = KeyType.REWIND;				break;				case 192:  // `					k = KeyType.FAST_FORWARD;				break;								case 111:  // /					k = KeyType.ATTENDANT;				break;				case 117:  // F6					k = KeyType.CANCEL_ATTENDANT;				break;				case 106:  // *					k = KeyType.LIGHT;				break;				case 9:					if(shiftOn == true)					{						k = KeyType.SHIFTTAB;						}					else					{						k = KeyType.TAB;					}				break;				case 65:  // alphas				case 66:				case 67:				case 68:				case 69:				case 70:				case 71:				case 72:				case 73:				case 74:				case 75:				case 76:				case 77:				case 78:				case 79:				case 80:				case 81:				case 82:				case 83:				case 84:				case 85:				case 86:				case 87:				case 88:				case 89:				case 90:					//if(capsOn != true)					//{						//n += 32;					//}					k = String.fromCharCode(n);				break;				case 32:  // space					k = " ";				break;				case 48:  // numerals				case 49:				case 50:				case 51:				case 52:				case 53:				case 54:				case 55:				case 56:				case 57:				case 96:				case 97:				case 98:				case 99:				case 100:				case 101:				case 102:				case 103:				case 104:				case 105:					if(shiftOn == true)					{						k = numeralsShifted[n];						}					else					{						k = numerals[n];					}					break;				case 106: // keypad / 				case 107: // keypad +				case 109: // keypad -				case 110: // keypad .				case 111: // keypad /				case 186: // ;				case 187: // +				case 188: // ,				case 189: // -				case 190: // .				case 191: // /				case 192: // `				case 219: // [				case 220: // \					case 221: // ]				case 222: // '					if(shiftOn == true)					{						k = punctuationShifted[n];						}					else					{						k = punctuation[n];					}				break;			}					return k;		}			}}