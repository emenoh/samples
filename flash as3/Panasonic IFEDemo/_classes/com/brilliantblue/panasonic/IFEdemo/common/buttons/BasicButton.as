package com.brilliantblue.panasonic.IFEdemo.common.buttons{		import caurina.transitions.*;	import flash.display.*;	import flash.text.*;	import flash.events.*;	import flash.geom.*;	import flash.utils.*;				public class BasicButton extends flash.display.MovieClip	{		public var buttonTitle;		public var onMouseClickEvent;				public var Glow;		public var Fill;		public var BBack;		public var BLabel;		public var doubleCheck;		public var extra:Object = new Object();		private var clickEvent;						public function BasicButton () 		{						//trace(this.buttonTitle);			//testing			Glow = this.glow_bg;			Fill = this.fill_btn;			BBack = this.btn_bg;			BLabel = this.btn_label;			Glow.alpha = 0;			this.glow_bg.alpha = 0;			this.fill_btn.alpha = 0;			this.buttonMode = true;			this.mouseChildren = false;			this.buttonWidth = 0;									this.y = 606;						this.addEventListener (MouseEvent.MOUSE_DOWN, onMouseDownEvent,false,0,true);			this.addEventListener (MouseEvent.MOUSE_OVER, onMouseOverEvent,false,0,true);			this.addEventListener (MouseEvent.MOUSE_UP, onMouseUpEvent,false,0,true);			this.addEventListener (MouseEvent.MOUSE_OUT, onMouseOutEvent,false,0,true);						//setTitle("SAMPLE TITLE");			//setClickEvent(mouseClickEvent);								addEventListener(Event.REMOVED_FROM_STAGE, onRemoved,false,0,true);		}						private function onRemoved(e:Event){									this.removeEventListener (MouseEvent.MOUSE_DOWN, onMouseDownEvent);			this.removeEventListener (MouseEvent.MOUSE_OVER, onMouseOverEvent);			this.removeEventListener (MouseEvent.MOUSE_UP, onMouseUpEvent);			this.removeEventListener (MouseEvent.MOUSE_OUT, onMouseOutEvent);			//removeClickEvent();			//this.removeEventListener (MouseEvent.CLICK, onMouseClickEvent);			//can't do this without using a janitor class of some sort, - later...					}								public function setTitle(buttonTitle)		{			this.buttonTitle = buttonTitle;			//trace("testing");			this.btn_label.text = buttonTitle.toUpperCase();					}				public function setClickEvent(onMouseClickEvent)		{			clickEvent = onMouseClickEvent;			this.addEventListener (MouseEvent.CLICK, onMouseClickEvent,false,0,true);		}				public function removeClickEvent()		{			this.removeEventListener (MouseEvent.CLICK, clickEvent);		}								private function onMouseDownEvent(evt:MouseEvent)		{			Tweener.addTween(Glow, {alpha:1, time:1, transition: "easeInOutStrong"});		}				private function onMouseOverEvent(evt:MouseEvent)		{			Tweener.addTween(Glow, {alpha:1, time:1, transition: "easeInOutStrong"});		}				private function onMouseOutEvent(evt:MouseEvent)		{			Tweener.addTween(Glow, {alpha:0, time:1, transition: "easeInOutStrong"});		}						private function onMouseUpEvent(evt:MouseEvent)		{			Tweener.addTween(Fill, {alpha:1, time:.5, transition: "easeInOutStrong"});						doubleCheck = setInterval(Catinit, 250);		}				public function mouseClickEvent(evt:MouseEvent)		{			//default event			trace("select clicked");		}						public function Catinit()		{			Tweener.addTween(Glow, {alpha:0, time:2, transition: "easeOutQuad"});			Tweener.addTween(Fill, {alpha:0, time:2, transition: "easeOutQuad"});			clearInterval(doubleCheck);		}				public function set XPos(position)		{			switch(position){				case "LEFT":					this.x = 405;					break;				case "CENTER":					this.x = 662.5;					break;				case "RIGHT":					this.x = 920;					break;							}		}				public function set buttonWidth(w)		{						if(w == 0){			//trace(btn_bg.scale9Grid);						BLabel.width = 240;			BLabel.autoSize = TextFieldAutoSize.CENTER;			BBack.width = 240;			Fill.width = 240;			Glow.width = 240;			//trace(btn_label.width);						}else{			BLabel.width = w;			BLabel.autoSize = TextFieldAutoSize.CENTER;			BBack.width = w			Fill.width = w			Glow.width = w							}								}					}		}