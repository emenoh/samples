package com.brilliantblue.panasonic.IFEdemo.common.scroller{			import caurina.transitions.*;	import flash.display.*;	import flash.events.*;	import flash.geom.*;	public class Scrollbar extends MovieClip {		private var target:MovieClip;		private var top:Number;		private var bottom:Number;		private var dragBot:Number;		private var range:Number;		private var ratio:Number;		private var sPos:Number;		private var sRect:Rectangle;		private var ctrl:Number;		private var trans:String;		private var timing:Number;		private var isUp:Boolean;		private var isDown:Boolean;		private var isArrow:Boolean;		private var arrowMove:Number;		private var upArrowHt:Number;		private var downArrowHt:Number;		private var sBuffer:Number;		private var scrollerPercent:Number;		public function Scrollbar():void {			scroller.addEventListener(MouseEvent.MOUSE_DOWN, dragScroll,false,0,true);			scroller.addEventListener(MouseEvent.MOUSE_UP, stopScroll,false,0,true);			//scroller.addEventListener(MouseEvent.MOUSE_OUT, stopScroll);										addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);						addEventListener(Event.REMOVED_FROM_STAGE, onRemoved,false,0,true);									//trace("constructor?")		}				public function onAdded(e:Event){			//trace("onadded?")			stage.addEventListener(MouseEvent.MOUSE_UP, stopScroll,false,0,true);						stage.addEventListener(MouseEvent.MOUSE_WHEEL,mouseWheelHandler,false,0,true);									removeEventListener(Event.ADDED_TO_STAGE, onAdded);					}				public function onRemoved(e:Event){			//trace("onremoved?")			removeEventListener(Event.ENTER_FRAME,myOnEnterFrame);								stage.removeEventListener(MouseEvent.MOUSE_WHEEL,mouseWheelHandler);				upArrow.removeEventListener(Event.ENTER_FRAME, upArrowHandler);				upArrow.removeEventListener(MouseEvent.MOUSE_DOWN, upScroll);				//				downArrow.removeEventListener(Event.ENTER_FRAME, downArrowHandler);				downArrow.removeEventListener(MouseEvent.MOUSE_DOWN, downScroll);			//stage.removeEventListener(MouseEvent.MOUSE_UP, stopScroll);						//stage.removeEventListener(MouseEvent.MOUSE_WHEEL,mouseWheelHandler);			scroller.removeEventListener(MouseEvent.MOUSE_DOWN, dragScroll);						stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveScroll);			downArrow.removeEventListener(MouseEvent.MOUSE_UP, stopScroll);			upArrow.removeEventListener(MouseEvent.MOUSE_UP, stopScroll);			scroller.removeEventListener(MouseEvent.MOUSE_UP, stopScroll);				stage.removeEventListener(MouseEvent.MOUSE_UP, stopScroll);							removeEventListener(Event.ADDED_TO_STAGE, onRemoved);		}										//		public function init(t:MovieClip, tr:String,tt:Number,sa:Boolean,b:Number):void {			target = t;			trans = tr;			timing = tt;			isArrow = sa;			sBuffer = 1;												//added track button scaling in proportion to the scrolled content/scroll area ratio						//scroller.height = 200;			//			upArrowHt = upArrow.height;			downArrowHt = downArrow.height;			if (isArrow) {				top = scroller.y;				dragBot = (scroller.y + track.height) - scroller.height;				bottom = track.height - (scroller.height);//modified to accomodate new dynamic width/height added - 40			} else {				top = scroller.y;				dragBot = (scroller.y + track.height) - scroller.height;				bottom = track.height - (scroller.height);//modified to accomodate new dynamic width/height added - 40				upArrowHt = 0;				downArrowHt = 0;				removeChild(upArrow);				removeChild(downArrow);			}			range = bottom - top;			sRect = new Rectangle(0,top,0,dragBot);			ctrl = target.y;			//set Mask			isUp = false;			isDown = false;			arrowMove = 10;						if (isArrow) {				upArrow.addEventListener(Event.ENTER_FRAME, upArrowHandler,false,0,true);				upArrow.addEventListener(MouseEvent.MOUSE_DOWN, upScroll,false,0,true);				upArrow.addEventListener(MouseEvent.MOUSE_UP, stopScroll,false,0,true);				//				downArrow.addEventListener(Event.ENTER_FRAME, downArrowHandler,false,0,true);				downArrow.addEventListener(MouseEvent.MOUSE_DOWN, downScroll,false,0,true);				downArrow.addEventListener(MouseEvent.MOUSE_UP, stopScroll,false,0,true);			}												var square:Sprite = new Sprite();			square.graphics.beginFill(0xFF0000);			square.graphics.drawRect(target.x, target.y, target.width+5, track.height);//modified to accomodate new dynamic width/height added - 40			parent.addChild(square);						target.mask = square;									addEventListener(Event.ENTER_FRAME,myOnEnterFrame)		}		public function upScroll(event:MouseEvent):void {			isUp = true;		}		public function downScroll(event:MouseEvent):void {			isDown = true;		}		public function upArrowHandler(event:Event):void {			if (isUp) {				if (scroller.y > top) {					scroller.y-=arrowMove;					if (scroller.y < top) {						scroller.y = top;					}					startScroll();				}			}		}		//		public function downArrowHandler(event:Event):void {			if (isDown) {				if (scroller.y < dragBot) {					scroller.y+=arrowMove;					if (scroller.y > dragBot) {						scroller.y = dragBot;					}					startScroll();				}			}		}		//		public function dragScroll(event:MouseEvent):void {						scroller.startDrag(false, sRect);			stage.addEventListener(MouseEvent.MOUSE_MOVE, moveScroll);		}		//		public function mouseWheelHandler(event:MouseEvent):void {			if (event.delta < 0) {				if (scroller.y < dragBot) {					scroller.y-=(event.delta*2);					if (scroller.y > dragBot) {						scroller.y = dragBot;					}					startScroll();				}			} else {				if (scroller.y > top) {					scroller.y-=(event.delta*2);					if (scroller.y < top) {						scroller.y = top;					}					startScroll();				}			}		}		//		public function stopScroll(event:MouseEvent):void {			try{			isUp = false;			isDown = false;			scroller.stopDrag();			stage.removeEventListener(MouseEvent.MOUSE_MOVE, moveScroll);			}catch(e:Error){			}		}		//		public function moveScroll(event:MouseEvent):void {			startScroll();		}		public function startScroll():void {			try{			ratio = (target.height - range)/range;			sPos = (scroller.y * ratio)-ctrl;						Tweener.addTween(target, {y:-sPos, time:timing, transition: "EaseInOutStrong"});			}catch(e:Error){							}		}				public function destroyScroller():void {								}				public function restart(){					}				public function myOnEnterFrame(e:Event){			if (target.height < track.height) {							this.alpha =  0;				//scroller.visible = false;							}else{								if(scrollerPercent != track.height/target.height){								scrollerPercent = track.height/target.height;				//scroller.height = track.height*scrollerPercent;																	dragBot = (scroller.y + track.height) - scroller.height;						bottom = track.height - (scroller.height);//modified to accomodate new dynamic width/height added - 40								range = bottom - top;						sRect = new Rectangle(0,top,0,dragBot);										}				this.alpha =  1;				//scroller.visible = true;			}		}					}}