package com.brilliantblue.panasonic.IFEdemo.connect.smsEmail{	import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.utils.*    import fl.controls.TextArea;    import fl.events.ComponentEvent;	import flash.filters.*;	import caurina.transitions.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;			public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				private var myMovieClip:MovieClip;		private var myTextField:TextField;		private var myTextFormat:TextFormat;		private var leftNav:Array;		private var headerMC:MovieClip;		private var sendBtn:MovieClip;		private var keyboardBtn:MovieClip;		private var cancelBtn:MovieClip;		private var _fromText:String;		private var _toText:String;		private var _subjectText:String;		private var _bodyText:String;		private var _to:TextField;		private var _subject:TextField;		private var _body:TextField;		private var inboxMessages:XML;		private var sentMessages:XML;		private var creditAccount:XML;		private var _sendActive:Boolean = false;		private var _sendActivate:Boolean = false;		private var _keyboardMC:MovieClip;		private var myKeyboard:MovieClip;		private var _currentTextTarget;						public function view () 		{			setLayout('2column');			setScreenTitle('SMS / EMAIL');			adjustScreen();												_keyboardMC = new MovieClip();			_keyboardMC.visible = false;			_keyboardMC.x = 190;			_keyboardMC.y = 400;			_keyboardMC.graphics.lineStyle(2,0xFFFFFF,1);			_keyboardMC.graphics.beginFill(0x000000, .9);			_keyboardMC.graphics.drawRoundRect(0,0,900,300,30);			_keyboardMC.graphics.endFill();						myKeyboard = new keyboardMC();			myKeyboard.x = 7;			myKeyboard.y = 14;			_keyboardMC.addChild(myKeyboard);			_keyboardMC.addEventListener(MouseEvent.MOUSE_UP, hideKeyboard, false, 0, true);			_keyboardMC.buttonMode = true;			_keyboardMC.mouseChildren = false;									 								this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);					}				private function hideKeyboard(e:MouseEvent){			_keyboardMC.visible = false;		}				private function onAdded(e:Event){			inboxMessages = MovieClip(root)._inboxMessages;			sentMessages = MovieClip(root)._sentMessages;			creditAccount = MovieClip(root)._creditAccount;			_fromText = creditAccount.firstName + " " +creditAccount.lastName;			//trace(creditAccount.tabLimit);						drawScreen();									addChild(_keyboardMC);				            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);						removeEventListener(Event.ADDED_TO_STAGE, onAdded);		}										private function navUp(e:KeyboardEvent){			//trace(e.keyCode);						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{					/*case KeyType.LEFT://left arrow					trace(currentItemParent);					trace(currentItem);						if(currentItemGroup == "subNav"){							currentItem = currentItemParent;							currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));							totalItems = leftNav.length;							currentItemGroup = "leftNav";						}						break;					case KeyType.RIGHT://right arrow										trace(currentItemParent);					trace(currentItem);						if(currentItemGroup == "leftNav"){							currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));							currentItemGroup = "subNav";						}						break;*/											case KeyType.UP://up arrow											if(currentItemGroup == "subNav"){													trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevSubItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = prevItem;						}else{													_sendActive = false;						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = prevItem;						}						break;											case KeyType.DOWN://down arrow											if(currentItemGroup == "subNav"){						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextSubItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = nextItem;						}else{													_sendActive = false;						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = nextItem;						}						break;											case KeyType.OK://select current item						//keyboard = true;						//trace(currentItem.name);						//if(currentItem != currentItemParent){													var optionButton;						trace(_sendActive);							if(_sendActive == true){								optionButton = sendBtn;								_sendActive = false;							}else{								optionButton = currentItem;							}							optionButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;																case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{											/*case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						*/										}						}										private function drawScreen(){						leftNav = new Array('inbox','new_email', 'new_sms','sent');			//trace(leftNav.length);			var currentItemSet = false;			totalItems = leftNav.length;						for(var i = 0; i < totalItems; i++){				var titleText = leftNav[i].toString();								var r:RegExp = /_/;				var s:String = titleText;				function doStuff(R:RegExp,S:String):String{				while((R.test(S))!=false){				S=S.replace(R, " ")				//trace(S)				}				return S				}				titleText = doStuff(r,s);								var leftNavBtn = new SelectButton();				leftNavBtn.setTitle(titleText);				leftNavBtn.x = 115;				leftNavBtn.y = 166+(i*80);				leftNavBtn.buttonWidth = 250;				leftNavBtn.name = "leftNavBtn_"+i;				leftNavBtn.setClickEvent(this[leftNav[i]+"_CLICK"]);				//leftNavBtn.tabIndex = i;				leftNavBtn.extra.index = i;								if(currentItemSet != true){				currentItem = leftNavBtn;				trace(currentItem.name);				currentItemSet = true;				}								addChild(leftNavBtn);				}										keyboardBtn = new BasicButton();				keyboardBtn.setTitle("keyboard");				keyboardBtn.XPos = "RIGHT";				keyboardBtn.name = "keyboardBtn";				keyboardBtn.setClickEvent(showKeyboard);						sendBtn = new BasicButton();				sendBtn.setTitle("SEND");				sendBtn.XPos = "CENTER";				sendBtn.name = "sendBtn";				sendBtn.setClickEvent(sendReply);				sendBtn.tabIndex = 4;							addChild(sendBtn);				addChild(keyboardBtn);										currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));			currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));					}				private function inbox_CLICK(e:MouseEvent){						_sendActive = false;			loadInBox();			for(var i=0; i < leftNav.length;i++)			{				var selectButton = getChildByName("leftNavBtn_"+i);					selectButton.unSelectButton();			}			e.target.selectButton();		}				private function inbox_SOFTCLICK(){						_sendActive = false;			loadInBox();			var selectButton;			for(var i=0; i < leftNav.length;i++)			{					selectButton = getChildByName("leftNavBtn_"+i);					selectButton.unSelectButton();			}			selectButton = getChildByName("leftNavBtn_0");			selectButton.selectButton();			currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));			currentItem = selectButton;			currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));					}				private function new_email_CLICK(e:MouseEvent){			_sendActive = false;			createNewEmail();						for(var i=0; i < leftNav.length;i++)			{				var selectButton = getChildByName("leftNavBtn_"+i);					selectButton.unSelectButton();			}			e.target.selectButton();		}				private function new_sms_CLICK(e:MouseEvent){			_sendActive = false;			createNewSMS();						for(var i=0; i < leftNav.length;i++)			{				var selectButton = getChildByName("leftNavBtn_"+i);					selectButton.unSelectButton();			}			e.target.selectButton();		}						private function sent_CLICK(e:MouseEvent){			_sendActive = false;			showSentMesssages();						for(var i=0; i < leftNav.length;i++)			{				var selectButton = getChildByName("leftNavBtn_"+i);					selectButton.unSelectButton();			}			e.target.selectButton();		}						private function loadInBox(){			sendBtn.visible = false;			keyboardBtn.visible = false;						_sendActive = false;			///////// add the headers///////////			try{			contentRegion.removeChild(headerMC);		}catch(e:Error){					}					contentRegion.sb.visible = true;						var headerFormat = createTextFormat('Reflex Bold', 0xFFFFFF, 20, 'left', false)						var messageFormat = createTextFormat('Century Gothic', 0xFFFFFF, 18, 'left', false)						headerMC = new MovieClip();			headerMC.x = 25;			headerMC.y = 5;			headerMC.name = "headerMC";						var _fromX = 0;			var _toX = 150;			var _subjectX = 150;			var _dateX = 480;									var _fromHeader = createTextField(_fromX, 0, 40, 40);				_fromHeader.text = "FROM";				_fromHeader.setTextFormat(headerFormat)			var _toHeader = createTextField(_toX, 0, 40, 40);				_toHeader.text = "TO";				_toHeader.setTextFormat(headerFormat)			var _subjectHeader = createTextField(_subjectX, 0, 40, 40);				_subjectHeader.text = "SUBJECT";				_subjectHeader.setTextFormat(headerFormat)			var _dateHeader = createTextField(_dateX, 0, 40, 40);				_dateHeader.text = "DATE (GMT)";				_dateHeader.setTextFormat(headerFormat)						headerMC.addChild(_fromHeader);			//headerMC.addChild(_toHeader);			headerMC.addChild(_subjectHeader);			headerMC.addChild(_dateHeader);									///////// add the headers///////////						///////////////email inbox//////////////////			var emailInbox = new MovieClip();						emailInbox.y = 20;						//trace(_tracks.length());			var messages:XMLList = inboxMessages.*;						var currentItemSet = false;			var totalItems = messages.length();						for(var i=0; i < totalItems;i++)			{								var fromText = messages[i].from.toString();				var toText = messages[i].to.toString();				var subjectText = messages[i].subject.toString();				var dateText = messages[i].date.toString();								var messageY = 40*i;							var messageItem = new MovieClip();			messageItem.name = "messageItem_"+i;			messageItem.y = messageY;			messageItem.extra = new Object();			messageItem.extra.index = i;							var _from = createTextField(_fromX, 0, 40, 40);				_from.text = fromText;				if (_from.length > 10){				_from.replaceText(10, 2000, "...")				}				_from.setTextFormat(messageFormat);								var _to = createTextField(_toX, 0, 40, 40);				_to.text = toText;				if (_to.length > 10){				_to.replaceText(10, 2000, "...")				}				_to.setTextFormat(messageFormat);								var _subject = createTextField(_subjectX, 0, 40, 40);				_subject.text = subjectText;				if (_subject.length > 40){				_subject.replaceText(40, 2000, "...")				}				_subject.setTextFormat(messageFormat);								var _date = createTextField(_dateX, 0, 40, 60);				_date.text = dateText;				_date.setTextFormat(messageFormat)											messageItem.addChild(_from);			//messageItem.addChild(_to);			messageItem.addChild(_subject);			messageItem.addChild(_date);									/*if(currentItemSet != true){				currentItem = messageItem;				currentItemChild = messageItem;				//trace(currentItem.name);				currentItemSet = true;				}				*/							emailInbox.addChild(messageItem);			}									///////////////email inbox//////////////////												setContentMC(emailInbox);									contentRegion.addChild(headerMC);					}				private function createNewEmail(){									sendBtn.visible = true;			keyboardBtn.visible = true;			//sendBtn.tabEnabled = true;						sendBtn.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));			_sendActive = true;						try{			contentRegion.removeChild(headerMC);		}catch(e:Error){					}			//contentRegion.sb.visible = false;						var newEmailMC = new MovieClip();			var toBox = new Shape();			toBox.graphics.lineStyle(3, 0x666666)			toBox.graphics.beginFill(0xFFFFFF, 1);			toBox.graphics.drawRect(0,0,600,30);			toBox.graphics.endFill();			toBox.x = 90;			toBox.y = 5;			//newEmailMC.addChild(toBox);						var labelFormat = createTextFormat('Reflex Bold', 0xFFFFFF, 22, 'left', true)						var messageFormat = createTextFormat('Century Gothic', 0x000000, 20, 'left', false)						var _toLabel = createTextField(0, 5, 60, 30);				_toLabel.text = "TO: ";				_toLabel.setTextFormat(labelFormat);			newEmailMC.addChild(_toLabel);						var _subjectLabel = createTextField(0, 45, 60, 30);				_subjectLabel.text = "SUBJECT: ";				_subjectLabel.setTextFormat(labelFormat);			newEmailMC.addChild(_subjectLabel);						var _bodyLabel = createTextField(0, 85, 60, 30);				_bodyLabel.text = "MESSAGE: ";				_bodyLabel.setTextFormat(labelFormat);			newEmailMC.addChild(_bodyLabel);										_to = createInputTextField(100, 10, 500, 30);				_to.text = "Johnathan Briar";				_to.maxChars = 40;				_to.setTextFormat(messageFormat);			newEmailMC.addChild(_to);				_to.setSelection(0,0);				_to.tabEnabled = false;				_to.tabIndex = 1;				_to.addEventListener(FocusEvent.FOCUS_IN, setCurrentTextTarget);												_subject = createInputTextField(100, 50, 500, 30);				_subject.text = "Don't forget the hotel reservation!";				_subject.maxChars = 40;				_subject.setTextFormat(messageFormat);			newEmailMC.addChild(_subject);				_subject.setSelection(0,0);				_subject.tabEnabled = false;				_subject.tabIndex = 2;				_subject.addEventListener(FocusEvent.FOCUS_IN, setCurrentTextTarget);							_body = createInputTextField(100, 90, 500, 200);				_body.text = "Hey John, don't forget to confirm the hotel reservation. \n I won't be getting in until it's too late. Thanks in advance, \n Jane";				_body.border = true;				_body.borderColor = 0xFFFFFF;				_body.background = true;				_body.backgroundColor = 0xDEDEDE;				_body.maxChars = 200;				_body.multiline = true;				_body.wordWrap = true;				_body.autoSize = TextFieldAutoSize.LEFT;				_body.height = 200;				_body.setTextFormat(messageFormat);			newEmailMC.addChild(_body);				_body.setSelection(0,0);				_body.tabEnabled = false;				_body.tabIndex = 3;				_body.addEventListener(FocusEvent.FOCUS_IN, setCurrentTextTarget);									setContentMC(newEmailMC);						updateTo();			updateSubject();			updateBody();						_to.addEventListener(KeyboardEvent.KEY_UP, updateTo);			_subject.addEventListener(KeyboardEvent.KEY_UP, updateSubject);			_body.addEventListener(KeyboardEvent.KEY_UP, updateBody);						function updateTo(){				_toText = _to.text;			}						function updateSubject(){				_subjectText = _subject.text;			}						function updateBody(){				_bodyText = _body.text;			}														}				private function createNewSMS(){			createNewEmail();		}				private function showSentMesssages(){									sendBtn.visible = false;			keyboardBtn.visible = false;						_sendActive = false;			try{			contentRegion.removeChild(headerMC);		}catch(e:Error){					}					contentRegion.sb.visible = true;						///////// add the headers///////////									var headerFormat = createTextFormat('Reflex Bold', 0xFFFFFF, 20, 'left', false)						var messageFormat = createTextFormat('Century Gothic', 0xFFFFFF, 18, 'left', false)						headerMC = new MovieClip();			headerMC.x = 25;			headerMC.y = 5;			headerMC.name = "headerMC";						var _fromX = 0;			var _toX = 0;			var _subjectX = 150;			var _dateX = 480;									var _fromHeader = createTextField(_fromX, 0, 40, 40);				_fromHeader.text = "FROM";				_fromHeader.setTextFormat(headerFormat)			var _toHeader = createTextField(_toX, 0, 40, 40);				_toHeader.text = "TO";				_toHeader.setTextFormat(headerFormat)			var _subjectHeader = createTextField(_subjectX, 0, 40, 40);				_subjectHeader.text = "SUBJECT";				_subjectHeader.setTextFormat(headerFormat)			var _dateHeader = createTextField(_dateX, 0, 40, 40);				_dateHeader.text = "DATE (GMT)";				_dateHeader.setTextFormat(headerFormat)						//headerMC.addChild(_fromHeader);			headerMC.addChild(_toHeader);			headerMC.addChild(_subjectHeader);			headerMC.addChild(_dateHeader);									///////// add the headers///////////						///////////////email inbox//////////////////			var sentMC = new MovieClip();						sentMC.y = 20;						//trace(_tracks.length());			var messages:XMLList = sentMessages.*;									var currentItemSet = false;			var totalItems = messages.length();						for(var i=0; i < totalItems;i++)			{								var fromText = messages[i].from.toString();				var toText = messages[i].to.toString();				var subjectText = messages[i].subject.toString();				var dateText = messages[i].date.toString();								var messageY = 40*i;							var messageItem = new MovieClip();			messageItem.name = "messageItem_"+i;			messageItem.y = messageY;			messageItem.extra = new Object();			messageItem.extra.index = i;							var _from = createTextField(_fromX, 0, 40, 40);				_from.text = fromText;				if (_from.length > 10){				_from.replaceText(10, 2000, "...")				}				_from.setTextFormat(messageFormat);								var _to = createTextField(_toX, 0, 40, 40);				_to.text = toText;				if (_to.length > 10){				_to.replaceText(10, 2000, "...")				}				_to.setTextFormat(messageFormat);								var _subject = createTextField(_subjectX, 0, 40, 40);				_subject.text = subjectText;				if (_subject.length > 40){				_subject.replaceText(40, 2000, "...")				}				_subject.setTextFormat(messageFormat);								var _date = createTextField(_dateX, 0, 40, 60);				_date.text = dateText;				_date.setTextFormat(messageFormat)											//messageItem.addChild(_from);			messageItem.addChild(_to);			messageItem.addChild(_subject);			messageItem.addChild(_date);								/*if(currentItemSet != true){				currentItem = messageItem;				currentItemChild = messageItem;				//trace(currentItem.name);				currentItemSet = true;				}*/							sentMC.addChild(messageItem);			}									///////////////email inbox//////////////////												setContentMC(sentMC);									contentRegion.addChild(headerMC);										}				private function sendReply(e:MouseEvent){				var sendDate = getFormattedDate();				var sendReplyMessage:XML = <message>										<from>{_fromText}</from>										<to>{_toText}</to>										<subject>{_subjectText}</subject>										<date>{sendDate}</date>										<body>{_bodyText}</body>									</message>					sentMessages.prependChild(sendReplyMessage);		inbox_SOFTCLICK();				var replyEmailTimer = new Timer(5000, 1)			replyEmailTimer.addEventListener(TimerEvent.TIMER, autoReply);			replyEmailTimer.start();						function autoReply(){				var sendDate = getFormattedDate();				var autoReplyMessage:XML = <message>										<from>{_toText}</from>										<to>{_fromText}</to>										<subject>Re: {_subjectText}</subject>										<date>{sendDate}</date>										<body>Hey, I got your message. I will get back to you ASAP.\n\n{_bodyText}</body>									</message>				inboxMessages.prependChild(autoReplyMessage);			}											}						override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}										private function getNextItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			var result;						if(index < Number(totalItems-1)){			result = parentMC.getChildByName("leftNavBtn_"+Number(index+1));			}else{			result = parentMC.getChildByName("leftNavBtn_0");			}			return result;						}					private function getPrevItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			trace(totalItems);			var result;			if(index > 0){			result = parentMC.getChildByName("leftNavBtn_"+Number(index-1));			}else{			result = parentMC.getChildByName("leftNavBtn_"+Number(totalItems-1));			}						return result;						}								private function getNextSubItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			var result;						if(index < Number(totalItems-1)){			result = parentMC.getChildByName("messageItem_"+Number(index+1));			}else{			result = parentMC.getChildByName("messageItem_0");			}			return result;						}					private function getPrevSubItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			trace(totalItems);			var result;			if(index > 0){			result = parentMC.getChildByName("messageItem_"+Number(index-1));			}else{			result = parentMC.getChildByName("messageItem_"+Number(totalItems-1));			}						return result;						}							private function getNextOption(_currentItem){				var result;												return result;			}					private function getPrevOption(_currentItem){				var result;																return result;							}								private function setCurrentTextTarget(e:FocusEvent){			_currentTextTarget = e.target;		}					private function showKeyboard(e:MouseEvent) {						_keyboardMC.visible = true;			//_keyboardMC.setTarget(_currentTextTarget)					}						private function setKeys(){			//var key1 = _keyboardMC.key1;			//key1.addEventListener(					}										}//end class		}//end package