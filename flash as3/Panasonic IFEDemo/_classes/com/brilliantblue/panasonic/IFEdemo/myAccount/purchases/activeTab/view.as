package com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.activeTab{	import flash.display.*;	import flash.events.*;	import flash.text.*;	import caurina.transitions.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;	import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.viewTab.view;	import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.closeTab.view;	import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.viewRatesOpen.view;		public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				public var myMovieClip:MovieClip;		public var myTextField:TextField;		public var myTextFormat:TextFormat;		private var viewTabBtn;		private var closeBtn;		private var viewRatesBtn;		private var leftNav:Array;				public function view () 		{			setLayout("2column");			setScreenTitle("ACTIVE TAB");			adjustScreen();						myMovieClip = new activeTabMC();															setContentMC(myMovieClip);										/*viewTabBtn = new SelectButton();				viewTabBtn.setTitle("View Tab");				viewTabBtn.x = 120;				viewTabBtn.y = 205;				viewTabBtn.buttonWidth = 250;				viewTabBtn.name = "viewTabBtn";				viewTabBtn.setClickEvent(viewTab);							addChild(viewTabBtn);							closeBtn = new SelectButton();				closeBtn.setTitle("Close Tab");				closeBtn.x = 120;				closeBtn.y = 285;				closeBtn.name = "closeBtn";				closeBtn.setClickEvent(closeTab);							addChild(closeBtn);								viewRatesBtn = new SelectButton();				viewRatesBtn.setTitle("View Rates");				viewRatesBtn.x = 120;				viewRatesBtn.y = 365;				viewRatesBtn.name = "viewRatesBtn";				viewRatesBtn.setClickEvent(viewRates);							addChild(viewRatesBtn);									*/						leftNav = new Array("VIEW_TAB", "CLOSE_TAB", "VIEW_RATES");						var currentItemSet = false;			totalItems = leftNav.length;						for(var i = 0; i < totalItems; i++){								var titleText = leftNav[i].toString();				var r:RegExp = /_/;				var s:String = titleText;				function doStuff(R:RegExp,S:String):String{				while((R.test(S))!=false){				S=S.replace(R, " ")				//trace(S)				}				return S				}				titleText = doStuff(r,s);												var leftNavBtn = new SelectButton();				leftNavBtn.setTitle(titleText);				leftNavBtn.x = 115;				leftNavBtn.y = 240+(i*80);				leftNavBtn.buttonWidth = 250;				leftNavBtn.name = "leftNavBtn_"+i;				leftNavBtn.extra.index = i;				leftNavBtn.setClickEvent(this[leftNav[i]+"_CLICK"]);								if(currentItemSet != true){				currentItem = leftNavBtn;				trace(currentItem.name);				currentItemSet = true;				}												addChild(leftNavBtn);																}									this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);									currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));			//currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));		}								private function onAdded(e:Event){			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);								}								private function navUp(e:KeyboardEvent){			//trace(e.keyCode);						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{					/*case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItem);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItem);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;						*/											case KeyType.UP://up arrow																	trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = prevItem;												break;											case KeyType.DOWN://down arrow																	trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = nextItem;												break;											case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						//var optionButton = currentItem;						currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));												break;																	case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;										case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{											/*case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						*/										}						}										//View Tab		private function VIEW_TAB_CLICK(e:MouseEvent){						for(var i=0; i < leftNav.length;i++)			{				var selectButton = getChildByName("leftNavBtn_"+i);					selectButton.unSelectButton();			}						e.target.selectButton();						parentMC = this.parent;									var myView = new com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.viewTab.view();						//trace(this.parent.name);			myView.x = 1280;//at lest... maybe further right			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{x: -1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });								}		//close Tab		private function CLOSE_TAB_CLICK(e:MouseEvent){						for(var i=0; i < leftNav.length;i++)			{				var selectButton = getChildByName("leftNavBtn_"+i);					selectButton.unSelectButton();			}			e.target.selectButton();									parentMC = this.parent;									var myView = new com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.closeTab.view();						//trace(this.parent.name);			myView.x = 1280;//at lest... maybe further right			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{x: -1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });								}				//View Rates		private function VIEW_RATES_CLICK(e:MouseEvent){						for(var i=0; i < leftNav.length;i++)			{				var selectButton = getChildByName("leftNavBtn_"+i);					selectButton.unSelectButton();			}			e.target.selectButton();									parentMC = this.parent;									var myView = new com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.viewRatesOpen.view();						//trace(this.parent.name);			myView.x = 1280;//at lest... maybe further right			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{x: -1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });					}								private function getNextItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			var result;						if(index < Number(totalItems-1)){			result = parentMC.getChildByName("leftNavBtn_"+Number(index+1));			}else{			result = parentMC.getChildByName("leftNavBtn_0");			}			return result;						}					private function getPrevItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			trace(totalItems);			var result;			if(index > 0){			result = parentMC.getChildByName("leftNavBtn_"+Number(index-1));			}else{			result = parentMC.getChildByName("leftNavBtn_"+Number(totalItems-1));			}						return result;						}									override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}							}		}