package com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.closedConfirm{	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.utils.*;	import caurina.transitions.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;			public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				public var myMovieClip:MovieClip;		public var heading:TextField;		public var subHead:TextField;		private var presets:Array;		private var creditAccount:XML;		private var _detailsMethod:String;		private var cartContents:XML;		private var goTimer;				public function view () 		{									setLayout("2column");			setScreenTitle("your TAB is closed");			adjustScreen();						heading = new TextField();			heading.x = screen.title.x;			heading.y = screen.title.y+100;			heading.autoSize = TextFieldAutoSize.LEFT;			heading.multiline = false;			heading.embedFonts = true;			heading.text = "Step 2/2";			heading.setTextFormat(LC_SubHeadFormat);			screen.addChild(heading);												subHead = new TextField();			subHead.width = 200;			subHead.multiline = true;			subHead.x = screen.title.x;			subHead.y = heading.y+60;			subHead.wordWrap = true;			subHead.autoSize = TextFieldAutoSize.LEFT;			//heading.autoSize = TextFieldAutoSize.BOTTOM;			subHead.embedFonts = true;			subHead.text = "Payment Processed";			subHead.setTextFormat(LC_BodyFormat);			screen.addChild(subHead);									var cancelBtn = new BasicButton();				cancelBtn.setTitle("Exit");				cancelBtn.XPos = "RIGHT";				cancelBtn.name = "backBtn";				cancelBtn.setClickEvent(closeButtonClick);							addChild(cancelBtn);													this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);						currentItemOption = cancelBtn;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));							this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);					}								private function onAdded(e:Event){			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);						creditAccount = MovieClip(root)._creditAccount;			cartContents = MovieClip(root)._shoppingCart;						delete cartContents.*;			trace("New Cart: "+ cartContents.* as XMLList);			//add in preset details...			drawScreen();					}								private function navUp(e:KeyboardEvent){			//trace(e.keyCode);			k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{					/*case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItem);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItem);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;*/											case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						var optionButton = currentItemOption;						optionButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;																/*case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											*/										}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{											/*case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						*/										}						}						override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}								private function drawScreen()		{						var myMovieClip = new MovieClip();			myMovieClip.graphics.beginFill(0x000000, 0);			myMovieClip.graphics.drawRect(0,0,600, 20);			myMovieClip.graphics.endFill;			var thankyou = new TextField();			thankyou.x = 55;			thankyou.y = 50;			thankyou.width = 400;			thankyou.autoSize = TextFieldAutoSize.LEFT;			thankyou.multiline = true;			thankyou.embedFonts = true;			thankyou.text = "Thank You! An invoice has been sent\n to your email address:\n" + creditAccount.email;			thankyou.setTextFormat(CC_SubHeadFormatCentered);			myMovieClip.addChild(thankyou);																		setContentMC(myMovieClip);											}											}		}