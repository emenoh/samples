package com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.closeTab{	import flash.display.*;	import flash.events.*;	import flash.text.*;	import caurina.transitions.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;		import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.activeTab.view;	import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.closeProcess.view;		public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				public var myMovieClip:MovieClip;		public var myTextField:TextField;		public var myTextFormat:TextFormat;		private var tabInfoMC:MovieClip;		private var cancelBtn:MovieClip;		private var viewBtn:MovieClip;		private var creditAccount:XML;				public function view () 		{			setLayout("2column");			setScreenTitle("CLOSE TAB");			adjustScreen();						myMovieClip = new closeTabMC();									setContentMC(myMovieClip);				cancelBtn = new BasicButton();				cancelBtn.setTitle("Back");				cancelBtn.x = 115;				cancelBtn.name = "backBtn";				cancelBtn.setClickEvent(goBack);							addChild(cancelBtn);								viewBtn = new BasicButton();				viewBtn.setTitle("Process Payment");				viewBtn.x = 880;				viewBtn.buttonWidth = 280;				viewBtn.btn_label.x = 15;				viewBtn.name = "viewBtn";				viewBtn.setClickEvent(closeProcess);							addChild(viewBtn);										tabInfoMC = new closeTabInfoMC;				tabInfoMC.x = 130;				tabInfoMC.y = 213;						addChild(tabInfoMC);					this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);						currentItemOption = cancelBtn;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));							this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);					}								private function onAdded(e:Event){			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);									creditAccount = MovieClip(root)._creditAccount;			//add in preset details...						tabInfoMC.tabAvailable.text = "$"+creditAccount.tabAvailable;			tabInfoMC.tabLimit.text = "$"+creditAccount.tabLimit;			tabInfoMC.currentCharges.text = "$"+creditAccount.currentCharges;						myMovieClip.nameOnCard.text = creditAccount.creditCard.nameOnCard;			myMovieClip.accountNumber.text = creditAccount.creditCard.accountNumber;			myMovieClip.expiresDate.text = creditAccount.creditCard.expiresDate;			myMovieClip.currentCharges.text = "$"+creditAccount.currentCharges;					}								private function navUp(e:KeyboardEvent){			//trace(e.keyCode);			k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{					case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItemOption);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItemOption);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;						/*					case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;*/											/*case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						var optionButton = currentItemOption;						optionButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;*/											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						//var optionButton = currentItemOption;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;												case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;																}						}				private function getPrevOption(_currentItemOption){			var result;						if(_currentItemOption == cancelBtn){				result = viewBtn;			}else{				result = cancelBtn;			}						return result;		}				private function getNextOption(_currentItemOption){			var result;						if(_currentItemOption == cancelBtn){				result = viewBtn;			}else{				result = cancelBtn;			}						return result;		}								override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}						private function closeProcess(e:MouseEvent){						parentMC = this.parent;									var myView = new com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.closeProcess.view();						//trace(this.parent.name);			myView.x = 1280;//at lest... maybe further right			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{x: -1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });								}						private function goBack(e:MouseEvent){			parentMC = this.parent;			var myView = new com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.activeTab.view();						//trace(this.parent.name);			myView.x = -1280;//at lest... maybe further right			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{x: 1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });			//do a new tween on the new item after we've added it					}							}		}