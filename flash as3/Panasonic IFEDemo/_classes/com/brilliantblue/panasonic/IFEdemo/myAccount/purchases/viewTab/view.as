package com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.viewTab{	import flash.display.*;	import flash.events.*;	import flash.text.*;	import caurina.transitions.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;	import com.brilliantblue.panasonic.IFEdemo.shoppingCart.*;		import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.activeTab.view;		public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				public var myMovieClip:MovieClip;		public var myTextField:TextField;		public var myTextFormat:TextFormat;		private var tabInfoMC;		private var creditAccount:XML;		private var cartContents:XMLList;				public function view () 		{			setLayout("2column");			setScreenTitle("VIEW TAB");			adjustScreen();						//myMovieClip = new viewTabMC();						//setContentMC(myMovieClip);						var backBtn = new BasicButton();				backBtn.setTitle("Back");				backBtn.x = 115;				backBtn.name = "backBtn";				backBtn.setClickEvent(goBack);							addChild(backBtn);										tabInfoMC = new closeTabInfoMC;			tabInfoMC.x = 130;			tabInfoMC.y = 213;						addChild(tabInfoMC);									currentItemOption = backBtn;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));							this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);								}								private function onAdded(e:Event){			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);						creditAccount = MovieClip(root)._creditAccount;			//add in preset details...						tabInfoMC.tabAvailable.text = "$"+creditAccount.tabAvailable;			tabInfoMC.tabLimit.text = "$"+creditAccount.tabLimit;			tabInfoMC.currentCharges.text = "$"+creditAccount.currentCharges;						drawScreen();		}								private function navUp(e:KeyboardEvent){			//trace(e.keyCode);						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{					/*case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItem);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItem);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;						*/					case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						//var optionButton = currentItemOption;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;																case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;																}						}						override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}											public function drawScreen(){						cartContents = MovieClip(root)._shoppingCart.*;									//trace(cartContents);						var subMenuHeadingMC = new MovieClip();			subMenuHeadingMC.x = 25;			subMenuHeadingMC.y = 5;						//13, 320, 510						var itemNameHeading = createTextField(13,0,40,40);			/*itemNameHeading.x = 13;			itemNameHeading.y = 0;			itemNameHeading.autoSize = TextFieldAutoSize.LEFT;			itemNameHeading.multiline = false;			itemNameHeading.embedFonts = true;*/			itemNameHeading.text = "Name";			itemNameHeading.setTextFormat(CC_ContentHeadingFormat);			subMenuHeadingMC.addChild(itemNameHeading);									var itemTypeHeading = createTextField(320,0,40,40);			/*itemTypeHeading.x = 320;			itemTypeHeading.y = 0;			itemTypeHeading.autoSize = TextFieldAutoSize.LEFT;			itemTypeHeading.multiline = false;			itemTypeHeading.embedFonts = true;*/			itemTypeHeading.text = "Type";			itemTypeHeading.setTextFormat(CC_ContentHeadingFormat);			subMenuHeadingMC.addChild(itemTypeHeading);												var itemPriceHeading = createTextField(510,0,40,40);			/*itemPriceHeading.x = 510;			itemPriceHeading.y = 0;			itemPriceHeading.autoSize = TextFieldAutoSize.LEFT;			itemPriceHeading.multiline = false;			itemPriceHeading.embedFonts = true;*/			itemPriceHeading.text = "Price";			itemPriceHeading.setTextFormat(CC_ContentHeadingFormat);			subMenuHeadingMC.addChild(itemPriceHeading);												contentRegion.addChild(subMenuHeadingMC);									totalItems = cartContents.length()						var subMenuMC = new MovieClip();				subMenuMC.name = "subMenuMC";				subMenuMC.y = 5;									for(var i=0; i < totalItems;i++)			{							var type = cartContents[i].@["type"];			var price = cartContents[i].@["price"];			var itemName = cartContents[i];						var subNavButton:MovieClip = new CartItem();			subNavButton.setName(itemName);			subNavButton.setType(type);			subNavButton.setPrice(price);			//subNavButton.setClickEvent(updateTab);			subNavButton.x = 0;			subNavButton.y = 60*i;			subNavButton.name = "subNavButton_"+i;			subNavButton.extra.index = i;			//subNavButton.extra.amount = presets[i];						//trace(navButton.name)						subMenuMC.addChild(subNavButton);						}						setContentMC(subMenuMC);									try{			var scrollBar = contentRegion.getChildByName("sb");			scrollBar.getChildByName("scroller").y = 0;						}catch(e:Error){			}			 												}		/*		private function updateTab(e:MouseEvent):void {						var p = e.target.parent;			//trace(p.name);						for(var i=0; i < presets.length;i++)			{				var subNavButton = p.getChildByName("subNavButton_"+i);					subNavButton.unSelectButton();					try{						//trace(subNavButton.getChildByName("otherAmount"));						subNavButton.removeChild(subNavButton.getChildByName("otherAmount"));						subNavButton.removeChild(subNavButton.getChildByName("dollarSign"));					}catch(e:Error){											}			}						e.target.selectButton();								var amount = e.target.extra.amount;			if(amount != "Other Amount"){					trace(creditAccount.tabLimit);					creditAccount.tabLimit = amount;					trace(creditAccount.tabLimit);			}else{					e.target.buttonMode = false;					var dollarSign = new TextField();					dollarSign.text = "$";					dollarSign.width = 30;					dollarSign.y = 0;					dollarSign.x = 405;					dollarSign.multiline = false;					dollarSign.embedFonts = true;					dollarSign.setTextFormat(CC_InputFormat);					dollarSign.name = "dollarSign";					e.target.addChild(dollarSign);					var otherAmount = new TextField();					//otherAmount.multiline = false;					otherAmount.embedFonts = true;					otherAmount.width = 100;					otherAmount.height = 30;					otherAmount.restrict = "0-9";					otherAmount.maxChars = 7;					otherAmount.selectable = true;					otherAmount.y = 0;					otherAmount.x = 425;					otherAmount.text = "0";					otherAmount.type = TextFieldType.INPUT;					otherAmount.setTextFormat(CC_InputFormat);					otherAmount.name = "otherAmount";					e.target.addChild(otherAmount);					otherAmount.stage.focus = otherAmount;					otherAmount.setSelection(otherAmount.length,otherAmount.length);					otherAmount.text = ""; //empty it again :)					otherAmount.text = "0";					otherAmount.addEventListener(FocusEvent.FOCUS_OUT,addOtherAmount);										function addOtherAmount(e:FocusEvent){						var otherAmountValue = e.target.text;						creditAccount.tabLimit = otherAmountValue;					}			}					//check book for how to update							}				*/												private function goBack(e:MouseEvent){			parentMC = this.parent;			var myView = new com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.activeTab.view();						//trace(this.parent.name);			myView.x = -1280;//at lest... maybe further right			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen						Tweener.addTween(this,{x: 1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });			//do a new tween on the new item after we've added it					}									}		}