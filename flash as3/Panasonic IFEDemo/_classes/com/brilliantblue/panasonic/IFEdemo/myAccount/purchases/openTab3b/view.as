package com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.openTab3b{	import flash.display.*;	import flash.events.*;	import flash.text.*;	import caurina.transitions.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;		import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.openTab3.view;	import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.openTab4.view;		public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				public var myMovieClip:MovieClip;		public var heading:TextField;		public var subHead:TextField;		private var presets:Array;		private var creditAccount:XML;		private var _detailsMethod:String;		private var cancelBtn:MovieClip;		private var nextBtn:MovieClip;		private var keyboardBtn:MovieClip;				public function view () 		{			setLayout("2column");			setScreenTitle("OPEN TAB");			adjustScreen();						myMovieClip = new openTabStep3bMC();						setContentMC(myMovieClip);															heading = new TextField();			heading.x = screen.title.x;			heading.y = screen.title.y+100;			heading.autoSize = TextFieldAutoSize.LEFT;			heading.multiline = false;			heading.embedFonts = true;			heading.text = "Step 3/4";			heading.setTextFormat(LC_SubHeadFormat);			screen.addChild(heading);												subHead = new TextField();			subHead.width = 200;			subHead.multiline = true;			subHead.x = screen.title.x;			subHead.y = heading.y+60;			subHead.wordWrap = true;			subHead.autoSize = TextFieldAutoSize.LEFT;			//heading.autoSize = TextFieldAutoSize.BOTTOM;			subHead.embedFonts = true;			subHead.text = "Collecting Payment Details";			subHead.setTextFormat(LC_BodyFormat);			screen.addChild(subHead);										cancelBtn = new BasicButton();				cancelBtn.setTitle("Cancel/Back");				cancelBtn.x = 115;				cancelBtn.name = "backBtn";				cancelBtn.setClickEvent(goBack);							addChild(cancelBtn);											nextBtn = new BasicButton();				nextBtn.setTitle("Next");				nextBtn.XPos = "RIGHT";				nextBtn.name = "nextBtn";				nextBtn.setClickEvent(openTabStep4);							addChild(nextBtn);													keyboardBtn = new BasicButton();				keyboardBtn.setTitle("Keyboard");				keyboardBtn.XPos = "LEFT";				keyboardBtn.name = "keyboardBtn";				keyboardBtn.setClickEvent(openKeyboard);							//addChild(keyboardBtn);										this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);									currentItemOption = nextBtn;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));					}								private function onAdded(e:Event){			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);						creditAccount = MovieClip(root)._creditAccount;			//add in preset details...						myMovieClip.nameOnCard.text = creditAccount.creditCard.nameOnCard;			myMovieClip.accountNumber.text = creditAccount.creditCard.accountNumber;			myMovieClip.expiresDate.text = creditAccount.creditCard.expiresDate;			myMovieClip.SEC.text = creditAccount.creditCard.SEC;					}												private function navUp(e:KeyboardEvent){			//trace(e.keyCode);			k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{					case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItemOption);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItemOption);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;																				/*case KeyType.UP://up arrow						dispatchEvent(new KeyboardEvent(KeyboardEvent.KEY_UP, true, false,0 ,9 ));						break;											case KeyType.DOWN://down arrow						dispatchEvent(new KeyboardEvent(KeyboardEvent.KEY_UP, true, false, Shift+9 ,0 ));						break;*/											case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						var optionButton = currentItemOption;						optionButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;																	case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{											/*case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						*/										}						}				override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}														private function getPrevOption(_currentItemOption){			var result;						if(_currentItemOption == nextBtn){				result = cancelBtn;			}else{				result = nextBtn;			}						return result;		}				private function getNextOption(_currentItemOption){			var result;						if(_currentItemOption == nextBtn){				result = cancelBtn;			}else{				result = nextBtn;			}						return result;		}										private function openKeyboard(e:MouseEvent){						trace("keyboard open");		}						private function openTabStep4(e:MouseEvent){			parentMC = this.parent;									var myView = new com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.openTab4.view();						//trace(this.parent.name);			myView.x = 1280;//at lest... maybe further right			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{x: -1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });		}						private function goBack(e:MouseEvent){			parentMC = this.parent;			var myView = new com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.openTab3.view();						//trace(this.parent.name);			myView.x = -1280;//at lest... maybe further right			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{x: 1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });			//do a new tween on the new item after we've added it					}					}		}