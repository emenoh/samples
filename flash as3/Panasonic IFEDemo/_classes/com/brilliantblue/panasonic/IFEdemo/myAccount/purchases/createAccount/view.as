package com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.createAccount{	import flash.display.*;	import flash.events.*;	import flash.text.*;	import caurina.transitions.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;		import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.welcome.view;	import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.openTab1.view;	import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.viewRates.view;	/*import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.openTab112.view;	import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.openTab113.view;	import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.viewTab.view;	import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.closeTab.view;	import com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.activeTab.view;	*/		public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				public var myMovieClip:MovieClip;		public var myTextField:TextField;		public var myTextFormat:TextFormat;		private var backBtn:MovieClip;		private var openTabBtn:MovieClip;		private var viewRatesBtn:MovieClip;				public function view () 		{			setLayout("1column");			setScreenTitle("CREATE ACCOUNT");			adjustScreen();						myMovieClip = new createAccountMC();												setContentMC(myMovieClip);						backBtn = new BasicButton();				backBtn.setTitle("back");				backBtn.x = 115;				backBtn.name = "backBtn";				backBtn.setClickEvent(goBack);							addChild(backBtn);								openTabBtn = new BasicButton();				openTabBtn.setTitle("OPEN TAB");				openTabBtn.XPos = "CENTER";				openTabBtn.name = "openTabBtn";				openTabBtn.setClickEvent(openTab);							addChild(openTabBtn);												viewRatesBtn = new BasicButton();				viewRatesBtn.setTitle("VIEW RATES");				viewRatesBtn.XPos = "RIGHT";				viewRatesBtn.name = "viewRatesBtn";				viewRatesBtn.setClickEvent(viewRates);							addChild(viewRatesBtn);															this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);									currentItemOption = backBtn;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));							this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);		}								private function onAdded(e:Event){			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);								}								private function navUp(e:KeyboardEvent){			//trace(e.keyCode);						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{					case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItemOption);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItemOption);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;						/*											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;*/																						case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						//var optionButton = currentItemOption;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;																case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{											/*case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						*/										}						}						private function getPrevOption(_currentItemOption){			var result;							switch(_currentItemOption){								case backBtn:				result = viewRatesBtn;				break;								case openTabBtn:				result = backBtn;				break;								case viewRatesBtn:				result = openTabBtn;				break;							}							return result;		}				private function getNextOption(_currentItemOption){			var result;			switch(_currentItemOption){								case backBtn:				result = openTabBtn;				break;								case openTabBtn:				result = viewRatesBtn;				break;								case viewRatesBtn:				result = backBtn;				break;							}						return result;		}						override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}						private function viewRates(e:MouseEvent){			parentMC = this.parent;			var myView = new com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.viewRates.view();						//trace(this.parent.name);			myView.x = 1280;//at lest... maybe further right			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{x: -1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });			//do a new tween on the new item after we've added it					}				private function openTab(e:MouseEvent){			parentMC = this.parent;			var myView = new com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.openTab1.view();						//trace(this.parent.name);			myView.x = 1280;//at lest... maybe further right			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{x: -1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });			//do a new tween on the new item after we've added it					}								private function goBack(e:MouseEvent){			parentMC = this.parent;			var myView = new com.brilliantblue.panasonic.IFEdemo.myAccount.purchases.welcome.view();						//trace(this.parent.name);			myView.x = -1280;//at lest... maybe further right			parentMC.addChild(myView);			//do our tween and then add onComplete function to:			//do a softCloseClick for the current screen			Tweener.addTween(this,{x: 1280, time: 1, delay: 0.25});			Tweener.addTween(myView,{							 x: 0, 							 time: 1, 							 delay: 0.25, 							 onComplete: function(){										swapOutClose();										}, 							 onCompleteScope: this							 });			//do a new tween on the new item after we've added it					}					}		}