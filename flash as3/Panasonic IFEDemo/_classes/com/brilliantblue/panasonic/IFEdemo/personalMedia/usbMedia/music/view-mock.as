package com.brilliantblue.panasonic.IFEdemo.personalMedia.usbMedia.music{	import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.net.*	import flash.utils.*	import flash.external.*		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;			public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				public var personalMediaList:MovieClip;		public var tabInfoMC:MovieClip;		public var myTextField:TextField;		public var leftNav:Array;		public var usbTimer:Timer;		public var messageFormat:TextFormat;		private var xmlLoader:URLLoader;		private var xmlData:XML;		private var musicList:XMLList;		private var xmlPath:String;				public function view () 		{			setLayout("2column");			setScreenTitle("USB MEDIA - Music");			adjustScreen();			personalMediaList = new personalMediaList_mc();												//						var viewBtn = new BasicButton();				viewBtn.setTitle("VIEW FULL SCREEN");				viewBtn.x = 900;				viewBtn.y = 605;				viewBtn.name = "viewBtn";				viewBtn.setClickEvent(fullScreen);							addChild(viewBtn);										tabInfoMC = new TabInfoList;				tabInfoMC.x = 110;				tabInfoMC.y = 200;			addChild(tabInfoMC);						messageFormat = createTextFormat('Century Gothic', 0xFFFFFF, 18, 'left', false)										myTextField = createTextField(20, 20, 600, 400);				myTextField.text = "Testing testing testing";				myTextField.type = TextFieldType.DYNAMIC;				myTextField.setTextFormat(messageFormat)						//addChild(personalMediaList);			setContentMC(personalMediaList);								//ExternalInterface.addCallback("FLsetUSBMediaDirectory",function(){		//ExternalInterface.call("myAlert","loadContent('tmp/output.xml');");			//loadContent("/tmp/output.xml");				//}			//);						//addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);											}				private function onAdded(e:Event){						loadUSBMedia();		}				private function fullScreen(e:MouseEvent){						trace("goo ful screen");		}				private function loadUSBMedia(){						usbTimer = new Timer(1000,0)			usbTimer.addEventListener(TimerEvent.TIMER, getUSBXML,false,0,true);			usbTimer.start();					}								private function getUSBXML(e:TimerEvent){			var usbStatus;			var usbDirectory;			trace("USB Timer...");			myTextField.text = "USB Timer...";			myTextField.setTextFormat(messageFormat);			usbStatus = MovieClip(root).getUSBStatus();			//loadUSBDirectory(usbDirectory);//debug positioning for flash			//ExternalInterface.call("myAlert","First "+ usbStatus);			if(usbStatus != undefined){				//myTextField.appendText(myAux);				if(usbStatus != ''){									trace("USB Status...");				//myTextField.appendText("YEah! "+ myAux.toString());				usbDirectory = MovieClip(root).getUSBDirectory(usbStatus);								if(usbDirectory != undefined){										trace("USB Directory...");					myTextField.text = "USB Directory...";										//ExternalInterface.call("myAlert","First "+ usbDirectory);					loadUSBDirectory(usbDirectory);									}								}			}								}				private function loadUSBDirectory(_usbDirectory){			trace(_usbDirectory);			/*var usbXML:XML = new XML();			usbXML = _usbDirectory;*/			if(_usbDirectory != null){			myTextField.text = _usbDirectory;			myTextField.setTextFormat(messageFormat);			}			//ExternalInterface.call("myAlert","Second "+ _usbDirectory);						usbTimer.stop();			usbTimer.removeEventListener(TimerEvent.TIMER, getUSBXML);					}						/*override protected function screenShutDown(){			usbTimer.removeEventListener(TimerEvent.TIMER, getUSBXML);			usbTimer.stop();								}*/								private function loadContent(xmlPath) {				//if(xmlData == null){									myTextField.appendText("Trying to load...\n");				myTextField.setTextFormat(messageFormat);				xmlLoader = new URLLoader();				xmlLoader.addEventListener(Event.COMPLETE,onLoadXML);             	xmlLoader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);				xmlLoader.load(new URLRequest(xmlPath));				//}			}					private function onLoadXML(e:Event):void {				xmlData=new XML(e.target.data);				//trace(xmlData);				musicList = xmlData.*;											myTextField.text = musicList;			myTextField.setTextFormat(messageFormat);							}						private function errorHandler(e:IOErrorEvent){							myTextField.appendText("Had problem loading the XML File.\n");			myTextField.setTextFormat(messageFormat);						//loadContent("tmp/output.xml");									}																			}//end class		}//end package