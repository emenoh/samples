package com.brilliantblue.panasonic.IFEdemo.personalMedia.iPod{	import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.utils.*		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;			public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				private var myMovieClip:MovieClip;		private var viewFullBtn:MovieClip;		private var myTextField:TextField;		private var myTextFormat:TextFormat;		public var auxTimer:Timer;		private var auxIsPlaying:Boolean = false;				public function view () 		{			setLayout("1column");			setScreenTitle("IPOD");			adjustScreen();			myMovieClip = new iPodDirections_mc();						/*myTextField = new TextField();			myTextField.width = 900;			myTextField.height = 200;			myTextField.x = 300;			myTextField.y = 400;			myTextField.multiline = true;			myTextField.text = "";			myTextField.setTextFormat(LC_BodyFormat);*/			//myTextField.y = 160;									//myMovieClip.addChild(myTextField);						contentRegion.sb.visible = false;						myMovieClip.x = 130;			myMovieClip.y = 218;						addChild(myMovieClip);									//setContentMC(myMovieClip);														viewFullBtn = new BasicButton();				viewFullBtn.setTitle("VIEW FULL SCREEN");				viewFullBtn.x = 215;				viewFullBtn.y = 605;				viewFullBtn.name = "viewFullBtn";				viewFullBtn.setClickEvent(setFullScreen);							addChild(viewFullBtn);												//addChild(myTextField);																		addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);									viewFullBtn.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));					}								private function onAdded(e:Event){						auxTimer = new Timer(1000,0)			auxTimer.addEventListener(TimerEvent.TIMER, checkAUX,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);			auxTimer.start();														}				private function checkAUX(e:TimerEvent){			var myAux;						myAux = MovieClip(root).AUXStatus();			if(myAux != null){				//myTextField.appendText(myAux);				if(myAux != true){				//myTextField.appendText(myAux);					if(auxIsPlaying != false){					MovieClip(root).mediaType = "AUX";					MovieClip(root).stopMedia();					}				}else{				//MovieClip(root).backgroundMC.visible = false;				//myTextField.appendText("YEah! "+ myAux.toString());				if(auxIsPlaying != true){				MovieClip(root).mediaType = "AUX";				MovieClip(root).launchMedia();				auxIsPlaying = true;				}				//auxTimer.stop();				}			}								}										private function setFullScreen(e:MouseEvent){				MovieClip(root).setAuxFullScreen(true);		}						override protected function screenShutDown(){							MovieClip(root).mediaType = "AUX";				MovieClip(root).stopMedia();						//MovieClip(root).backgroundMC.visible = true;			auxTimer.removeEventListener(TimerEvent.TIMER, checkAUX);			auxTimer.stop();						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);					}												private function navUp(e:KeyboardEvent){			//trace(e.keyCode);						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{					/*case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItem);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItem);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;*/											case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						//var optionButton = currentItemOption;						viewFullBtn.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;																case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{											/*case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						*/										}						}															}		}