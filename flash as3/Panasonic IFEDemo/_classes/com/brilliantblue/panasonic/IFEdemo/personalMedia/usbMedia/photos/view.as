package com.brilliantblue.panasonic.IFEdemo.personalMedia.usbMedia.photos{    import br.com.stimuli.loading.BulkLoader;    import br.com.stimuli.loading.BulkProgressEvent;	import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.utils.*	import flash.external.*	import flash.net.*;	import caurina.transitions.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;	import com.brilliantblue.panasonic.IFEdemo.common.files.*;	import com.brilliantblue.panasonic.IFEdemo.personalMedia.usbMedia.status.view;			public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				public var tabInfoMC:MovieClip;		public var myTextField:TextField;		public var leftNav:Array;		private var imageLoader:BulkLoader;		private var xmlLoader:URLLoader;		private var _filesData:XML;		private var _files:XMLList;		private var _photos:XMLList;		private var _fullScreenTarget:String = '';		private var _fullScreen:Boolean = false;		private var _totalPhotos:Number = 0;		private var viewBtn;		public var usbTimer:Timer;		public var messageFormat:TextFormat;		private var usbStatus;		private var usbDirectory;		private var _xmlLoaded:Boolean = false;		private var totalFiles;		private var statusScreen;				public function view () 		{			setLayout("2column");			setScreenTitle("USB MEDIA - Photos");			adjustScreen();												this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);											ExternalInterface.addCallback("FLsetUSBMediaDirectory",function(){		//ExternalInterface.call("myAlert","loadContent('/tmp/output.xml');");		loadContent("/tmp/output.xml");				}			);					}								private function onAdded(e:Event){			//trace("added");			            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);						this.visible = false;						parentMC = this.parent;			statusScreen = new com.brilliantblue.panasonic.IFEdemo.personalMedia.usbMedia.status.view();									parentMC.addChild(statusScreen);												Tweener.addTween(statusScreen,{							 x: 256, 							 time: 1, 							 delay: 0.25							 });						loadUSBMedia();									removeEventListener(Event.ADDED_TO_STAGE, onAdded);		}								private function navUp(e:KeyboardEvent){			//trace(e.keyCode);						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)							if(_xmlLoaded == true){									switch(k)				{					case KeyType.LEFT://left arrow					trace(currentItemParent);					trace(currentItem);						if(currentItemGroup == "subNav"){							currentItem = currentItemParent;							currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));							totalItems = leftNav.length;							currentItemGroup = "leftNav";						}						break;					case KeyType.RIGHT://right arrow										trace(currentItemParent);					trace(currentItem);						if(currentItemGroup == "leftNav"){							currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));							currentItemGroup = "subNav";						}						break;											case KeyType.UP://up arrow											if(currentItemGroup == "subNav"){													trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevSubItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = prevItem;						}else{						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = prevItem;						}						break;											case KeyType.DOWN://down arrow											if(currentItemGroup == "subNav"){						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextSubItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = nextItem;						}else{						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = nextItem;						}						break;											case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						/*trace("OK :"+currentItem.name);						trace("OK :"+currentItemParent.name);						trace("OK :"+_fullScreen);						trace("OK :"+viewBtn.name);*/												var optionButton = currentItem;						optionButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						if(currentItem != currentItemParent){							if(_fullScreen != true){							trace("why isn't this working?");							viewBtn.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));							}else{								trace("is there an image showing?");								var removeMC = getChildByName("fullScreenMC");								removeMC.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));							}						}						//}						break;																case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}												}else{			var exitButton = statusScreen.getChildByName("exitButton");			switch(k)				{					case KeyType.OK:						exitButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));					break;										case KeyType.HOME://back button						exitButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											case KeyType.BACK://back button						exitButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;					}				}																					}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{											/*case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						*/										}						}										private function drawScreen(){										totalFiles = new TextField();				totalFiles.text = "Total Photos: "+_totalPhotos.toString();				totalFiles.x = 115;				totalFiles.y = 180;				totalFiles.autoSize = TextFieldAutoSize.LEFT;				totalFiles.embedFonts = true;				totalFiles.selectable = false;				totalFiles.setTextFormat(LC_SubHeadFormat);			addChild(totalFiles);											viewBtn = new BasicButton();				viewBtn.setTitle("VIEW FULL SCREEN");				viewBtn.x = 900;				viewBtn.y = 605;				viewBtn.name = "viewBtn";				viewBtn.setClickEvent(fullScreen);							addChild(viewBtn);									leftNav = new Array("LIST", "THUMBNAIL", "SLIDESHOW");						var currentItemSet = false;			totalItems = leftNav.length;						for(var i = 0; i < totalItems; i++){								var leftNavBtn = new SelectButton();				leftNavBtn.setTitle(leftNav[i]);				leftNavBtn.x = 115;				leftNavBtn.y = 240+(i*80);				leftNavBtn.buttonWidth = 250;				leftNavBtn.name = "leftNavBtn_"+i;				leftNavBtn.extra.index = i;				leftNavBtn.setClickEvent(this[leftNav[i]+"_CLICK"]);								if(currentItemSet != true){				currentItem = leftNavBtn;				trace(currentItem.name);				currentItemSet = true;				}												addChild(leftNavBtn);												}																						/*			var thumbnailBtn = new SelectButton();				thumbnailBtn.setTitle("THUMBNAIL");				thumbnailBtn.x = 120;				thumbnailBtn.y = 335;				thumbnailBtn.buttonWidth = 250;				thumbnailBtn.name = "thumbnailBtn";				thumbnailBtn.setClickEvent(setThumbView);							addChild(thumbnailBtn);												var listBtn = new SelectButton();				listBtn.setTitle("LIST");				listBtn.x = 120;				listBtn.y = 415;				listBtn.buttonWidth = 250;				listBtn.name = "listBtn";				listBtn.setClickEvent(setListView);							addChild(listBtn);												var slideShowBtn = new SelectButton();				slideShowBtn.setTitle("SLIDESHOW");				slideShowBtn.x = 120;				slideShowBtn.y = 495;				slideShowBtn.buttonWidth = 250;				slideShowBtn.name = "slideShowBtn";				slideShowBtn.setClickEvent(setSlideView);							addChild(slideShowBtn);													tabInfoMC = new TabInfoList;				tabInfoMC.x = 120;				tabInfoMC.y = 200;						addChild(tabInfoMC);			*/																		currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));			currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));					}												private function LIST_CLICK(e:MouseEvent){			//setContentMC(personalMediaList);						viewBtn.visible = true;			loadPhotoList();						for(var i=0; i < leftNav.length;i++)			{				var selectButton = getChildByName("leftNavBtn_"+i);					selectButton.unSelectButton();			}			e.target.selectButton();						currentItemParent = e.target;			currentItemGroup = "subNav";								}				private function SLIDESHOW_CLICK(e:MouseEvent){			//setContentMC(personalMediaSlide);						viewBtn.visible = false;			loadPhotoSlideShow();						for(var i=0; i < leftNav.length;i++)			{				var selectButton = getChildByName("leftNavBtn_"+i);					selectButton.unSelectButton();			}			e.target.selectButton();						currentItemParent = e.target;			currentItemGroup = "subNav";		}						private function THUMBNAIL_CLICK(e:MouseEvent){						viewBtn.visible = true;			loadPhotoThumbnails();						//setContentMC(personalMediaThumb);			for(var i=0; i < leftNav.length;i++)			{				var selectButton = getChildByName("leftNavBtn_"+i);					selectButton.unSelectButton();			}			e.target.selectButton();									currentItemParent = e.target;			currentItemGroup = "subNav";		}						private function fullScreen(e:MouseEvent){			_fullScreen = true;			if(_fullScreenTarget != ''){			var _imageLoader:Loader;			var _fullScreenMC:MovieClip = new MovieClip();			_fullScreenMC.name = "fullScreenMC";			_fullScreenMC.buttonMode = true;			_fullScreenMC.graphics.beginFill(0x000000, 0.8);			_fullScreenMC.graphics.drawRect(0,0,1280,800);			_fullScreenMC.graphics.endFill();						_fullScreenMC.addEventListener(MouseEvent.CLICK, removeFullScreen,false,0,true);			var _path:String = _fullScreenTarget;						loadImage(_path, attachMC);										function loadImage(imagePath, onImageLoaded)				{					_imageLoader = new Loader();					_imageLoader.contentLoaderInfo.addEventListener(Event.INIT, onImageLoaded,false,0,true);					_imageLoader.load( new URLRequest(imagePath));				}								function attachMC(e:Event)				{					var image = _imageLoader.content;										/*if(image.width > 1280 && image.height > 800){						if(((1280/image.width) * image.height) < 800){					image.width = (1280/image.width) * image.width;					image.height = (1280/image.width) * image.height;						}else{					image.height = (800/image.height) * image.height;					image.width = (800/image.height) * image.width;						}					}else if (image.width > 1280 && image.height <= 800){					image.width = (1280/image.width) * image.width;					image.height = (1280/image.width) * image.height;											}else if (image.height > 800 && image.width <= 1280){					image.height = (800/image.height) * image.height;					image.width = (800/image.height) * image.width;											}*/										if (image.width > 1280){						image.width = 1280;						image.scaleY = image.scaleX;						if(image.height > 800){						image.height = 800;						image.scaleX = image.scaleY;						}					}																				image.x = 640 - (image.width/2);					image.y = 400 - (image.height/2);					_fullScreenMC.addChild(image);										addChild(_fullScreenMC);				}								}else{				return;			}		}//end fullScreen				private function removeFullScreen(e:MouseEvent){			var removeMC = getChildByName("fullScreenMC")			removeMC.removeEventListener(MouseEvent.CLICK, removeFullScreen);			removeMC.removeChildAt(0);			removeChild(removeMC);						_fullScreen = false;		}						private function loadPhotoList(){						var subMenuMC = new MovieClip();						var currentItemSet = false;			totalItems = _totalPhotos;			for (var i = 0; i < totalItems; i++){							var filenameArray:Array = _photos[i].@path.split("/");			var fileName = filenameArray[filenameArray.length-1].toLowerCase();			//var fileSize = _photos[i].@fileSize;			var filePath = _photos[i].@path;						var subNavButton:MovieClip = new MenuButton();			//selectButton2.name = 'selectButton1';						subNavButton.setTitle(fileName);			if (subNavButton.btn_label.length > 50){				subNavButton.btn_label.replaceText(50, 2000, "...")			}			subNavButton.setClickEvent(setFullScreen);			subNavButton.x = 0;			subNavButton.y = 0+50*i;			subNavButton.buttonWidth = 650;			subNavButton.name = "subNavButton_"+i;			subNavButton.extra.path = filePath;			subNavButton.extra.index = i;			//trace(navButton.name)			if(currentItemSet != true){				currentItem = subNavButton;				currentItemChild = subNavButton;				//trace(currentItem.name);				currentItemSet = true;				}											subMenuMC.addChild(subNavButton);											}						setContentMC(subMenuMC);					}						private function loadPhotoSlideShow(){								 	var item:Number = 0;						BulkLoader.removeAllLoaders();						imageLoader = new BulkLoader("Thumbnail Loader");						var subMenuMC = new MovieClip();									// add event listeners for the loader itself :			// event fired when all items have been loaded			imageLoader.addEventListener(BulkLoader.COMPLETE, onCompleteHandler,false,0,true);			// event fired when loading progress has been made:			//bulkLoader.addEventListener(BulkLoader.PROGRESS, _onProgressHandler);					// start loading all items						for (var i = 0; i < _totalPhotos; i++){						var filePath = _photos[i].@path;			    		var image : URLRequest = new URLRequest(filePath);			imageLoader.add(image, {id:"image"+i});							 			}									imageLoader.start();						function onCompleteHandler(e:Event){										for (var i = 0; i < _totalPhotos; i++){										var _thumbButtonHolder:MovieClip = new MovieClip();			_thumbButtonHolder.name = "thumbButtonHolder_"+i;											var image : Bitmap = imageLoader.getBitmap("image"+i);						if (image.width > 400){				image.width = 400;				image.scaleY = image.scaleX;				if(image.height > 400){				image.height = 400;				image.scaleX = image.scaleY;				}								image.x = 200 - image.width/2;				image.y = 200 - image.height/2;			}						_thumbButtonHolder.addChild(image);						var _thumbButtonMask = new MovieClip();			_thumbButtonMask.graphics.beginFill(0x000000, 1);			_thumbButtonMask.graphics.drawRect(0,0,400,400);			_thumbButtonMask.graphics.endFill();			_thumbButtonMask.name="thumbButtonMask_"+i;			_thumbButtonHolder.addChild(_thumbButtonMask);			_thumbButtonHolder.alpha = 0;						image.mask = _thumbButtonMask;			subMenuMC.addChild(_thumbButtonHolder);						 				//trace("name: "+_thumbButton.name+" x: "+_thumbButton.x+" y: "+_thumbButton.y)				/*				if(XCount >= 2){					XCount = 0;					YCount++;				}else{				XCount++				}			*/													}											setContentMC(subMenuMC);									showItem();						}										function showItem(){										if(item < _totalPhotos) {					var itemMC = subMenuMC.getChildByName("thumbButtonHolder_"+item);					itemMC.alpha = 1;					trace(itemMC.name)					var itemMC2						if(item < Number(_totalPhotos - 1)){						   itemMC2 = subMenuMC.getChildByName("thumbButtonHolder_"+(item+1));						   trace(itemMC2.name)						}else{						   itemMC2 = subMenuMC.getChildByName("thumbButtonHolder_0");						   trace(itemMC2.name)						}					//itemMC.alpha = 0;					//trace(itemMC.name);										Tweener.addTween(itemMC, {alpha:0, time:2, delay: 4, onComplete: showItem});					Tweener.addTween(itemMC2, {alpha:1, time:2, delay: 4});					item++					}else{						item = 0;						showItem();				}//end showitem												}														}						private function loadPhotoThumbnails(){			BulkLoader.removeAllLoaders();						imageLoader = new BulkLoader("Thumbnail Loader");						var subMenuMC = new MovieClip();						var XCount = 0;			var YCount = 0;						// add event listeners for the loader itself :			// event fired when all items have been loaded			imageLoader.addEventListener(BulkLoader.COMPLETE, onCompleteHandler,false,0,true);			// event fired when loading progress has been made:			//bulkLoader.addEventListener(BulkLoader.PROGRESS, _onProgressHandler);					// start loading all items						for (var i = 0; i < _totalPhotos; i++){						var filePath = _photos[i].@path;			    		var image : URLRequest = new URLRequest(filePath);			imageLoader.add(image, {id:"image"+i});							 							}									imageLoader.start();						function onCompleteHandler(e:Event){							            var XCount : int = 0;            var YCount : int = 0;						var currentItemSet = false;			totalItems = _totalPhotos;						for (var i = 0; i < _totalPhotos; i++){							var filePath = _photos[i].@path;						var subNavButton:MovieClip = new MovieClip();			subNavButton.name = "subNavButton_"+i;			subNavButton.graphics.beginFill(0xFFFFFF, 1);			subNavButton.graphics.drawRect(0,0,210,210);			subNavButton.graphics.endFill();			subNavButton.buttonMode = true;			subNavButton.alpha = 0;			subNavButton.extra = new Object();			subNavButton.extra.path = filePath;			subNavButton.extra.index = i;			subNavButton.x = 215*XCount;			subNavButton.y = 215*YCount;			subNavButton.addEventListener(MouseEvent.CLICK, setFullScreenThumb,false,0,true);						subNavButton.addEventListener(MouseEvent.MOUSE_OVER, setFullScreenThumb,false,0,true);									var _thumbButtonHolder:MovieClip = new MovieClip();			_thumbButtonHolder.name = "thumbButtonHolder_"+i;			_thumbButtonHolder.x = 215*XCount;			_thumbButtonHolder.y = 215*YCount;					var _thumbButtonBackground = new MovieClip();			_thumbButtonBackground.graphics.beginFill(0xFFFFFF, 1);			_thumbButtonBackground.graphics.drawRect(0,0,210,210);			_thumbButtonBackground.graphics.endFill();			_thumbButtonBackground.alpha = 0.6;			_thumbButtonBackground.x = 215*XCount;			_thumbButtonBackground.y = 215*YCount;									var image : Bitmap = imageLoader.getBitmap("image"+i);						if (image.width > 300){				image.width = 300;				image.scaleY = image.scaleX;				image.x = 105 - image.width/2;				image.y = 105 - image.height/2;			}						_thumbButtonHolder.addChild(image);						var _thumbButtonMask = new MovieClip();			_thumbButtonMask.graphics.beginFill(0x000000, 1);			_thumbButtonMask.graphics.drawRect(2,2,206,206);			_thumbButtonMask.graphics.endFill();			_thumbButtonMask.name="thumbButtonMask_"+i;			_thumbButtonHolder.addChild(_thumbButtonMask);						image.mask = _thumbButtonMask;						if(currentItemSet != true){				currentItem = subNavButton;				currentItemChild = subNavButton;				//trace(currentItem.name);				currentItemSet = true;				}									subMenuMC.addChild(_thumbButtonBackground);			subMenuMC.addChild(_thumbButtonHolder);			subMenuMC.addChild(subNavButton);						 				//trace("name: "+_thumbButton.name+" x: "+_thumbButton.x+" y: "+_thumbButton.y)								if(XCount >= 2){					XCount = 0;					YCount++;				}else{				XCount++				}																}											setContentMC(subMenuMC);						}								}								private function setFullScreen(e:MouseEvent){			var p = e.target.parent;			for(var i=0; i < _totalPhotos;i++)			{				var selectButton = p.getChildByName("subNavButton_"+i);					selectButton.unSelectButton();			}			e.target.selectButton();						_fullScreenTarget = e.target.extra.path;			//_fullScreen = true;		}						private function setFullScreenThumb(e:MouseEvent){			trace(e.target.name);			var p = e.target.parent;			var thumbButton;						for(var i=0; i < _totalPhotos;i++)			{				thumbButton = p.getChildByName("subNavButton_"+i);				//background = thumbButton.getChildByName("background");				thumbButton.alpha = 0;			}			e.target.alpha = 0.2;			_fullScreenTarget = e.target.extra.path;			//_fullScreen = true;					}				private function getNextItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			var result;						if(index < Number(totalItems-1)){			result = parentMC.getChildByName("leftNavBtn_"+Number(index+1));			}else{			result = parentMC.getChildByName("leftNavBtn_0");			}			return result;						}					private function getPrevItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			trace(totalItems);			var result;			if(index > 0){			result = parentMC.getChildByName("leftNavBtn_"+Number(index-1));			}else{			result = parentMC.getChildByName("leftNavBtn_"+Number(totalItems-1));			}						return result;						}								private function getNextSubItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			var result;						if(index < Number(totalItems-1)){			result = parentMC.getChildByName("subNavButton_"+Number(index+1));			}else{			result = parentMC.getChildByName("subNavButton_0");			}			return result;						}					private function getPrevSubItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			trace(totalItems);			var result;			if(index > 0){			result = parentMC.getChildByName("subNavButton_"+Number(index-1));			}else{			result = parentMC.getChildByName("subNavButton_"+Number(totalItems-1));			}						return result;						}							private function getNextOption(_currentItem){				var result;												return result;			}					private function getPrevOption(_currentItem){				var result;																return result;							}									private function loadUSBMedia(){						usbTimer = new Timer(2000,0)			usbTimer.addEventListener(TimerEvent.TIMER, getUSBXML,false,0,true);			usbTimer.start();					}								private function getUSBXML(e:TimerEvent)		{						trace("USB Timer...");			usbStatus = MovieClip(root).getUSBStatus();						if(usbStatus == null){				trace("Undefined Status"+usbStatus);				loadContent("tmp/output.xml");				usbTimer.stop();							}else{				//myTextField.appendText(myAux);				if(usbStatus != ""){				if(_xmlLoaded == false){				trace("USB Status...");				//myTextField.appendText("YEah! "+ myAux.toString());				usbDirectory = MovieClip(root).getUSBDirectory(usbStatus);					}				//ExternalInterface.call("myAlert","Directory Status"+usbDirectory);														}else{											if(_xmlLoaded == true){														Tweener.addTween(this,{x: 1280, time: 1, delay: 0.25, onComplete: function(){this.visible = false} });														removeChild(getChildByName("leftNavBtn_0"));							removeChild(getChildByName("leftNavBtn_1"));							removeChild(getChildByName("leftNavBtn_2"));							removeChild(viewBtn);							removeChild(totalFiles);							            				stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);            				stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);														if(_fullScreen == true){								var removeMC = getChildByName("fullScreenMC");								removeMC.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));							}														_xmlLoaded = false;														parentMC = this.parent;																					statusScreen = new com.brilliantblue.panasonic.IFEdemo.personalMedia.usbMedia.status.view();							parentMC.addChild(statusScreen);														Tweener.addTween(statusScreen,{											 x: 256, 											 time: 1, 											 delay: 0.25											 });																											}														}							}								}														private function loadContent(xmlPath) 		{			//ExternalInterface.call("myAlert","Loading XML File.");			if(_xmlLoaded == false){				xmlLoader = new URLLoader();				xmlLoader.addEventListener(Event.COMPLETE,onLoadXML);             	xmlLoader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);				xmlLoader.load(new URLRequest(xmlPath));			}						}					private function onLoadXML(e:Event):void 		{			_xmlLoaded = true;			var image:RegExp = /^([a-zA-Z\/].*|[0-9].*)\.(((j|J)(p|P)(g|G))|((p|P)(n|N)(g|G))|((g|G)(i|I)(f|F))|((j|J)(p|P)(e|E)(g|G)))$/;																				 			_filesData = new XML(e.target.data);						//ExternalInterface.call("myAlert","XML Loaded: "+_filesData);						_photos = _filesData.file.(image["test"]( @path ) );												//ExternalInterface.call("myAlert","Photos Loaded: "+_photos);						_totalPhotos = _photos.length();									//ExternalInterface.call("myAlert","Total Photos: "+_totalPhotos);						//trace("FILTERED "+_photos);														drawScreen();												Tweener.addTween(statusScreen,{											 x: 1280, 											 time: 1, 											 delay: 0.25/*,											 onComplete: function(){statusScreen.closeButtonSoftClickNoMenu(); trace(statusScreen)},											 onCompleteScope: this*/											 });								this.x = 1280;				this.visible = true;				Tweener.addTween(this,{											 x: 0, 											 time: 1, 											 delay: 0.25											 });																			}						private function errorHandler(e:IOErrorEvent)		{							//ExternalInterface.call("myAlert","Had problem loading the XML File.");			myTextField.appendText("Had problem loading the XML File.\n");			myTextField.setTextFormat(messageFormat);						//loadContent("tmp/output.xml");			//loadUSBMedia();						}											override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}									}		}