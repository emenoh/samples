package com.brilliantblue.panasonic.IFEdemo.games{	import flash.display.*;	import flash.events.*;	import flash.net.*;	import flash.text.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;		import com.brilliantblue.panasonic.IFEdemo.shoppingCart.view;		public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				//public var ID:String = "game.multiplayer.002";		private var _xmlLoader:URLLoader		private var _imageLoader:Loader;		private var _extrasLoader:Loader;		private var _xmlData:XML;		private var _titleText:String;		private var _games:XMLList;		private var _game:XMLList;		private var _bodyText:String;		private var _priceText:String;		private var _description:TextField;		private var _thumbsrc:String;		private var _price:String;		private var _mediaID:String;		private var _gameThumb:MovieClip;		private var _gameExtras:MovieClip;		private var _purchaseButton:MovieClip;		private var cartItem:XML;		//private var _myTextField:TextField;				public function view () 		{						//////////set up page//////////												//////////load data//////////						//loadXML("xml/media/games/games.xml");						//////////add buttons//////////						_purchaseButton = new BasicButton();			_purchaseButton.setTitle("purchase");			_purchaseButton.x = 905;			_purchaseButton.y = 606			_purchaseButton.setClickEvent(buyGame);			addChild(_purchaseButton);					this.addEventListener(Event.ENTER_FRAME, swapButton,false,0,true);							this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);							_purchaseButton.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));					}				private function onAdded(e:Event){			_xmlData = MovieClip(root)._games;						drawScreen();			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);								}								private function navUp(e:KeyboardEvent){			//trace(e.keyCode);						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{					/*case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItem);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItem);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;*/											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						//var optionButton = currentItemOption;						_purchaseButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;										case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																	case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{											/*case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						*/										}						}										///sample code....      				private function swapButton(e:Event){			if(_purchased == true){			_purchaseButton.setTitle("play");			_purchaseButton.removeClickEvent(buyGame);			_purchaseButton.setClickEvent(playGame);						this.removeEventListener(Event.ENTER_FRAME, swapButton);			}		}				private function drawScreen()		{			_games = _xmlData.*;			_game = _games.(id == _itemID);			//trace(_xmlData);			_titleText = _game.name.toString().toUpperCase();			_priceText = _game.price.toString();			//_titleText = String(_titleText+" - $"+_priceText);			_bodyText = _game.description.toString();			_thumbsrc = _game.image.toString();			_price = _game.price.toString();			_mediaID = _game.id.toString();									setLayout("2column");			adjustScreen();			setScreenTitle(String(_titleText+" - $"+_priceText));						screen.title.x = (contentRegion.x - screen.x);									contentMC = new MovieClip();						_description = new TextField();			_description.width = contentRegion.background.width-100;			//_description.height = 50;			_description.text = _bodyText;			_description.wordWrap = true;			_description.autoSize = TextFieldAutoSize.LEFT;			_description.embedFonts = true;			_description.y = 0;			_description.setTextFormat(CC_BodyFormat);			contentMC.addChild(_description);						setContentMC(contentMC);						loadImage(_thumbsrc, addThumb);			//dummy clip for the "Games other people liked" section			loadExtras("images/games/gameExtras.png", addExtras);									cartItem = <item type="game" price={_price}>{_titleText}</item>;			//trace(cartItem);		}				private function buyGame(e:MouseEvent){						parentMC = this.parent;			var overlay = new overlayMC;			overlay.alpha = 0.85;			overlay.name = "overlay";			var myView = new com.brilliantblue.panasonic.IFEdemo.shoppingCart.view(cartItem);						//trace(myView.x);			//trace(this.parent.name);			//myView.x = 1280;//at lest... maybe further right			parentMC.addChild(overlay);			parentMC.addChild(myView);								}						private function playGame(e:MouseEvent){			MovieClip(root).mediaType = "Game";			MovieClip(root).mediaID = _mediaID;			MovieClip(root).launchMedia();		}						private function addThumb (e:Event){			_gameThumb = new MovieClip();			_gameThumb.addChild(_imageLoader.content);			_gameThumb.x = 116;			_gameThumb.y = 100;			var tempWidth = _gameThumb.width;			var tempHeight = _gameThumb.height			_gameThumb.width = 250;			var tempRatio =  _gameThumb.width / tempWidth;			_gameThumb.height = _gameThumb.height * tempRatio;			this.addChild(_gameThumb);		}				private function addExtras (e:Event){			_gameExtras = new MovieClip();			_gameExtras.addChild(_extrasLoader.content);			_gameExtras.x = 90;			_gameExtras.y = 340;			this.addChild(_gameExtras);		}				private function loadImage(imagePath, onImageLoaded)		{			_imageLoader = new Loader();			_imageLoader.contentLoaderInfo.addEventListener(Event.INIT, onImageLoaded,false,0,true);			_imageLoader.load( new URLRequest(imagePath));		}				private function loadExtras(imagePath, onExtrasLoaded)		{			_extrasLoader = new Loader();			_extrasLoader.contentLoaderInfo.addEventListener(Event.INIT, onExtrasLoaded,false,0,true);			_extrasLoader.load( new URLRequest(imagePath));		}				override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}				public function setKeyboardEvents()		{            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);		}			}		}