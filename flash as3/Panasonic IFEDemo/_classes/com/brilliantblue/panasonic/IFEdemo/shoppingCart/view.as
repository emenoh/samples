package com.brilliantblue.panasonic.IFEdemo.shoppingCart{	import flash.display.*;	import flash.events.*;	import flash.text.*		import com.brilliantblue.panasonic.IFEdemo.overlay.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;			public class view extends com.brilliantblue.panasonic.IFEdemo.overlay.view	{				public var myMovieClip:MovieClip;		public var myTextField:TextField;		public var myTextFormat:TextFormat;		public var itemPrice;		public var itemType;		public var itemName;		private var creditAccount:XML;		private var cartContents:XML;		private var _cartItem;		private var purchaseBtn:BasicButton;		private var cancelBtn:BasicButton;		private var originScreen;						public function view (cartItem) 		{			trace("InsideCart:" +cartItem as XML);						_cartItem = cartItem;			setLayout("1column");			setScreenTitle("Shopping Cart");			adjustScreen();						myMovieClip = new shoppingCartMC();						/*myTextField = new TextField();			myTextField.width = 900;			myTextField.height = 200;			myTextField.multiline = true;			myTextField.text = "My Account - Loyalty Program MC goes here.\n Just something ehre\nalkjlkd;sajdlfskjals;js\nklkajdflajslkdfs\n";			//myTextField.y = 160;			myTextField.setTextFormat(CC_CategoryFormat);*/			//myMovieClip.addChild(myTextField);						/*myMovieClip.x = 130;			myMovieClip.y = 166;*/						//this.addChild(myMovieClip);									//setContentMC(myMovieClip);										cancelBtn = new BasicButton();				cancelBtn.setTitle("CANCEL");				cancelBtn.x = 180;				cancelBtn.y = 620;				cancelBtn.name = "cancelBtn";				cancelBtn.setClickEvent(cancelPurchase);							addChild(cancelBtn);											purchaseBtn = new BasicButton();				purchaseBtn.setTitle("CONFIRM");				purchaseBtn.x = 860;				purchaseBtn.y = 620;				purchaseBtn.name = "purchaseBtn";				purchaseBtn.setClickEvent(confirmPurchase);							addChild(purchaseBtn);															currentItemOption = cancelBtn;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));					this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);					}					      				  		private function onAdded(e:Event){			creditAccount = MovieClip(root)._creditAccount;			//add in preset details...			cartContents = MovieClip(root)._shoppingCart;			trace(creditAccount as XML);			trace(cartContents as XML);			trace(_cartItem as XML);			itemName = _cartItem[0];			itemPrice = _cartItem[0].@["price"];			itemType = _cartItem[0].@["type"];						var cartMC = new MovieClip();			var subNavButton:MovieClip = new CartItem();			subNavButton.setName(itemName);			subNavButton.setType(itemType);			subNavButton.setPrice(itemPrice);			//subNavButton.setClickEvent(updateTab);			subNavButton.x = 0;			subNavButton.y = 0;			subNavButton.name = "subNavButton";												cartMC.addChild(subNavButton);			setContentMC(cartMC);									parentMC = this.parent;						originScreen = parentMC.getChildByName("baseView");						            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);											}										private function navUp(e:KeyboardEvent){			//trace(e.keyCode);						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{					case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItem);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItem);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						var optionButton = currentItemOption;						optionButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;																case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;											case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;															}						}								private function getNextOption(_currentItem)			{				var result;				if (currentItemOption == cancelBtn){					result = purchaseBtn;				}else {					result = cancelBtn;				}				return result;			}		private function getPrevOption(_currentItem)			{				var result;				if (currentItemOption == purchaseBtn){					result = cancelBtn;				}else {					result = purchaseBtn;				}				return result;			}							private function cancelPurchase(e:MouseEvent){			//parentMC = this.parent;			            stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);            stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);			parentMC.removeChild(parentMC.getChildByName("overlay"));						originScreen.purchased = false;						originScreen.setKeyboardEvents();						swapOutClose();			trace("item removed");								}								private function confirmPurchase(e:MouseEvent){		            stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);            stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);						trace("tabAvailable "+creditAccount.tabAvailable)			var tabAvailable = Number(creditAccount.tabAvailable);			tabAvailable -= Number(itemPrice);			creditAccount.tabAvailable = String(tabAvailable);			trace("tabAvailable "+creditAccount.tabAvailable)			trace("currentCharges: "+creditAccount.currentCharges)			var currentCharges = Number(creditAccount.currentCharges);			currentCharges += Number(itemPrice);			creditAccount.currentCharges = String(currentCharges);			trace("currentCharges: "+creditAccount.currentCharges)						trace(cartContents as XML);			cartContents.prependChild(_cartItem);						trace(cartContents as XML);						originScreen.purchased = true;						originScreen.setKeyboardEvents();						parentMC.removeChild(parentMC.getChildByName("overlay"));			swapOutClose();								}				override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}			}		}