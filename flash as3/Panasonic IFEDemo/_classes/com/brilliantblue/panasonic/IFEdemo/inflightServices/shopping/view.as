package com.brilliantblue.panasonic.IFEdemo.inflightServices.shopping{	import flash.display.*;	import flash.events.*;	import flash.text.*	import flash.geom.Rectangle;	import flash.utils.setTimeout;	import flash.system.System;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;			import com.asual.swfaddress.*;	import de.mightypirates.megazine.events.MegaZineEvent;	import de.mightypirates.megazine.*;	import de.mightypirates.utils.*;				public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				public var myMovieClip:MovieClip;		public var myTextField:TextField;		public var myTextFormat:TextFormat;		private var mz;		private var nextPage;		private var prevPage;				public function view () 		{			setLayout("custom");			setScreenTitle("SHOPPING");			closeButton.y = 675;			screen.y = 46;			screen.height = 735;			screen.title.y = 540;									mz = new MegaZine("swf/shopping/catalog.xml");			//loadImage(_path, attachMC);			mz.x = 105;			mz.y = 70;						addChild(mz);										nextPage = new NextButton();			nextPage.x = 1210;			nextPage.y = 400;			nextPage.buttonMode = true;			nextPage.addEventListener(MouseEvent.MOUSE_DOWN, goNextPage,false,0,true);			addChild(nextPage);						prevPage = new PrevButton();			prevPage.x = 15;			prevPage.y = 400;			prevPage.buttonMode = true;			prevPage.addEventListener(MouseEvent.MOUSE_DOWN, goPrevPage,false,0,true);			addChild(prevPage);																									//super.setContentMC(myMovieClip);								this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);								}				private function goNextPage(e:MouseEvent){				mz.gotoAnchor("next");			}					private function goPrevPage(e:MouseEvent){				mz.gotoAnchor("prev");			}				private function onAdded(e:Event){			//trace("added");            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);								}								private function navUp(e:KeyboardEvent){			//trace(e.keyCode);			k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{					case KeyType.LEFT://left arrow											prevPage.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));												break;					case KeyType.RIGHT://right arrow											nextPage.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						/*					case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP, true, false));						break;*/											/*case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						var optionButton = currentItemOption;						optionButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;*/																case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																	case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}						private function navDown(e:KeyboardEvent){						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)						switch(k)				{											/*case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;						*/										}						}						override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}				public function setKeyboardEvents()		{            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);		}			}		}