package com.brilliantblue.panasonic.IFEdemo.info.language{	import flash.display.*;	import flash.events.*;	import flash.text.*	import caurina.transitions.*;		import com.brilliantblue.panasonic.IFEdemo.view;	import com.brilliantblue.panasonic.IFEdemo.common.screen.*;	import com.brilliantblue.panasonic.IFEdemo.common.buttons.*;	import com.brilliantblue.panasonic.IFEdemo.common.key.*;	import com.brilliantblue.panasonic.IFEdemo.common.events.*;				public class view extends com.brilliantblue.panasonic.IFEdemo.view	{				private var languageArray:Array;				public function view () 		{			setLayout("1column");			adjustScreen();									this.x = 1880;						loadLanguageList();			//super.setContentMC(myMovieClip);								this.addEventListener(Event.ADDED_TO_STAGE, onAdded,false,0,true);					}					      				  		private function onAdded(e:Event){				setScreenTitle("Language Selection - "+MovieClip(root).language);		MovieClip(root).hideMenu();					Tweener.addTween(this,{x: 0, time: 1.5, delay: 0, transition:"easeOutStrong"});						            stage.addEventListener(KeyboardEvent.KEY_UP, navUp,false,0,true);            stage.addEventListener(KeyboardEvent.KEY_DOWN, navDown,false,0,true);					}				private function navUp(e:KeyboardEvent){			//trace(e.keyCode);						k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{					/*case KeyType.LEFT://left arrow											trace(currentItemOption.name);						//currentItem.dispatchEvent(new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT, currentItem));						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItemOption = getPrevOption(currentItem);						prevItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = prevItemOption;						trace(currentItemOption.name);						break;					case KeyType.RIGHT://right arrow						trace(currentItemOption.name);						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItemOption = getNextOption(currentItem);						nextItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItemOption = nextItemOption;						trace(currentItemOption.name);						break;*/											case KeyType.UP://up arrow						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						prevItem = getPrevItem(currentItem);						prevItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = prevItem;/*						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						currentItemOption = currentItem.extra.addButton;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));*/						trace(currentItem.name);						break;											case KeyType.DOWN://down arrow						trace(currentItem.name);						currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						nextItem = getNextItem(currentItem);						nextItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));						currentItem = nextItem;/*						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OUT, true, false));						currentItemOption = currentItem.extra.addButton;						currentItemOption.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));*/						trace(currentItem.name);						break;											case KeyType.OK://select current item						//if(currentItem != previousItem){						//keyboard = true;						//trace(currentItem.name);						//var optionButton = currentItemOption;						currentItem.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						//}						break;																case KeyType.HOME://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																	case KeyType.BACK://back button						closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK, true, false));						break;																					}						}				private function navDown(e:KeyboardEvent){						/*			k = KH.convertKeyCodeToKey(e.keyCode, e.shiftKey)									switch(k)				{											case KeyType.UP://up arrow						upArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;											case KeyType.DOWN://down arrow						downArrow.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN, true, false));						break;																}*/						}								private function loadLanguageList(){						var currentItemSet = false;						var subMenuMC = new MovieClip();			subMenuMC.y = 5;			subMenuMC.x = 5;			languageArray = new Array("English","Spanish", "Chinese", "Japanese", "German")						totalItems = languageArray.length						for (var i = 0; i < totalItems; i++){							var itemTitle = languageArray[i];			var subNavButton:MovieClip = new MenuButton();			//selectButton2.name = 'selectButton1';						subNavButton.setTitle(itemTitle);			subNavButton.setClickEvent(setLanguage);			subNavButton.x = 0;			subNavButton.y = 0+50*i;			subNavButton.buttonWidth = 750;			subNavButton.name = "subNavButton_"+i;			subNavButton.extra.language = itemTitle;			subNavButton.extra.index = i;			//trace(navButton.name)						subMenuMC.addChild(subNavButton);						if(currentItemSet != true){				currentItem = subNavButton;				trace(currentItem.name);				currentItemSet = true;				}							}						setContentMC(subMenuMC);									currentItem.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_OVER, true, false));					}										private function getNextItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			var result;			if(index < Number(totalItems-1)){			result = parentMC.getChildByName("subNavButton_"+Number(index+1));			}else{			result = parentMC.getChildByName("subNavButton_0");			}			return result;						}					private function getPrevItem(_currentItem){			var index = Number(_currentItem.extra.index);			var parentMC = _currentItem.parent;			trace(totalItems);			var result;			if(index > 0){			result = parentMC.getChildByName("subNavButton_"+Number(index-1));			}else{			result = parentMC.getChildByName("subNavButton_"+Number(totalItems-1));			}						return result;						}											private function setLanguage(e:MouseEvent){			var p = e.target.parent;			for(var i=0; i < languageArray.length;i++)			{				var selectButton = p.getChildByName("subNavButton_"+i);					selectButton.unSelectButton();			}			e.target.selectButton();			trace(MovieClip(root).language)			MovieClip(root).language = e.target.extra.language;			trace(MovieClip(root).language)			setScreenTitle("Language Selection - "+MovieClip(root).language);			//dispatchEvent(new LanguageEvent(LanguageEvent.CHANGE, true, false)); 		}				override protected function screenShutDown(){						stage.removeEventListener(KeyboardEvent.KEY_UP, navUp);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, navDown);		}			}		}